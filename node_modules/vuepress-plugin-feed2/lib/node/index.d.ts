import { Page, PluginFunction } from '@vuepress/core';
import { BasePageFrontMatter } from 'vuepress-shared';

interface FeedAuthor {
    /**
     * Author name
     *
     * 作者名字
     */
    name?: string;
    /**
     * Author Email
     *
     * 作者邮件
     */
    email?: string;
    /**
     * Author site
     *
     * 作者网站
     *
     * @description json format only
     */
    url?: string;
    /**
     * Author avatar
     *
     * 作者头像
     *
     * @description json format only
     */
    avatar?: string;
}
type FeedContributor = FeedAuthor;
interface FeedCategory {
    /**
     * Category name
     *
     * 分类名称
     */
    name: string;
    /**
     * A string that identifies a categorization taxonomy
     *
     * 标识分类法的字符串
     *
     * @description rss format only
     */
    domain?: string;
    /**
     * the categorization scheme via a URI
     *
     * URI 标识的分类 scheme
     *
     * @description atom format only
     */
    scheme?: string;
}
interface FeedEnclosure {
    /**
     * enclosure link
     *
     * Enclosure 地址
     */
    url: string;
    /**
     * what its type is
     *
     * @description should be standard MIME type
     *
     * 类型
     *
     * @description 应为一个标准的 MIME 类型
     */
    type: string;
    /**
     * Size in bytes
     *
     * 按照字节数计算的大小
     */
    length?: number;
}
interface FeedChannelOption {
    /**
     * Channel title
     *
     * 频道的标题
     */
    title: string;
    /**
     * The URL to the HTML site corresponding to the channel.
     *
     * 频道地址
     */
    link: string;
    /**
     * Phrase or sentence describing the channel.
     *
     * 频道描述信息
     */
    description: string;
    /**
     * The language the channel is written in.
     *
     * 频道使用的语言
     */
    language: string;
    /**
     * Copyright notice for content in the channel.
     *
     * 频道版权信息
     */
    copyright: string;
    /**
     * The publication date for the content in the channel.
     *
     * 频道内容的发布时间
     */
    pubDate?: Date;
    /**
     * The last time the content of the channel changed.
     *
     * 频道内容的上次更新时间
     */
    lastUpdated?: Date;
    /**
     * time to live.
     *
     * It’s a number of minutes that indicates how long a channel can be cached before refreshing from the source.
     */
    ttl?: number;
    /**
     * Specifies a GIF, JPEG or PNG image that can be displayed with the channel.
     */
    image?: string;
    /**
     * icon of the channel
     *
     * Probably your favicon
     */
    icon?: string;
    /**
     * GLobal Author
     */
    author?: FeedAuthor;
    /**
     * Link for websub
     *
     * @see https://w3c.github.io/websub/#subscription-migration
     */
    hub?: string;
}
interface FeedGetter {
    /**
     * Item title getter
     *
     * 项目标题获取器
     */
    title?: <ExtraPageData extends Record<string | number | symbol, unknown> = Record<never, never>, ExtraPageFrontmatter extends Record<string | number | symbol, unknown> = Record<string, unknown>, ExtraPageFields extends Record<string | number | symbol, unknown> = Record<never, never>>(page: Page<ExtraPageData, ExtraPageFrontmatter, ExtraPageFields>) => string;
    /**
     * Item link getter
     *
     * 项目链接获取器
     */
    link?: <ExtraPageData extends Record<string | number | symbol, unknown> = Record<never, never>, ExtraPageFrontmatter extends Record<string | number | symbol, unknown> = Record<string, unknown>, ExtraPageFields extends Record<string | number | symbol, unknown> = Record<never, never>>(page: Page<ExtraPageData, ExtraPageFrontmatter, ExtraPageFields>) => string;
    /**
     * Item description getter
     *
     * 项目描述获取器
     */
    description?: <ExtraPageData extends Record<string | number | symbol, unknown> = Record<never, never>, ExtraPageFrontmatter extends Record<string | number | symbol, unknown> = Record<string, unknown>, ExtraPageFields extends Record<string | number | symbol, unknown> = Record<never, never>>(page: Page<ExtraPageData, ExtraPageFrontmatter, ExtraPageFields>) => string | null;
    /**
     * Item content getter
     *
     * 项目内容获取器
     */
    content?: <ExtraPageData extends Record<string | number | symbol, unknown> = Record<never, never>, ExtraPageFrontmatter extends Record<string | number | symbol, unknown> = Record<string, unknown>, ExtraPageFields extends Record<string | number | symbol, unknown> = Record<never, never>>(page: Page<ExtraPageData, ExtraPageFrontmatter, ExtraPageFields>) => string;
    /**
     * Item author getter
     *
     * @description The getter should return an empty array when lacking author info
     *
     * 项目作者获取器
     *
     * @description 获取器应在作者信息缺失时返回空数组
     */
    author?: <ExtraPageData extends Record<string | number | symbol, unknown> = Record<never, never>, ExtraPageFrontmatter extends Record<string | number | symbol, unknown> = Record<string, unknown>, ExtraPageFields extends Record<string | number | symbol, unknown> = Record<never, never>>(page: Page<ExtraPageData, ExtraPageFrontmatter, ExtraPageFields>) => FeedAuthor[];
    /**
     * Item category getter
     *
     * 项目分类获取器
     */
    category?: <ExtraPageData extends Record<string | number | symbol, unknown> = Record<never, never>, ExtraPageFrontmatter extends Record<string | number | symbol, unknown> = Record<string, unknown>, ExtraPageFields extends Record<string | number | symbol, unknown> = Record<never, never>>(page: Page<ExtraPageData, ExtraPageFrontmatter, ExtraPageFields>) => FeedCategory[] | null;
    /**
     * Item enclosure getter
     *
     * 项目附件获取器
     */
    enclosure?: <ExtraPageData extends Record<string | number | symbol, unknown> = Record<never, never>, ExtraPageFrontmatter extends Record<string | number | symbol, unknown> = Record<string, unknown>, ExtraPageFields extends Record<string | number | symbol, unknown> = Record<never, never>>(page: Page<ExtraPageData, ExtraPageFrontmatter, ExtraPageFields>) => FeedEnclosure | null;
    /**
     * Item publish date getter
     *
     * 项目发布日期获取器
     */
    publishDate?: <ExtraPageData extends Record<string | number | symbol, unknown> = Record<never, never>, ExtraPageFrontmatter extends Record<string | number | symbol, unknown> = Record<string, unknown>, ExtraPageFields extends Record<string | number | symbol, unknown> = Record<never, never>>(page: Page<ExtraPageData, ExtraPageFrontmatter, ExtraPageFields>) => Date | null;
    /**
     * Item last update date getter
     *
     * 项目最后更新日期获取器
     */
    lastUpdateDate?: <ExtraPageData extends Record<string | number | symbol, unknown> = Record<never, never>, ExtraPageFrontmatter extends Record<string | number | symbol, unknown> = Record<string, unknown>, ExtraPageFields extends Record<string | number | symbol, unknown> = Record<never, never>>(page: Page<ExtraPageData, ExtraPageFrontmatter, ExtraPageFields>) => Date;
    /**
     * Item image getter
     *
     * 项目图片获取器
     */
    image?: <ExtraPageData extends Record<string | number | symbol, unknown> = Record<never, never>, ExtraPageFrontmatter extends Record<string | number | symbol, unknown> = Record<string, unknown>, ExtraPageFields extends Record<string | number | symbol, unknown> = Record<never, never>>(page: Page<ExtraPageData, ExtraPageFrontmatter, ExtraPageFields>) => string;
    /**
     * Item contributor getter
     *
     * 项目贡献者获取器
     */
    contributor?: <ExtraPageData extends Record<string | number | symbol, unknown> = Record<never, never>, ExtraPageFrontmatter extends Record<string | number | symbol, unknown> = Record<string, unknown>, ExtraPageFields extends Record<string | number | symbol, unknown> = Record<never, never>>(page: Page<ExtraPageData, ExtraPageFrontmatter, ExtraPageFields>) => FeedContributor[];
    /**
     * Item copyright getter
     *
     * 项目版权获取器
     */
    copyright?: <ExtraPageData extends Record<string | number | symbol, unknown> = Record<never, never>, ExtraPageFrontmatter extends Record<string | number | symbol, unknown> = Record<string, unknown>, ExtraPageFields extends Record<string | number | symbol, unknown> = Record<never, never>>(page: Page<ExtraPageData, ExtraPageFrontmatter, ExtraPageFields>) => string | null;
}

interface FeedItemOption {
    /**
     * The title of the item.
     */
    title: string;
    /**
     * The URL of the item.
     */
    link: string;
    /**
     * The item synopsis.
     */
    description?: string;
    /**
     * A string that uniquely identifies the item.
     */
    guid?: string;
    /**
     * Email address of the author of the item.
     */
    author?: FeedAuthor[];
    /**
     * Includes the item in one or more categories.
     */
    category?: FeedCategory[];
    /**
     * Indicates when the item was published.
     */
    pubDate?: Date;
    /**
     * Indicates when the item was updated.
     */
    lastUpdated: Date;
    /**
     * Item content
     */
    content: string;
    /**
     * URL of a page for comments relating to the item.
     *
     * @description rss format only
     */
    comments?: string;
    /**
     * Describes a media object that is attached to the item.
     *
     * @description rss format only
     */
    enclosure?: FeedEnclosure;
    /**
     * @description json format only
     */
    image?: string;
    /**
     * @description atom format only
     */
    contributor?: FeedAuthor[];
    /**
     * @description atom format only
     */
    copyright?: string;
}
interface FeedLinks {
    atom: string;
    json: string;
    rss: string;
}
interface FeedInitOptions {
    channel: FeedChannelOption;
    links: FeedLinks;
}

interface FeedFrontmatterOption {
    /**
     * Feed title
     */
    title?: string;
    /**
     * Feed description
     */
    description?: string;
    /**
     * Feed content
     */
    content?: string;
    /**
     * Feed author
     */
    author?: FeedAuthor[] | FeedAuthor;
    /**
     * Feed contributor
     */
    contributor?: FeedContributor[] | FeedContributor;
    /**
     * Feed category
     */
    category?: FeedCategory[] | FeedCategory;
    /**
     * @description guid should be unique globally
     */
    guid?: string;
}
interface FeedPluginFrontmatter extends BasePageFrontMatter {
    /**
     * Feed plugin options
     */
    feed?: FeedFrontmatterOption | false;
}

interface BaseFeedOptions {
    /**
     * Whether to output Atom syntax files.
     *
     * 是否启用 Atom 格式输出。
     *
     * @default false
     */
    atom?: boolean;
    /**
     * Whether to output JSON syntax files.
     *
     * 是否启用 JSON 格式输出。
     *
     * @default false
     */
    json?: boolean;
    /**
     * Whether to output RSS syntax files.
     *
     * 是否启用 RSS 格式输出。
     *
     * @default false
     */
    rss?: boolean;
    /**
     * A large image/icon of the feed, probably used as banner.
     *
     * 一个大的图片，用作 feed 展示。
     */
    image?: string;
    /**
     * A small icon of the feed, probably used as favicon.
     *
     * 一个小的图标，显示在订阅列表中。
     */
    icon?: string;
    /**
     * Maximum output items
     *
     * 输出的最大条目数量
     *
     * @default 100
     */
    count?: number;
    /**
     * Custom component or element which needs to be removed
     *
     * 需要移除的自定义组件或元素
     *
     * @default ['ExternalLinkIcon']
     */
    customElements?: string[];
    /**
     * A custom filter function, used to filter feed items.
     *
     * Feed 项目过滤器
     */
    filter?: <ExtraPageData extends Record<string | number | symbol, unknown> = Record<never, never>, ExtraPageFrontmatter extends Record<string | number | symbol, unknown> = Record<string, unknown>, ExtraPageFields extends Record<string | number | symbol, unknown> = Record<never, never>>(page: Page<ExtraPageData, ExtraPageFrontmatter, ExtraPageFields>) => boolean;
    /**
     * A custom sort function, used to sort feed items.
     *
     * Feed 项目排序器
     */
    sorter?: <ExtraPageData extends Record<string | number | symbol, unknown> = Record<never, never>, ExtraPageFrontmatter extends Record<string | number | symbol, unknown> = Record<string, unknown>, ExtraPageFields extends Record<string | number | symbol, unknown> = Record<never, never>>(pageA: Page<ExtraPageData, ExtraPageFrontmatter, ExtraPageFields>, pageB: Page<ExtraPageData, ExtraPageFrontmatter, ExtraPageFields>) => number;
    /**
     * Options to init feed channel
     *
     * Feed 频道选项
     */
    channel?: Partial<FeedChannelOption>;
    /**
     * Atom syntax output filename, relative to dest folder.
     *
     * Atom 格式输出路径，相对于输出路径。
     *
     * @default 'atom.xml'
     */
    atomOutputFilename?: string;
    /**
     * JSON syntax output filename, relative to dest folder.
     *
     * JSON 格式输出路径，相对于输出路径。
     *
     * @default 'feed.json'
     */
    jsonOutputFilename?: string;
    /**
     * RSS syntax output filename, relative to dest folder.
     *
     * RSS 格式输出路径，相对于输出路径。
     *
     * @default 'rss.xml'
     */
    rssOutputFilename?: string;
    /**
     * Feed generation controller
     *
     * @description The plugin is providing a reasonable getter by default, if you want full control of feed generating, you can set this field.
     *
     * Feed 生成控制器
     *
     * @description 插件已经在默认情况下提供了合理的获取器，如果你需要完全控制 Feed 生成，你可以设置此项。
     */
    getter?: FeedGetter;
}
interface FeedOptions extends BaseFeedOptions {
    /**
     * Deploy hostname
     *
     * 部署的域名
     */
    hostname: string;
    /** Locales for feed */
    locales?: Record<string, BaseFeedOptions>;
}

declare const feedPlugin: (options: FeedOptions, legacy?: boolean) => PluginFunction;

export { BaseFeedOptions, FeedAuthor, FeedCategory, FeedChannelOption, FeedContributor, FeedEnclosure, FeedFrontmatterOption, FeedGetter, FeedInitOptions, FeedItemOption, FeedLinks, FeedOptions, FeedPluginFrontmatter, feedPlugin };
