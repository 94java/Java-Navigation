import type { DetailedError } from 'mermaid';
interface Node {
    id: number;
    nodeId: string;
    level: number;
    descr: string;
    type: number;
    children: Node[];
    width: number;
    padding: number;
    icon?: string;
    class?: string;
}
export declare const clear: () => void;
export declare const getMindmap: () => Node | null;
export declare const addNode: (level: number, id: string, descr: string, type: number) => void;
export declare const nodeType: {
    DEFAULT: number;
    NO_BORDER: number;
    ROUNDED_RECT: number;
    RECT: number;
    CIRCLE: number;
    CLOUD: number;
    BANG: number;
};
export declare const getType: (startStr: string, endStr: string) => number;
export declare const decorateNode: (decoration: {
    icon: string;
    class: string;
}) => void;
export declare const type2Str: (type: number) => "no-border" | "rect" | "rounded-rect" | "circle" | "cloud" | "bang";
export declare type ParseErrorFunction = (err: string | DetailedError, hash?: any) => void;
export declare let parseError: ParseErrorFunction;
export declare const setErrorHandler: (handler: ParseErrorFunction) => void;
export declare const getLogger: () => Record<import("./mermaidUtils").LogLevel, {
    (...data: any[]): void;
    (message?: any, ...optionalParams: any[]): void;
}>;
export declare const getNodeById: (id: number) => Node;
export {};
