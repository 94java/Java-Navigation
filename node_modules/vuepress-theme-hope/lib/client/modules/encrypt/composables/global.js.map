{"version":3,"file":"global.js","sourceRoot":"","sources":["../../../../../src/client/modules/encrypt/composables/global.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,iBAAiB,EAAE,MAAM,cAAc,CAAC;AAC7D,OAAO,EAAE,WAAW,EAAE,MAAM,mBAAmB,CAAC;AAChD,OAAO,EAAE,QAAQ,EAAE,MAAM,KAAK,CAAC;AAE/B,OAAO,EAAE,cAAc,EAAE,MAAM,YAAY,CAAC;AAI5C,MAAM,WAAW,GAAG,4BAA4B,CAAC;AAOjD,MAAM,CAAC,MAAM,gBAAgB,GAAG,GAAkB,EAAE;IAClD,MAAM,WAAW,GAAG,cAAc,EAAE,CAAC;IAErC,MAAM,UAAU,GAAG,UAAU,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;IAC/C,MAAM,YAAY,GAAG,iBAAiB,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;IAExD,MAAM,iBAAiB,GAAG,QAAQ,CAAC,GAAG,EAAE;QACtC,wBAAwB;QACxB,IAAI,WAAW,CAAC,KAAK,CAAC,MAAM,IAAI,WAAW,CAAC,KAAK,CAAC,KAAK,EAAE;YACvD,IAAI,UAAU,CAAC,KAAK;gBAClB,4BAA4B;gBAC5B,OAAO,WAAW,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAClC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,WAAW,CAAC,UAAU,CAAC,KAAK,EAAE,IAAI,CAAC,CAC/C,CAAC;YAEJ,IAAI,YAAY,CAAC,KAAK;gBACpB,4BAA4B;gBAC5B,OAAO,WAAW,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAClC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,WAAW,CAAC,YAAY,CAAC,KAAK,EAAE,IAAI,CAAC,CACjD,CAAC;YAEJ,OAAO,IAAI,CAAC;SACb;QAED,OAAO,KAAK,CAAC;IACf,CAAC,CAAC,CAAC;IAEH,MAAM,mBAAmB,GAAG,CAAC,UAAkB,EAAE,IAAI,GAAG,KAAK,EAAQ,EAAE;QACrE,CAAC,IAAI,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,KAAK,GAAG,UAAU,CAAC;IACxD,CAAC,CAAC;IAEF,OAAO;QACL,iBAAiB;QACjB,mBAAmB;KACpB,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import { useStorage, useSessionStorage } from \"@vueuse/core\";\nimport { compareSync } from \"bcrypt-ts/browser\";\nimport { computed } from \"vue\";\n\nimport { useEncryptData } from \"./utils.js\";\n\nimport type { ComputedRef } from \"vue\";\n\nconst STORAGE_KEY = \"VUEPRESS_HOPE_GLOBAL_TOKEN\";\n\nexport interface GlobalEncrypt {\n  isGlobalEncrypted: ComputedRef<boolean>;\n  validateGlobalToken: (token: string, keep?: boolean) => void;\n}\n\nexport const useGlobalEncrypt = (): GlobalEncrypt => {\n  const encryptData = useEncryptData();\n\n  const localToken = useStorage(STORAGE_KEY, \"\");\n  const sessionToken = useSessionStorage(STORAGE_KEY, \"\");\n\n  const isGlobalEncrypted = computed(() => {\n    // is globally encrypted\n    if (encryptData.value.global && encryptData.value.admin) {\n      if (localToken.value)\n        // none of the token matches\n        return encryptData.value.admin.every(\n          (hash) => !compareSync(localToken.value, hash)\n        );\n\n      if (sessionToken.value)\n        // none of the token matches\n        return encryptData.value.admin.every(\n          (hash) => !compareSync(sessionToken.value, hash)\n        );\n\n      return true;\n    }\n\n    return false;\n  });\n\n  const validateGlobalToken = (inputToken: string, keep = false): void => {\n    (keep ? localToken : sessionToken).value = inputToken;\n  };\n\n  return {\n    isGlobalEncrypted,\n    validateGlobalToken,\n  };\n};\n"]}