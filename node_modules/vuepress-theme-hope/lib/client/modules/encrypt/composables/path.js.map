{"version":3,"file":"path.js","sourceRoot":"","sources":["../../../../../src/client/modules/encrypt/composables/path.ts"],"names":[],"mappings":"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","sourcesContent":["import { useStorage, useSessionStorage } from \"@vueuse/core\";\nimport { computed } from \"vue\";\nimport { useRoute } from \"vue-router\";\n\nimport { useEncryptData } from \"./utils.js\";\nimport { checkToken } from \"@theme-hope/modules/encrypt/utils/index.js\";\n\nimport type { ComputedRef } from \"vue\";\n\nconst STORAGE_KEY = \"VUEPRESS_HOPE_PATH_TOKEN\";\n\nexport interface PathEncrypt {\n  isEncrypted: ComputedRef<boolean>;\n  getPathEncryptStatus: (path: string) => boolean;\n  validateToken: (token: string, keep?: boolean) => void;\n}\n\nexport const usePathEncrypt = (): PathEncrypt => {\n  const route = useRoute();\n  const encryptData = useEncryptData();\n\n  const localToken = useStorage<Record<string, string>>(STORAGE_KEY, {});\n  const sessionToken = useSessionStorage<Record<string, string>>(\n    STORAGE_KEY,\n    {}\n  );\n\n  const getPathMatchedKeys = (path: string): string[] =>\n    typeof encryptData.value.config === \"object\"\n      ? Object.keys(encryptData.value.config)\n          .filter((key) => decodeURI(path).startsWith(key))\n          .sort((a, b) => b.length - a.length)\n      : [];\n\n  const getPathEncryptStatus = (path: string): boolean => {\n    const matchedKeys = getPathMatchedKeys(path);\n\n    if (matchedKeys.length !== 0) {\n      const { config = {} } = encryptData.value;\n\n      return !matchedKeys.some(\n        (key) =>\n          (localToken.value[key] &&\n            config[key].some((token) =>\n              checkToken(localToken.value[key], token)\n            )) ||\n          (sessionToken.value[key] &&\n            config[key].some((token) =>\n              checkToken(sessionToken.value[key], token)\n            ))\n      );\n    }\n\n    return false;\n  };\n\n  const isEncrypted = computed(() => getPathEncryptStatus(route.path));\n\n  const validateToken = (inputToken: string, keep = false): void => {\n    const { config = {} } = encryptData.value;\n    const matchedKeys = getPathMatchedKeys(route.path);\n\n    for (const hitKey of matchedKeys) {\n      // some of the tokens matches\n      if (config[hitKey].filter((token) => checkToken(inputToken, token))) {\n        (keep ? localToken : sessionToken).value[hitKey] = inputToken;\n\n        break;\n      }\n    }\n  };\n\n  return {\n    isEncrypted,\n    getPathEncryptStatus,\n    validateToken,\n  };\n};\n"]}