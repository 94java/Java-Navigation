{"version":3,"file":"render.js","sourceRoot":"","sources":["../../../../../src/client/modules/sidebar/composables/render.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,CAAC,EAAE,MAAM,KAAK,CAAC;AACxB,OAAO,EAAE,QAAQ,EAAE,MAAM,YAAY,CAAC;AAEtC,OAAO,QAAQ,MAAM,oCAAoC,CAAC;AAC1D,OAAO,IAAI,MAAM,gCAAgC,CAAC;AAClD,OAAO,EAAE,mBAAmB,EAAE,MAAM,4CAA4C,CAAC;AASjF,MAAM,CAAC,MAAM,UAAU,GAAG,CACxB,MAA2B,EAC3B,KAAqB,EACd,EAAE,CACT,MAAM,CAAC,IAAI;IACT,CAAC,CAAC,kDAAkD;QAClD,CAAC,CAAC,QAAQ,EAAE;YACV,GAAG,KAAK;YACR,MAAM,EAAE,MAAsB;SAC/B,CAAC;IACJ,CAAC,CAAC,gDAAgD;QAChD,CAAC,CAAC,GAAG,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE,EAAE,IAAI,EAAE,MAAM,CAAC,IAAI,EAAE,CAAC,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;AAEnE,MAAM,CAAC,MAAM,cAAc,GAAG,CAC5B,QAAqC,EACvB,EAAE;IAChB,MAAM,KAAK,GAAG,QAAQ,EAAE,CAAC;IAEzB,IAAI,CAAC,QAAQ;QAAE,OAAO,IAAI,CAAC;IAE3B,OAAO,CAAC,CACN,IAAI,EACJ,EAAE,KAAK,EAAE,qBAAqB,EAAE,EAChC,QAAQ,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE;QACrB,MAAM,MAAM,GAAG,mBAAmB,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;QAEvD,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE,KAAK,EAAE,oBAAoB,EAAE,EAAE;YAC9C,UAAU,CAAC,KAAK,EAAE;gBAChB,KAAK,EAAE,CAAC,cAAc,EAAE,SAAS,EAAE,EAAE,MAAM,EAAE,CAAC;aAC/C,CAAC;YACF,cAAc,CAAC,KAAK,CAAC,QAAQ,CAAC;SAC/B,CAAC,CAAC;IACL,CAAC,CAAC,CACH,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import { h } from \"vue\";\nimport { useRoute } from \"vue-router\";\n\nimport AutoLink from \"@theme-hope/components/AutoLink.js\";\nimport Icon from \"@theme-hope/components/Icon.js\";\nimport { isActiveSidebarItem } from \"@theme-hope/modules/sidebar/utils/index.js\";\n\nimport type { VNode } from \"vue\";\nimport type {\n  ResolvedSidebarItem,\n  ResolvedSidebarHeaderItem,\n} from \"../utils/index.js\";\nimport type { AutoLinkOptions as AutoLinkType } from \"../../../../shared/index.js\";\n\nexport const renderItem = (\n  config: ResolvedSidebarItem,\n  props: VNode[\"props\"]\n): VNode =>\n  config.link\n    ? // if the item has link, render it as `<AutoLink>`\n      h(AutoLink, {\n        ...props,\n        config: config as AutoLinkType,\n      })\n    : // if the item only has text, render it as `<p>`\n      h(\"p\", props, [h(Icon, { icon: config.icon }), config.text]);\n\nexport const renderChildren = (\n  children: ResolvedSidebarHeaderItem[]\n): VNode | null => {\n  const route = useRoute();\n\n  if (!children) return null;\n\n  return h(\n    \"ul\",\n    { class: \"sidebar-sub-headers\" },\n    children.map((child) => {\n      const active = isActiveSidebarItem(route, child, true);\n\n      return h(\"li\", { class: \"sidebar-sub-header\" }, [\n        renderItem(child, {\n          class: [\"sidebar-link\", \"heading\", { active }],\n        }),\n        renderChildren(child.children),\n      ]);\n    })\n  );\n};\n"]}