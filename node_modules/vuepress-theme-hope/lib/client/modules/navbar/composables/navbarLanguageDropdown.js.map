{"version":3,"file":"navbarLanguageDropdown.js","sourceRoot":"","sources":["../../../../../src/client/modules/navbar/composables/navbarLanguageDropdown.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAE,iBAAiB,EAAE,MAAM,kBAAkB,CAAC;AACrE,OAAO,EAAE,QAAQ,EAAE,MAAM,KAAK,CAAC;AAC/B,OAAO,EAAE,SAAS,EAAE,MAAM,YAAY,CAAC;AAEvC,OAAO,EACL,YAAY,EACZ,kBAAkB,GACnB,MAAM,kCAAkC,CAAC;AAK1C;;GAEG;AACH,MAAM,CAAC,MAAM,yBAAyB,GACpC,GAAkD,EAAE;IAClD,MAAM,MAAM,GAAG,SAAS,EAAE,CAAC;IAC3B,MAAM,WAAW,GAAG,cAAc,EAAE,CAAC;IACrC,MAAM,UAAU,GAAG,iBAAiB,EAAE,CAAC;IACvC,MAAM,SAAS,GAAG,YAAY,EAAE,CAAC;IACjC,MAAM,WAAW,GAAG,kBAAkB,EAAE,CAAC;IAEzC,OAAO,QAAQ,CAAmC,GAAG,EAAE;QACrD,MAAM,WAAW,GAAG,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QAE1D,2EAA2E;QAC3E,IAAI,WAAW,CAAC,MAAM,GAAG,CAAC;YAAE,OAAO,IAAI,CAAC;QAExC,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC;QACjD,MAAM,EAAE,aAAa,EAAE,GAAG,WAAW,CAAC,KAAK,CAAC;QAE5C,MAAM,gBAAgB,GAA8B;YAClD,IAAI,EAAE,EAAE;YACR,SAAS,EAAE,aAAa,EAAE,mBAAmB;YAC7C,QAAQ,EAAE,WAAW,CAAC,GAAG,CAAC,CAAC,gBAAgB,EAAE,EAAE;gBAC7C,6CAA6C;gBAC7C,MAAM,gBAAgB,GACpB,UAAU,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,gBAAgB,CAAC,IAAI,EAAE,CAAC;gBACrD,MAAM,iBAAiB,GACrB,SAAS,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,gBAAgB,CAAC,IAAI,EAAE,CAAC;gBACpD,MAAM,UAAU,GAAG,gBAAgB,CAAC,IAAI,IAAI,EAAE,CAAC;gBAE/C,MAAM,IAAI,GAAG,iBAAiB,CAAC,aAAa,EAAE,QAAQ,IAAI,UAAU,CAAC;gBACrE,IAAI,IAAI,CAAC;gBAET,6CAA6C;gBAC7C,IAAI,UAAU,KAAK,UAAU,CAAC,KAAK,CAAC,IAAI,EAAE;oBACxC,uBAAuB;oBACvB,IAAI,GAAG,IAAI,CAAC;iBACb;gBACD,iDAAiD;qBAC5C;oBACH,MAAM,gBAAgB,GAAG,IAAI,CAAC,OAAO,CACnC,WAAW,CAAC,KAAK,EACjB,gBAAgB,CACjB,CAAC;oBAEF,IAAI;wBACF,wDAAwD;wBACxD,MAAM,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,KAAK,gBAAgB,CAAC;4BAC/D,CAAC,CAAC,4CAA4C;gCAC5C,GAAG,gBAAgB,GAAG,IAAI,EAAE;4BAC9B,CAAC,CAAC,0BAA0B;gCAC1B,iBAAiB,CAAC,IAAI,IAAI,gBAAgB,CAAC;iBAClD;gBAED,OAAO;oBACL,IAAI;oBACJ,IAAI;iBACL,CAAC;YACJ,CAAC,CAAC;SACH,CAAC;QAEF,OAAO,gBAAgB,CAAC;IAC1B,CAAC,CAAC,CAAC;AACL,CAAC,CAAC","sourcesContent":["import { useRouteLocale, useSiteLocaleData } from \"@vuepress/client\";\nimport { computed } from \"vue\";\nimport { useRouter } from \"vue-router\";\n\nimport {\n  useThemeData,\n  useThemeLocaleData,\n} from \"@theme-hope/composables/index.js\";\n\nimport type { ComputedRef } from \"vue\";\nimport type { AutoLinkOptions, NavGroup } from \"../../../../shared/index.js\";\n\n/**\n * Get navbar config of select language dropdown\n */\nexport const useNavbarLanguageDropdown =\n  (): ComputedRef<NavGroup<AutoLinkOptions> | null> => {\n    const router = useRouter();\n    const routeLocale = useRouteLocale();\n    const siteLocale = useSiteLocaleData();\n    const themeData = useThemeData();\n    const themeLocale = useThemeLocaleData();\n\n    return computed<NavGroup<AutoLinkOptions> | null>(() => {\n      const localePaths = Object.keys(siteLocale.value.locales);\n\n      // do not display language selection dropdown if there is only one language\n      if (localePaths.length < 2) return null;\n\n      const { path, hash } = router.currentRoute.value;\n      const { navbarLocales } = themeLocale.value;\n\n      const languageDropdown: NavGroup<AutoLinkOptions> = {\n        text: \"\",\n        ariaLabel: navbarLocales?.selectLangAriaLabel,\n        children: localePaths.map((targetLocalePath) => {\n          // target locale config of this language link\n          const targetSiteLocale =\n            siteLocale.value.locales?.[targetLocalePath] ?? {};\n          const targetThemeLocale =\n            themeData.value.locales?.[targetLocalePath] ?? {};\n          const targetLang = targetSiteLocale.lang || \"\";\n\n          const text = targetThemeLocale.navbarLocales?.langName ?? targetLang;\n          let link;\n\n          // if the target language is current language\n          if (targetLang === siteLocale.value.lang) {\n            // stay at current link\n            link = path;\n          }\n          // if the target language is not current language\n          else {\n            const targetLocalePage = path.replace(\n              routeLocale.value,\n              targetLocalePath\n            );\n\n            link =\n              // try to link to the corresponding page of current page\n              router.getRoutes().some((item) => item.path === targetLocalePage)\n                ? // try to keep current hash across languages\n                  `${targetLocalePage}${hash}`\n                : // or fallback to homepage\n                  targetThemeLocale.home ?? targetLocalePath;\n          }\n\n          return {\n            text,\n            link,\n          };\n        }),\n      };\n\n      return languageDropdown;\n    });\n  };\n"]}