{"version":3,"file":"TagInfo.js","sourceRoot":"","sources":["../../../../../src/client/modules/info/components/TagInfo.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,eAAe,EAAE,CAAC,EAAE,MAAM,KAAK,CAAC;AACzC,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,MAAM,YAAY,CAAC;AACjD,OAAO,EAAE,qBAAqB,EAAE,MAAM,wBAAwB,CAAC;AAE/D,OAAO,EAAE,OAAO,EAAE,MAAM,8CAA8C,CAAC;AACvE,OAAO,EAAE,aAAa,EAAE,MAAM,+CAA+C,CAAC;AAK9E,OAAO,oBAAoB,CAAC;AAE5B,eAAe,eAAe,CAAC;IAC7B,IAAI,EAAE,SAAS;IAEf,YAAY,EAAE,KAAK;IAEnB,KAAK,EAAE;QACL;;;;WAIG;QACH,GAAG,EAAE;YACH,IAAI,EAAE,KAA4B;YAClC,OAAO,EAAE,GAAG,EAAE,CAAC,EAAE;SAClB;QAED;;;;WAIG;QACH,IAAI,EAAE,OAAO;KACd;IAED,KAAK,CAAC,KAAK;QACT,MAAM,MAAM,GAAG,SAAS,EAAE,CAAC;QAC3B,MAAM,KAAK,GAAG,QAAQ,EAAE,CAAC;QACzB,MAAM,UAAU,GAAG,aAAa,EAAE,CAAC;QAEnC,MAAM,QAAQ,GAAG,CAAC,KAAY,EAAE,IAAI,GAAG,EAAE,EAAQ,EAAE;YACjD,IAAI,IAAI,IAAI,KAAK,CAAC,IAAI,KAAK,IAAI,EAAE;gBAC/B,KAAK,CAAC,cAAc,EAAE,CAAC;gBACvB,KAAK,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aACxB;QACH,CAAC,CAAC;QAEF,OAAO,GAAiB,EAAE,CACxB,KAAK,CAAC,GAAG,CAAC,MAAM;YACd,CAAC,CAAC,CAAC,CACC,MAAM,EACN;gBACE,YAAY,EAAE,GAAG,UAAU,CAAC,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE;gBAChE,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,kBAAkB,EAAE,MAAM,EAAE,CAAC;aACtD,EACD;gBACE,CAAC,CAAC,OAAO,CAAC;gBAEV,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,EAAE,CAClC,CAAC,CACC,MAAM,EACN;oBACE,KAAK,EAAE;wBACL,UAAU;wBACV;4BACE,sCAAsC;4BACtC,CAAC,MAAM,qBAAqB,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI;4BACrD,SAAS,EAAE,IAAI;yBAChB;qBACF;oBACD,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE;oBAC9B,OAAO,EAAE,CAAC,KAAY,EAAE,EAAE,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC;iBACjD,EACD,IAAI,CACL,CACF;gBACD,CAAC,CAAC,MAAM,EAAE;oBACR,QAAQ,EAAE,UAAU;oBACpB,OAAO,EAAE,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;iBACrD,CAAC;aACH,CACF;YACH,CAAC,CAAC,IAAI,CAAC;IACb,CAAC;CACF,CAAC,CAAC","sourcesContent":["import { defineComponent, h } from \"vue\";\nimport { useRoute, useRouter } from \"vue-router\";\nimport { generateIndexFromHash } from \"vuepress-shared/client\";\n\nimport { TagIcon } from \"@theme-hope/modules/info/components/icons.js\";\nimport { useMetaLocale } from \"@theme-hope/modules/info/composables/index.js\";\n\nimport type { PropType, VNode } from \"vue\";\nimport type { PageTag } from \"@theme-hope/modules/info/utils/index.js\";\n\nimport \"../styles/tag.scss\";\n\nexport default defineComponent({\n  name: \"TagInfo\",\n\n  inheritAttrs: false,\n\n  props: {\n    /**\n     * Tag information\n     *\n     * Ê†áÁ≠æ‰ø°ÊÅØ\n     */\n    tag: {\n      type: Array as PropType<PageTag[]>,\n      default: () => [],\n    },\n\n    /**\n     * Whether in pure mode\n     *\n     * ÊòØÂê¶Â§Ñ‰∫éÁ∫ØÂáÄÊ®°Âºè\n     */\n    pure: Boolean,\n  },\n\n  setup(props) {\n    const router = useRouter();\n    const route = useRoute();\n    const metaLocale = useMetaLocale();\n\n    const navigate = (event: Event, path = \"\"): void => {\n      if (path && route.path !== path) {\n        event.preventDefault();\n        void router.push(path);\n      }\n    };\n\n    return (): VNode | null =>\n      props.tag.length\n        ? h(\n            \"span\",\n            {\n              \"aria-label\": `${metaLocale.value.tag}${props.pure ? \"\" : \"üè∑\"}`,\n              ...(props.pure ? {} : { \"data-balloon-pos\": \"down\" }),\n            },\n            [\n              h(TagIcon),\n\n              ...props.tag.map(({ name, path }) =>\n                h(\n                  \"span\",\n                  {\n                    class: [\n                      \"tag-item\",\n                      {\n                        // TODO: magic number 9 is tricky here\n                        [`tag${generateIndexFromHash(name, 9)}`]: !props.pure,\n                        clickable: path,\n                      },\n                    ],\n                    role: path ? \"navigation\" : \"\",\n                    onClick: (event: Event) => navigate(event, path),\n                  },\n                  name\n                )\n              ),\n              h(\"meta\", {\n                property: \"keywords\",\n                content: props.tag.map(({ name }) => name).join(\",\"),\n              }),\n            ]\n          )\n        : null;\n  },\n});\n"]}