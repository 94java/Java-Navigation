{"version":3,"file":"sorter.js","sourceRoot":"","sources":["../../../../src/node/prepare/sidebar/sorter.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  SidebarInfo,\n  SidebarSorter,\n  SidebarSorterFunction,\n} from \"../../../shared/index.js\";\n\nexport const readmeSorter = (\n  infoA: SidebarInfo,\n  infoB: SidebarInfo\n): number => {\n  if (infoA.type === \"file\" && infoA.filename.toLowerCase() === \"readme.md\")\n    return -1;\n\n  if (infoB.type === \"file\" && infoB.filename.toLowerCase() === \"readme.md\")\n    return 1;\n\n  return 0;\n};\n\nexport const orderSorter = (infoA: SidebarInfo, infoB: SidebarInfo): number => {\n  // itemA order is absent\n  if (infoA.order === null) {\n    // both item do not have orders\n    if (infoB.order === null) return 0;\n\n    // itemA order is absent while itemB order is present\n    return infoB.order;\n  }\n\n  // itemA order is present while itemB order is absent\n  if (infoB.order === null) return -infoA.order;\n\n  // now we are sure both order exist\n\n  // itemA order is positive\n  if (infoA.order > 0) {\n    // both order are negative\n    if (infoB.order > 0) return infoA.order - infoB.order;\n\n    // infoA.order is positive while infoB.order is negative\n    return -1;\n  }\n\n  // both order are negative\n  if (infoB.order < 0) return infoA.order - infoB.order;\n\n  // infoA.order is negative while infoB.order is positive\n  return 1;\n};\n\nexport const dateSorter = (infoA: SidebarInfo, infoB: SidebarInfo): number => {\n  if (infoA.frontmatter?.date instanceof Date) {\n    if (infoB.frontmatter?.date instanceof Date)\n      return (\n        infoA.frontmatter?.date.getTime() - infoB.frontmatter.date.getTime()\n      );\n\n    return -1;\n  }\n\n  if (infoB.frontmatter?.date instanceof Date) return 1;\n\n  return 0;\n};\n\nexport const dateDescSorter = (\n  infoA: SidebarInfo,\n  infoB: SidebarInfo\n): number => {\n  if (infoA.frontmatter?.date instanceof Date) {\n    if (infoB.frontmatter?.date instanceof Date)\n      return (\n        infoB.frontmatter.date.getTime() - infoA.frontmatter.date.getTime()\n      );\n\n    return -1;\n  }\n\n  if (infoB.frontmatter?.date instanceof Date) return 1;\n\n  return 0;\n};\n\nconst getFilename = (info: SidebarInfo): string =>\n  info.type === \"file\" ? info.filename.replace(/\\.md$/, \"\") : info.dirname;\n\nexport const filenameSorter = (\n  infoA: SidebarInfo,\n  infoB: SidebarInfo\n): number => {\n  const result = getFilename(infoA).localeCompare(\n    getFilename(infoB),\n    undefined,\n    {\n      numeric: true,\n      sensitivity: \"accent\",\n    }\n  );\n\n  if (result !== 0) return result;\n\n  if (infoA.type === \"file\" && infoB.type === \"dir\") return -1;\n  if (infoA.type === \"dir\" && infoB.type === \"file\") return 1;\n\n  return 0;\n};\n\nexport const titleSorter = (infoA: SidebarInfo, infoB: SidebarInfo): number =>\n  infoA.title.localeCompare(infoB.title, undefined, {\n    numeric: true,\n  });\n\nconst sortKeyMap: Record<string, SidebarSorterFunction> = {\n  readme: readmeSorter,\n  order: orderSorter,\n  date: dateSorter,\n  \"date-desc\": dateDescSorter,\n  filename: filenameSorter,\n  title: titleSorter,\n};\n\nconst availableKeywords = Object.keys(sortKeyMap);\n\nexport const getSorter = (sorter?: SidebarSorter): SidebarSorterFunction[] => {\n  if (typeof sorter === \"string\" && availableKeywords.includes(sorter))\n    return [sortKeyMap[sorter]];\n\n  if (typeof sorter === \"function\") return [sorter];\n\n  if (Array.isArray(sorter)) {\n    const result = sorter\n      .map((item) => (typeof item === \"string\" ? sortKeyMap[item] : item))\n      .filter((item) => typeof item === \"function\");\n\n    if (result.length) return result;\n  }\n\n  return [readmeSorter, orderSorter, titleSorter, filenameSorter];\n};\n"]}