{"version":3,"file":"encrypt.js","sourceRoot":"","sources":["../../../src/node/config/encrypt.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,gBAAgB,CAAC;AAC1C,OAAO,EAAE,MAAM,EAAE,MAAM,aAAa,CAAC;AAIrC,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAAC,OAAuB,EAAiB,EAAE;IACzE,MAAM,MAAM,GAAkB,EAAE,CAAC;IAEjC,IAAI,OAAO,CAAC,MAAM;QAAE,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC;IAEzC,sBAAsB;IACtB,IAAI,OAAO,CAAC,KAAK;QACf,IAAI,OAAO,OAAO,CAAC,KAAK,KAAK,QAAQ;YACnC,MAAM,CAAC,KAAK,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;aACtC,IAAI,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC;YACnC,MAAM,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK;iBACzB,GAAG,CAAC,CAAC,WAAW,EAAE,EAAE;gBACnB,IAAI,OAAO,WAAW,KAAK,QAAQ;oBAAE,OAAO,QAAQ,CAAC,WAAW,CAAC,CAAC;gBAElE,MAAM,CAAC,KAAK,CAAC;;oEAE6C,OAAO,WAAW,kBAAkB,CAAC,CAAC;gBAEhG,OAAO,IAAI,CAAC;YACd,CAAC,CAAC;iBACD,MAAM,CAAC,CAAC,IAAI,EAAkB,EAAE,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC;;YAEnD,MAAM,CAAC,KAAK,CACV;;yHAEiH,OAAO,OAAO,CAAC,KAAK,kBAAkB,CACxJ,CAAC;IAEN,IAAI,OAAO,CAAC,MAAM;QAChB,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC,WAAW,CAChC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC;aAC3B,GAAG,CAA4B,CAAC,CAAC,GAAG,EAAE,MAAM,CAAC,EAAE,EAAE;YAChD,IAAI,OAAO,MAAM,KAAK,QAAQ;gBAAE,OAAO,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAEjE,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;gBACzB,MAAM,eAAe,GAAG,MAAM;qBAC3B,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE;oBACb,IAAI,OAAO,KAAK,KAAK,QAAQ;wBAAE,OAAO,QAAQ,CAAC,KAAK,CAAC,CAAC;oBAEtD,MAAM,CAAC,KAAK,CAAC;;MAEvB,GAAG,yDAAyD,OAAO,KAAK,kBAAkB,CAAC,CAAC;oBAElF,OAAO,IAAI,CAAC;gBACd,CAAC,CAAC;qBACD,MAAM,CAAC,CAAC,IAAI,EAAkB,EAAE,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC;gBAEnD,IAAI,eAAe,CAAC,MAAM;oBAAE,OAAO,CAAC,GAAG,EAAE,eAAe,CAAC,CAAC;gBAE1D,OAAO,IAAI,CAAC;aACb;YAED,MAAM,CAAC,KAAK,CACV;;2BAEe,GAAG,6CAA6C,OAAO,MAAM,kBAAkB,CAC/F,CAAC;YAEF,OAAO,IAAI,CAAC;QACd,CAAC,CAAC;aACD,MAAM,CAAC,CAAC,IAAI,EAA8B,EAAE,CAAC,IAAI,KAAK,IAAI,CAAC,CAC/D,CAAC;IAEJ,OAAO,MAAM,CAAC;AAChB,CAAC,CAAC","sourcesContent":["import { hashSync } from \"bcrypt-ts/node\";\nimport { logger } from \"../utils.js\";\n\nimport type { EncryptConfig, EncryptOptions } from \"../../shared/index.js\";\n\nexport const getEncryptConfig = (encrypt: EncryptOptions): EncryptConfig => {\n  const result: EncryptConfig = {};\n\n  if (encrypt.global) result.global = true;\n\n  // handle global token\n  if (encrypt.admin)\n    if (typeof encrypt.admin === \"string\")\n      result.admin = [hashSync(encrypt.admin)];\n    else if (Array.isArray(encrypt.admin))\n      result.admin = encrypt.admin\n        .map((globalToken) => {\n          if (typeof globalToken === \"string\") return hashSync(globalToken);\n\n          logger.error(`You config \"themeConfig.encrypt.admin\", but your config is invalid. \n\n          All password MUST be string. But we found one’s type is ${typeof globalToken}. Please fix it!`);\n\n          return null;\n        })\n        .filter((item): item is string => item !== null);\n    else\n      logger.error(\n        `You are asking for global encryption but you provide invalid \"admin\" config. \n        \n        Please check \"admin\" in your \"themeConfig.encrypt\" config. It can be string or string[], but you are providing ${typeof encrypt.admin}. Please fix it!`\n      );\n\n  if (encrypt.config)\n    result.config = Object.fromEntries(\n      Object.entries(encrypt.config)\n        .map<[string, string[]] | null>(([key, tokens]) => {\n          if (typeof tokens === \"string\") return [key, [hashSync(tokens)]];\n\n          if (Array.isArray(tokens)) {\n            const encryptedTokens = tokens\n              .map((token) => {\n                if (typeof token === \"string\") return hashSync(token);\n\n                logger.error(`You config \"themeConfig.encrypt.config\", but your config is invalid. \n        \nKey ${key}’s value MUST be string or string[]. But it’s type is ${typeof token}. Please fix it!`);\n\n                return null;\n              })\n              .filter((item): item is string => item !== null);\n\n            if (encryptedTokens.length) return [key, encryptedTokens];\n\n            return null;\n          }\n\n          logger.error(\n            `You config \"themeConfig.encrypt.config\", but your config is invalid. \n        \n        The value of key ${key} MUST be string or string[]. But not it’s ${typeof tokens}. Please fix it!`\n          );\n\n          return null;\n        })\n        .filter((item): item is [string, string[]] => item !== null)\n    );\n\n  return result;\n};\n"]}