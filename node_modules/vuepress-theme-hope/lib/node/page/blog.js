import matter from "gray-matter";
import { getDate, timeTransformer } from "vuepress-shared/node";
export const injectBlogInfo = (app, themeData, page, enableAutoExcerpt, injectContentSensitiveData = false) => {
    const { config = {} } = themeData.encrypt;
    const frontmatter = page.frontmatter;
    const { filePathRelative, path } = page;
    const { createdTime } = page.data.git || {};
    const isArticle = 
    // declaring this is an article
    frontmatter.article ||
        // generated from markdown files
        Boolean(frontmatter.article !== false && filePathRelative);
    const isEncrypted = Object.keys(config).some((key) => decodeURI(path).startsWith(key));
    const isSlide = isArticle && frontmatter.layout === "Slide";
    // save page type to routeMeta
    page.routeMeta["y" /* ArticleInfoType.type */] = frontmatter.home
        ? "h" /* PageType.home */
        : isSlide
            ? "s" /* PageType.slide */
            : isArticle
                ? "a" /* PageType.article */
                : "p" /* PageType.page */;
    // resolve author
    if ("author" in frontmatter)
        page.routeMeta["a" /* ArticleInfoType.author */] = frontmatter.author;
    // resolve date
    if ("date" in frontmatter) {
        const date = getDate(page.frontmatter.date)?.value;
        if (date) {
            page.routeMeta["d" /* ArticleInfoType.date */] = frontmatter.date;
            page.routeMeta["l" /* ArticleInfoType.localizedDate */] = timeTransformer(date, {
                lang: page.lang,
                type: "date",
            });
        }
    }
    else if (createdTime)
        page.routeMeta["d" /* ArticleInfoType.date */] = new Date(createdTime);
    if ("category" in frontmatter)
        // resolve category
        // resolve category
        page.routeMeta["c" /* ArticleInfoType.category */] = frontmatter.category;
    // resolve tag
    if ("tag" in frontmatter)
        page.routeMeta["g" /* ArticleInfoType.tag */] = frontmatter.tag;
    // resolve sticky
    if ("sticky" in frontmatter)
        page.routeMeta["u" /* ArticleInfoType.sticky */] = frontmatter.sticky;
    // resolve image
    if ("cover" in frontmatter)
        page.routeMeta["v" /* ArticleInfoType.cover */] = frontmatter.cover;
    // resolve isOriginal
    if ("isOriginal" in frontmatter)
        page.routeMeta["o" /* ArticleInfoType.isOriginal */] = frontmatter.isOriginal;
    // resolve encrypted
    if (isEncrypted)
        page.routeMeta["n" /* ArticleInfoType.isEncrypted */] = true;
    const excerpt = isEncrypted
        ? ""
        : frontmatter.excerpt ||
            page.excerpt ||
            // special handle auto generated description by seo2 plugin
            (page.data.autoDesc ? "" : frontmatter.description) ||
            // generate excerpt from content
            // excerpt is sensitive with markdown contents
            (injectContentSensitiveData && enableAutoExcerpt
                ? app.markdown.render(
                // get page content
                matter(page.content)
                    .content.trim()
                    // remove first heading1 as title
                    .replace(/^# (.*)$/gm, "")
                    // get lines until total length is above 200
                    .split("\n")
                    .reduce((excerpt, content) => excerpt.length < 200 ? `${excerpt}\n${content}` : excerpt, ""), 
                // markdown env
                {
                    base: app.options.base,
                    filePath: page.filePath,
                    filePathRelative: page.filePathRelative,
                    frontmatter: { ...page.frontmatter },
                })
                : "");
    // save page excerpt to routeMeta
    if (excerpt)
        page.routeMeta["e" /* ArticleInfoType.excerpt */] = excerpt;
    if (
    // reading time data is sensitive with markdown contents
    injectContentSensitiveData &&
        // ensure a valid reading time exists
        page.data.readingTime &&
        page.data.readingTime.words !== 0)
        page.routeMeta["r" /* ArticleInfoType.readingTime */] = page.data.readingTime;
};
//# sourceMappingURL=blog.js.map