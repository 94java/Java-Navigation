{"version":3,"file":"blog.js","sourceRoot":"","sources":["../../../src/node/page/blog.ts"],"names":[],"mappings":"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","sourcesContent":["import matter from \"gray-matter\";\nimport { getDate, timeTransformer } from \"vuepress-shared/node\";\n\nimport { ArticleInfoType, PageType } from \"../../shared/index.js\";\n\nimport type { App, Page } from \"@vuepress/core\";\nimport type {\n  ThemeData,\n  ThemePageData,\n  ThemeBlogHomePageFrontmatter,\n  ThemeProjectHomePageFrontmatter,\n  ThemeNormalPageFrontmatter,\n} from \"../../shared/index.js\";\n\nexport const injectBlogInfo = (\n  app: App,\n  themeData: ThemeData,\n  page: Page<ThemePageData>,\n  enableAutoExcerpt: boolean,\n  injectContentSensitiveData = false\n): void => {\n  const { config = {} } = themeData.encrypt;\n  const frontmatter = page.frontmatter as\n    | ThemeProjectHomePageFrontmatter\n    | ThemeBlogHomePageFrontmatter\n    | ThemeNormalPageFrontmatter;\n  const { filePathRelative, path } = page;\n  const { createdTime } = page.data.git || {};\n\n  const isArticle =\n    // declaring this is an article\n    frontmatter.article ||\n    // generated from markdown files\n    Boolean(frontmatter.article !== false && filePathRelative);\n  const isEncrypted = Object.keys(config).some((key) =>\n    decodeURI(path).startsWith(key)\n  );\n  const isSlide = isArticle && frontmatter.layout === \"Slide\";\n\n  // save page type to routeMeta\n  page.routeMeta[ArticleInfoType.type] = frontmatter.home\n    ? PageType.home\n    : isSlide\n    ? PageType.slide\n    : isArticle\n    ? PageType.article\n    : PageType.page;\n\n  // resolve author\n  if (\"author\" in frontmatter)\n    page.routeMeta[ArticleInfoType.author] = frontmatter.author;\n\n  // resolve date\n  if (\"date\" in frontmatter) {\n    const date = getDate(page.frontmatter.date)?.value;\n\n    if (date) {\n      page.routeMeta[ArticleInfoType.date] = frontmatter.date;\n\n      page.routeMeta[ArticleInfoType.localizedDate] = timeTransformer(date, {\n        lang: page.lang,\n        type: \"date\",\n      });\n    }\n  } else if (createdTime)\n    page.routeMeta[ArticleInfoType.date] = new Date(createdTime);\n\n  if (\"category\" in frontmatter)\n    // resolve category\n    // resolve category\n    page.routeMeta[ArticleInfoType.category] = frontmatter.category;\n\n  // resolve tag\n  if (\"tag\" in frontmatter)\n    page.routeMeta[ArticleInfoType.tag] = frontmatter.tag;\n\n  // resolve sticky\n  if (\"sticky\" in frontmatter)\n    page.routeMeta[ArticleInfoType.sticky] = frontmatter.sticky;\n\n  // resolve image\n  if (\"cover\" in frontmatter)\n    page.routeMeta[ArticleInfoType.cover] = frontmatter.cover;\n\n  // resolve isOriginal\n  if (\"isOriginal\" in frontmatter)\n    page.routeMeta[ArticleInfoType.isOriginal] = frontmatter.isOriginal;\n\n  // resolve encrypted\n  if (isEncrypted) page.routeMeta[ArticleInfoType.isEncrypted] = true;\n\n  const excerpt = isEncrypted\n    ? \"\"\n    : frontmatter.excerpt ||\n      page.excerpt ||\n      // special handle auto generated description by seo2 plugin\n      (page.data.autoDesc ? \"\" : frontmatter.description) ||\n      // generate excerpt from content\n      // excerpt is sensitive with markdown contents\n      (injectContentSensitiveData && enableAutoExcerpt\n        ? app.markdown.render(\n            // get page content\n            matter(page.content)\n              .content.trim()\n              // remove first heading1 as title\n              .replace(/^# (.*)$/gm, \"\")\n              // get lines until total length is above 200\n              .split(\"\\n\")\n              .reduce(\n                (excerpt, content) =>\n                  excerpt.length < 200 ? `${excerpt}\\n${content}` : excerpt,\n                \"\"\n              ),\n\n            // markdown env\n            {\n              base: app.options.base,\n              filePath: page.filePath,\n              filePathRelative: page.filePathRelative,\n              frontmatter: { ...page.frontmatter },\n            }\n          )\n        : \"\");\n\n  // save page excerpt to routeMeta\n  if (excerpt) page.routeMeta[ArticleInfoType.excerpt] = excerpt;\n\n  if (\n    // reading time data is sensitive with markdown contents\n    injectContentSensitiveData &&\n    // ensure a valid reading time exists\n    page.data.readingTime &&\n    page.data.readingTime.words !== 0\n  )\n    page.routeMeta[ArticleInfoType.readingTime] = page.data.readingTime;\n};\n"]}