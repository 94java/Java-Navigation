import { App, LocaleData, PageFrontmatter, LocaleConfig, Page } from '@vuepress/core';
import { IncomingMessage } from 'node:http';
import { WebpackChainConfig } from '@vuepress/bundler-webpack';
import { LocaleData as LocaleData$1 } from '@vuepress/shared';
export { default as stripTags } from 'striptags';
import { GitPluginOptions, GitPluginPageData } from '@vuepress/plugin-git';
import { DeflateOptions } from 'fflate';
import { Ora } from 'ora';

declare const tagHint: (tag: string, isDebug?: boolean) => void;
interface CustomElementCommonOptions {
    app: App;
    config: unknown;
}
/**
 * Add tags as customElement
 *
 * @param config VuePress Bundler config
 * @param app VuePress Node App
 * @param customElements tags recognized as custom element
 */
declare const addCustomElement: ({ app, config }: CustomElementCommonOptions, customElement: string[] | string | RegExp) => void;

/**
 * Handle specific path when running VuePress DevServe
 *
 * @param config VuePress Bundler config
 * @param app VuePress Node App
 * @param path Path to be responded
 * @param getResponse respond function
 * @param errMsg error msg
 */
declare const useCustomDevServer: (config: unknown, app: App, path: string, getResponse: (request?: IncomingMessage) => Promise<string | Buffer>, errMsg?: string) => void;

declare const mergeViteConfig: (a: Record<string, any>, b: Record<string, any>, isRoot?: boolean) => Record<string, any>;

interface ViteCommonOptions {
    app: App;
    config: unknown;
}
/**
 * Add modules to Vite `optimizeDeps.include` list
 */
declare const addViteOptimizeDepsInclude: ({ app, config }: ViteCommonOptions, module: string | string[]) => void;
/**
 * Add modules to Vite `optimizeDeps.exclude` list
 */
declare const addViteOptimizeDepsExclude: ({ app, config }: ViteCommonOptions, module: string | string[]) => void;
/**
 * Add modules to Vite `ssr.external` list
 */
declare const addViteSsrExternal: ({ app, config }: ViteCommonOptions, module: string | string[]) => void;
/**
 * Add modules to Vite `ssr.noExternal` list
 */
declare const addViteSsrNoExternal: ({ app, config }: ViteCommonOptions, module: string | string[]) => void;

interface WebpackCommonOptions {
    app: App;
    config: unknown;
}
declare const chainWebpack: ({ app, config }: WebpackCommonOptions, chainWebpack: (config: WebpackChainConfig, isServer: boolean, isBuild: boolean) => void) => void;

/**
 * Composition Api to use `@vuepress/plugin-git`
 *
 * @description Should be invoke on node site
 */
declare const useGitPlugin: (app: App, options: GitPluginOptions | false) => void;
/**
 * Composition Api to remove `@vuepress/plugin-git`
 *
 * @description Should be invoke on node site
 */
declare const removeGitPlugin: (app: App) => void;

/**
 * Shell Logger
 */
declare class Logger {
    /**
     * Plugin name
     */
    private name;
    private currentInstance;
    constructor(
    /**
     * Plugin name
     */
    name?: string);
    /**
     * Create a loading spinner with hint text
     *
     * @param text Loading hint text
     * @returns Ora Instance
     */
    create(text: string): Ora;
    /**
     * Update current loading spinner text
     *
     * @param text new hint text
     */
    update(text: string): void;
    /**
     * Trigger current instance to loading state or create a new loading spinner with hint text
     *
     * @param text Loading hint text
     * @returns Ora Instance
     */
    load(text?: string): Ora;
    /**
     * Trigger current instance to info state or create a new info icon with hint text
     *
     * @param text Loading hint text
     * @returns Ora Instance
     */
    info(text?: string): Ora;
    /**
     * Trigger current instance to success state or create a new success icon with hint text
     *
     * @param text Loading hint text
     * @returns Ora Instance
     */
    succeed(text?: string): Ora;
    /**
     * Trigger current instance to warn state or create a new warn icon with hint text
     *
     * @param text Loading hint text
     * @returns Ora Instance
     */
    warn(text?: string): Ora;
    /**
     * Trigger current instance to warn state or create a new warn icon with hint text
     *
     * @param text Loading hint text
     * @returns Ora Instance
     */
    error(text?: string): Ora;
}

declare const noopModule = "vuepress-shared/noopModule";

declare const lang2PathConfig: {
    "de-AT": string;
    "en-US": string;
    "es-ES": string;
    "fr-FR": string;
    "ja-JP": string;
    "ko-KR": string;
    "pl-PL": string;
    "pt-BR": string;
    "ru-RU": string;
    "sk-SK": string;
    "tr-TR": string;
    "uk-UA": string;
    "vi-VN": string;
    "zh-CN": string;
    "zh-TW": string;
};

/** Types for supported lang codes */
type HopeLang = keyof typeof lang2PathConfig;

type IAnyObject = Record<string, any>;
/** Deep merge objects to the first one */
declare const deepAssign: <T extends IAnyObject, U extends IAnyObject = T, V extends Partial<T> & Partial<U> = T & U>(originObject: T, ...assignObjects: U[]) => V;

interface DateOptions {
    /**
     * @default 'en'
     */
    lang?: string;
    timezone?: string;
    /**
     * @default 'full'
     */
    type?: "date" | "time" | "full";
}
interface DateDetail {
    year?: number | undefined;
    month?: number | undefined;
    day?: number | undefined;
    hour?: number | undefined;
    minute?: number | undefined;
    second?: number | undefined;
}
interface DateInfo {
    value: Date | undefined;
    info: DateDetail;
    type: "date" | "time" | "full";
}
declare const getDate: (date: string | Date | undefined, timezone?: string) => DateInfo | null;
declare const compareDate: (dateA: Date | number | string | undefined, dateB: Date | number | string | undefined) => number;

type AuthorName = string;
interface AuthorInfo {
    /**
     * Author name
     *
     * 作者姓名
     */
    name: string;
    /**
     * Author website
     *
     * 作者网站
     */
    url?: string;
    /**
     * Author email
     *
     * 作者 Email
     */
    email?: string;
}
type Author = AuthorName | AuthorName[] | AuthorInfo | AuthorInfo[];

type ConvertLocaleConfig<T extends LocaleData = LocaleData> = Record<string, T>;

interface BasePageFrontMatter extends PageFrontmatter {
    /**
     * Page icon
     *
     * 页面图标
     */
    icon?: string;
    /**
     * Page Author(s)
     *
     * 页面作者
     */
    author?: Author | false;
    /**
     * Writing Date
     *
     * 写作日期
     */
    date?: Date;
    /**
     * Page Category(ies)
     *
     * 页面分类
     */
    category?: string | string[];
    /**
     * Page Tag(s)
     *
     * 页面标签
     */
    tag?: string[] | string;
    /**
     * Whether the content is original
     *
     * 是否原创
     */
    isOriginal?: boolean;
    /**
     * Whether the page is an article
     *
     * 页面是否是文章
     */
    article?: boolean;
    /**
     * Page Cover
     *
     * 页面封面
     */
    cover?: string;
    /**
     * Page Banner
     *
     * 页面 Banner 图
     */
    banner?: string;
    /**
     * Footer text
     *
     * 页脚文字
     */
    footer?: string | boolean;
    /**
     * Copyright text
     *
     * 版权文字
     */
    copyright?: string | false;
    /**
     * Whether is home page
     *
     * 是否是主页
     */
    home?: boolean;
    /**
     * @deprecated use `date` instead
     */
    time?: Date | string;
    /**
     * @deprecated use `category` instead
     */
    categories?: string[];
    /**
     * @deprecated use `tag` instead
     */
    tags?: string[];
}

interface BaseThemeConfig {
    /**
     * Theme locales config
     *
     * 主题多语言配置
     */
    locales?: Record<string, Record<string, unknown> & {
        lang?: string;
    }>;
}

declare const getAuthor: (author: Author | false | undefined, canDisable?: boolean) => AuthorInfo[];
declare const getCategory: (category: string[] | string | undefined) => string[];
declare const getTag: (tag: string[] | string | undefined) => string[];

/**
 * check if string is a valid url
 */
declare const isUrl: (test: string) => boolean;
declare const isAbsoluteUrl: (test: string) => boolean;

/** Check if the lang is supported */
declare const checkLang: (lang?: string) => boolean;
declare const showLangError: (lang: string, plugin?: string) => void;
/** Get language from path */
declare const path2Lang: (path?: string, debug?: boolean) => HopeLang;
/** Get path from language */
declare const lang2Path: (lang?: string, debug?: boolean) => string;
/**
 * Get language of root directory
 *
 * @param app VuePress Node App
 * @returns root language
 */
declare const getRootLang: (app: App) => string;
/**
 * Get the infer language path from root directory language
 *
 * @param app VuePress Node App
 * @returns infer language
 */
declare const getRootLangPath: (app: App) => string;
declare const getLocalePaths: (app: App) => string[];
interface GetLocalesOptions<T extends LocaleData$1> {
    app: App;
    default: ConvertLocaleConfig<T>;
    config?: LocaleConfig<T> | undefined;
    name?: string;
}
/**
 * Get final locale config to passed to client
 *
 * @param app  VuePress Node App
 * @param defaultLocalesConfig default locale config
 * @param userLocalesConfig user locale config
 * @returns final locale config
 */
declare const getLocales: <T extends LocaleData$1>({ app, name, default: defaultLocalesConfig, config: userLocalesConfig, }: GetLocalesOptions<T>) => ConvertLocaleConfig<T>;

declare const md2text: (content: string) => string;

declare const timeTransformer: (date: string | Date | undefined, options?: DateOptions) => string | null;
declare const injectLocalizedDate: (page: Page<{
    localizedDate?: string | null;
} & Partial<GitPluginPageData>>, timezone?: string) => void;

/**
 * @see https://stackoverflow.com/questions/223652/is-there-a-way-to-escape-a-cdata-end-token-in-xml
 */
declare const encodeCDATA: (content: string) => string;
declare const encodeXML: (content: string) => string;

type PackageManager = "npm" | "yarn" | "pnpm";
/**
 * Check if a global package manager is available
 */
declare const hasGlobalInstallation: (packageManager: PackageManager) => boolean;
declare const getTypeofLockFile: (cwd?: string, deep?: boolean) => PackageManager | null;
declare const detectPackageManager: (cwd?: string, deep?: boolean) => PackageManager;

declare const utoa: (data: string, level?: DeflateOptions["level"]) => string;
declare const atou: (base64: string) => string;

export { Author, AuthorInfo, AuthorName, BasePageFrontMatter, BaseThemeConfig, ConvertLocaleConfig, CustomElementCommonOptions, DateDetail, DateInfo, DateOptions, GetLocalesOptions, HopeLang, Logger, PackageManager, ViteCommonOptions, WebpackCommonOptions, addCustomElement, addViteOptimizeDepsExclude, addViteOptimizeDepsInclude, addViteSsrExternal, addViteSsrNoExternal, atou, chainWebpack, checkLang, compareDate, deepAssign, detectPackageManager, encodeCDATA, encodeXML, getAuthor, getCategory, getDate, getLocalePaths, getLocales, getRootLang, getRootLangPath, getTag, getTypeofLockFile, hasGlobalInstallation, injectLocalizedDate, isAbsoluteUrl, isUrl, lang2Path, md2text, mergeViteConfig, noopModule, path2Lang, removeGitPlugin, showLangError, tagHint, timeTransformer, useCustomDevServer, useGitPlugin, utoa };
