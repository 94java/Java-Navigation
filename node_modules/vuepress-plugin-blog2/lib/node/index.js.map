{"version":3,"file":"index.js","sources":["../../src/node/utils.ts","../../src/node/category.ts","../../src/node/type.ts","../../src/node/plugin.ts"],"sourcesContent":["import { Logger } from \"vuepress-shared/node\";\n\nimport type { App, Page } from \"@vuepress/core\";\nimport type { PageMap } from \"./typings.js\";\n\nexport const logger = new Logger(\"vuepress-plugin-blog2\");\n\nexport const getPageMap = (\n  filter: (page: Page) => boolean,\n  app: App\n): PageMap => {\n  const pageMap: PageMap = {};\n\n  // initialize pageMap\n  Object.keys({\n    // make sure root locale exists\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    \"/\": {},\n    ...app.options.locales,\n  }).forEach((path) => {\n    pageMap[path] = [];\n  });\n\n  app.pages.filter(filter).forEach((page) => {\n    pageMap[page.pathLocale].push(page);\n  });\n\n  return pageMap;\n};\n","import { createPage } from \"@vuepress/core\";\nimport { removeLeadingSlash } from \"@vuepress/shared\";\nimport { logger } from \"./utils.js\";\n\nimport type { App, Page } from \"@vuepress/core\";\nimport type { BlogOptions } from \"./options.js\";\nimport type { PageMap } from \"./typings.js\";\nimport type { CategoryMap } from \"../shared/index.js\";\n\nconst HMR_CODE = `\nif (import.meta.webpackHot) {\n  import.meta.webpackHot.accept();\n  if (__VUE_HMR_RUNTIME__.updateBlogCategory)\n    __VUE_HMR_RUNTIME__.updateBlogCategory(categoryMap);\n}\n\nif (import.meta.hot)\n  import.meta.hot.accept(({ categoryMap }) => {\n    __VUE_HMR_RUNTIME__.updateBlogCategory(categoryMap);\n  });\n\n`;\n\nexport const prepareCategory = (\n  app: App,\n  options: Partial<BlogOptions>,\n  pageMap: PageMap,\n  init = false\n): Promise<string[]> => {\n  const {\n    category = [],\n    slugify = (name: string): string =>\n      name\n        .replace(/[ _]/g, \"-\")\n        .replace(/[:?*|\\\\/<>]/g, \"\")\n        .toLowerCase(),\n  } = options;\n\n  return Promise.all(\n    category.map(\n      async (\n        {\n          key,\n          getter,\n          sorter = (): number => -1,\n          path = \"/:key/\",\n          layout = \"Layout\",\n          frontmatter = (): Record<string, string> => ({}),\n          itemPath = \"/:key/:name/\",\n          itemLayout = \"Layout\",\n          itemFrontmatter = (): Record<string, string> => ({}),\n        },\n        index\n      ) => {\n        if (typeof key !== \"string\" || !key) {\n          logger.error(`Invalid 'key' option ${key} in 'category[${index}]'`);\n\n          return null;\n        }\n\n        if (typeof getter !== \"function\") {\n          logger.error(\n            `Invalid 'getter' option in 'category[${index}]', it should be a function!`\n          );\n\n          return null;\n        }\n\n        if (app.env.isDebug) logger.info(`Generating ${key} category.\\n`);\n\n        const categoryMap: CategoryMap = {};\n        const pageKeys: string[] = [];\n        const getItemPath =\n          typeof itemPath === \"function\"\n            ? itemPath\n            : (name: string): string =>\n                (itemPath || \"\")\n                  .replace(/:key/g, slugify(key))\n                  .replace(/:name/g, slugify(name));\n\n        for (const localePath in pageMap) {\n          if (path) {\n            const pagePath = `${localePath}${removeLeadingSlash(\n              path.replace(/:key/g, slugify(key))\n            )}`;\n\n            const mainPage = await createPage(app, {\n              path: pagePath,\n              frontmatter: {\n                ...frontmatter(localePath),\n                blog: {\n                  type: \"category\",\n                  key,\n                },\n                layout,\n              },\n            });\n\n            const index = app.pages.findIndex(({ path }) => path === pagePath);\n\n            if (index === -1) app.pages.push(mainPage);\n            else if (app.pages[index].key !== mainPage.key) {\n              app.pages.splice(index, 1, mainPage);\n\n              if (init) logger.warn(`Overriding existed path ${pagePath}`);\n            }\n            pageKeys.push(mainPage.key);\n\n            categoryMap[localePath] = {\n              path: mainPage.path,\n              map: {},\n            };\n          } else {\n            categoryMap[localePath] = {\n              path: \"\",\n              map: {},\n            };\n          }\n\n          const { map } = categoryMap[localePath];\n          const pageMapStore: Record<string, Page[]> = {};\n\n          for (const page of pageMap[localePath]) {\n            const categories = getter(page);\n\n            for (const category of categories) {\n              if (!map[category]) {\n                const itemPath = getItemPath(category);\n\n                if (itemPath) {\n                  const pagePath = `${localePath}${removeLeadingSlash(\n                    itemPath\n                  )}`;\n\n                  const page = await createPage(app, {\n                    path: `${localePath}${removeLeadingSlash(itemPath)}`,\n                    frontmatter: {\n                      ...itemFrontmatter(category, localePath),\n                      blog: {\n                        type: \"category\",\n                        name: category,\n                        key,\n                      },\n                      layout: itemLayout,\n                    },\n                  });\n\n                  const index = app.pages.findIndex(\n                    ({ path }) => path === pagePath\n                  );\n\n                  if (index === -1) app.pages.push(page);\n                  else if (app.pages[index].key !== page.key) {\n                    app.pages.splice(index, 1, page);\n\n                    if (init)\n                      logger.warn(`Overriding existed path ${pagePath}`);\n                  }\n\n                  pageKeys.push(page.key);\n\n                  map[category] = {\n                    path: page.path,\n                    keys: [],\n                  };\n                } else {\n                  map[category] = {\n                    path: \"\",\n                    keys: [],\n                  };\n                }\n\n                pageMapStore[category] = [];\n              }\n\n              pageMapStore[category].push(page);\n            }\n          }\n\n          for (const category in pageMapStore)\n            map[category].keys = pageMapStore[category]\n              .sort(sorter)\n              .map(({ key }) => key);\n\n          if (app.env.isDebug) {\n            let infoMessage = `Route ${localePath} in ${key} category:\\n`;\n\n            for (const category in map) {\n              const { path, keys } = map[category];\n\n              infoMessage += `name: ${category}; ${\n                path ? `path: ${path}; ` : \"\"\n              }items: ${keys.length}\\n`;\n            }\n\n            logger.info(infoMessage);\n          }\n        }\n\n        return {\n          key,\n          map: categoryMap,\n          pageKeys,\n        };\n      }\n    )\n  ).then(async (result) => {\n    const finalMap: Record<string, CategoryMap> = {};\n    const keys: string[] = [];\n\n    result\n      .filter(\n        (\n          item\n        ): item is {\n          key: string;\n          map: CategoryMap;\n          pageKeys: string[];\n        } => item !== null\n      )\n      .forEach(({ key, map, pageKeys }) => {\n        finalMap[key] = map;\n        keys.push(...pageKeys);\n      });\n\n    await app.writeTemp(\n      `blog/category.js`,\n      `\\\nexport const categoryMap = ${JSON.stringify(finalMap)};\n${app.env.isDev ? HMR_CODE : \"\"}\n`\n    );\n\n    if (app.env.isDebug) logger.info(\"All categories generated.\");\n\n    return keys;\n  });\n};\n","import { createPage } from \"@vuepress/core\";\nimport { removeLeadingSlash } from \"@vuepress/shared\";\nimport { logger } from \"./utils.js\";\n\nimport type { App } from \"@vuepress/core\";\nimport type { BlogOptions } from \"./options.js\";\nimport type { PageMap } from \"./typings.js\";\nimport type { TypeMap } from \"../shared/index.js\";\n\nconst HMR_CODE = `\nif (import.meta.webpackHot) {\n  import.meta.webpackHot.accept();\n  if (__VUE_HMR_RUNTIME__.updateBlogType)\n    __VUE_HMR_RUNTIME__.updateBlogType(typeMap);\n}\n\nif (import.meta.hot)\n  import.meta.hot.accept(({ typeMap }) => {\n    __VUE_HMR_RUNTIME__.updateBlogType(typeMap);\n  });\n`;\n\nexport const prepareType = (\n  app: App,\n  options: Partial<BlogOptions>,\n  pageMap: PageMap,\n  init = false\n): Promise<string[]> => {\n  const {\n    type = [],\n    slugify = (name: string): string =>\n      name\n        .replace(/[ _]/g, \"-\")\n        .replace(/[:?*|\\\\/<>]/g, \"\")\n        .toLowerCase(),\n  } = options;\n\n  return Promise.all(\n    type.map(\n      async (\n        {\n          key,\n          sorter = (): number => -1,\n          filter = (): boolean => true,\n          path = \"/:key/\",\n          layout = \"Layout\",\n          frontmatter = (): Record<string, string> => ({}),\n        },\n        index\n      ) => {\n        if (typeof key !== \"string\" || !key) {\n          logger.error(`Invalid 'key' option ${key} in 'category[${index}]'`);\n\n          return null;\n        }\n\n        const typeMap: TypeMap = {};\n        const pageKeys: string[] = [];\n\n        if (app.env.isDebug) logger.info(`Generating ${key} type.\\n`);\n\n        for (const localePath in pageMap) {\n          const keys = pageMap[localePath]\n            .filter(filter)\n            .sort(sorter)\n            .map(({ key }) => key);\n\n          if (path) {\n            const pagePath = `${localePath}${removeLeadingSlash(\n              slugify(path.replace(/:key/g, key))\n            )}`;\n\n            const page = await createPage(app, {\n              path: pagePath,\n              frontmatter: {\n                ...frontmatter(localePath),\n                blog: {\n                  type: \"type\",\n                  key,\n                },\n                layout,\n              },\n            });\n\n            const index = app.pages.findIndex(({ path }) => path === pagePath);\n\n            if (index === -1) app.pages.push(page);\n            else if (app.pages[index].key !== page.key) {\n              app.pages.splice(index, 1, page);\n\n              if (init) logger.warn(`Overriding existed path ${pagePath}`);\n            }\n\n            pageKeys.push(page.key);\n\n            typeMap[localePath] = { path: page.path, keys };\n\n            if (app.env.isDebug)\n              logger.info(\n                `Route ${localePath} in ${key} type: path: ${page.path}; items: ${keys.length}\\n`\n              );\n          } else {\n            typeMap[localePath] = { path: \"\", keys };\n\n            if (app.env.isDebug)\n              logger.info(\n                `Route ${localePath} in ${key} type: items: ${keys.length}\\n`\n              );\n          }\n        }\n\n        return {\n          key,\n          map: typeMap,\n          pageKeys,\n        };\n      }\n    )\n  ).then(async (result) => {\n    const finalMap: Record<string, TypeMap> = {};\n    const keys: string[] = [];\n\n    result\n      .filter(\n        (\n          item\n        ): item is {\n          key: string;\n          map: TypeMap;\n          pageKeys: string[];\n        } => item !== null\n      )\n      .forEach(({ key, map, pageKeys }) => {\n        finalMap[key] = map;\n        keys.push(...pageKeys);\n      });\n\n    await app.writeTemp(\n      `blog/type.js`,\n      `\\\nexport const typeMap = ${JSON.stringify(finalMap)};\n${app.env.isDev ? HMR_CODE : \"\"}\n`\n    );\n\n    if (app.env.isDebug) logger.info(\"All types generated.\");\n\n    return keys;\n  });\n};\n","import {\n  preparePageComponent,\n  preparePageData,\n  preparePagesComponents,\n  preparePagesData,\n  preparePagesRoutes,\n} from \"@vuepress/core\";\nimport { watch } from \"chokidar\";\n\nimport { prepareCategory } from \"./category.js\";\nimport { prepareType } from \"./type.js\";\nimport { getPageMap, logger } from \"./utils.js\";\n\nimport type { PluginFunction } from \"@vuepress/core\";\nimport type { BlogOptions } from \"./options.js\";\n\nexport const blogPlugin =\n  (options: BlogOptions): PluginFunction =>\n  (app) => {\n    const {\n      getInfo = (): Record<string, never> => ({}),\n      filter = (page): boolean =>\n        Boolean(page.filePathRelative) && !page.frontmatter[\"home\"],\n      metaScope = \"_blog\",\n    } = options;\n\n    let generatePageKeys: string[] = [];\n\n    if (app.env.isDebug) logger.info(`Options: ${options.toString()}`);\n\n    return {\n      name: \"vuepress-plugin-blog2\",\n\n      define: () => ({\n        BLOG_META_SCOPE: metaScope,\n      }),\n\n      extendsPage: (page): void => {\n        if (filter(page))\n          page.routeMeta = {\n            ...(metaScope === \"\"\n              ? getInfo(page)\n              : { [metaScope]: getInfo(page) }),\n            ...page.routeMeta,\n          };\n      },\n\n      onInitialized: (app): Promise<void> => {\n        const pageMap = getPageMap(filter, app);\n\n        return Promise.all([\n          prepareCategory(app, options, pageMap, true).then((pageKeys) => {\n            generatePageKeys.push(...pageKeys);\n          }),\n          prepareType(app, options, pageMap, true).then((pageKeys) => {\n            generatePageKeys.push(...pageKeys);\n          }),\n        ]).then(() => {\n          if (app.env.isDebug) logger.info(\"temp file generated\");\n        });\n      },\n\n      onWatched: (app, watchers): void => {\n        const hotReload =\n          \"hotReload\" in options ? options.hotReload : app.env.isDebug;\n\n        if (hotReload) {\n          const pageDataWatcher = watch(\"pages/**/*.js\", {\n            cwd: app.dir.temp(),\n            ignoreInitial: true,\n          });\n\n          const updateBlog = (): Promise<void> => {\n            const newGeneratedPageKeys: string[] = [];\n\n            const pageMap = getPageMap(filter, app);\n\n            return Promise.all([\n              prepareCategory(app, options, pageMap).then((pageKeys) => {\n                newGeneratedPageKeys.push(...pageKeys);\n              }),\n              prepareType(app, options, pageMap).then((pageKeys) => {\n                newGeneratedPageKeys.push(...pageKeys);\n              }),\n            ]).then(async () => {\n              const pagesToBeRemoved = generatePageKeys.filter(\n                (key) => !newGeneratedPageKeys.includes(key)\n              );\n              const pagesToBeAdded = newGeneratedPageKeys.filter(\n                (key) => !generatePageKeys.includes(key)\n              );\n\n              if (pagesToBeAdded.length) {\n                if (app.env.isDebug)\n                  logger.info(\n                    `New pages detected: ${pagesToBeAdded.toString()}`\n                  );\n\n                // prepare page files\n                await Promise.all(\n                  pagesToBeAdded.map(async (pageKey) => {\n                    await preparePageComponent(\n                      app,\n                      app.pages.find(({ key }) => key === pageKey)!\n                    );\n                    await preparePageData(\n                      app,\n                      app.pages.find(({ key }) => key === pageKey)!\n                    );\n                  })\n                );\n              }\n\n              // remove pages\n              if (pagesToBeRemoved.length) {\n                if (app.env.isDebug)\n                  logger.info(\n                    `Removing following pages: ${pagesToBeRemoved.toString()}`\n                  );\n\n                pagesToBeRemoved.forEach((pageKey) => {\n                  app.pages.splice(\n                    app.pages.findIndex(({ key }) => key === pageKey),\n                    1\n                  );\n                });\n              }\n\n              // prepare pages entry\n              if (pagesToBeRemoved.length || pagesToBeAdded.length) {\n                await preparePagesComponents(app);\n                await preparePagesData(app);\n                await preparePagesRoutes(app);\n              }\n\n              generatePageKeys = newGeneratedPageKeys;\n\n              if (app.env.isDebug) logger.info(\"temp file updated\");\n            });\n          };\n\n          pageDataWatcher.on(\"add\", () => {\n            void updateBlog();\n          });\n          pageDataWatcher.on(\"change\", () => {\n            void updateBlog();\n          });\n          pageDataWatcher.on(\"unlink\", () => {\n            void updateBlog();\n          });\n\n          watchers.push(pageDataWatcher);\n        }\n      },\n    };\n  };\n"],"names":["logger","Logger","getPageMap","filter","app","pageMap","path","page","HMR_CODE","prepareCategory","options","init","category","slugify","name","key","getter","sorter","layout","frontmatter","itemPath","itemLayout","itemFrontmatter","index","categoryMap","pageKeys","getItemPath","localePath","pagePath","removeLeadingSlash","mainPage","createPage","map","pageMapStore","categories","infoMessage","keys","result","finalMap","item","prepareType","type","typeMap","blogPlugin","getInfo","metaScope","generatePageKeys","watchers","pageDataWatcher","watch","updateBlog","newGeneratedPageKeys","pagesToBeRemoved","pagesToBeAdded","pageKey","preparePageComponent","preparePageData","preparePagesComponents","preparePagesData","preparePagesRoutes"],"mappings":"0SAKa,MAAAA,EAAS,IAAIC,EAAO,uBAAuB,EAE3CC,EAAa,CACxBC,EACAC,IACY,CACZ,MAAMC,EAAmB,CAGzB,EAAA,OAAA,OAAO,KAAK,CAGV,IAAK,CAAA,EACL,GAAGD,EAAI,QAAQ,OACjB,CAAC,EAAE,QAASE,GAAS,CACnBD,EAAQC,GAAQ,CAClB,CAAA,CAAC,EAEDF,EAAI,MAAM,OAAOD,CAAM,EAAE,QAASI,GAAS,CACzCF,EAAQE,EAAK,YAAY,KAAKA,CAAI,CACpC,CAAC,EAEMF,CACT,ECnBMG,EAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcJC,EAAkB,CAC7BL,EACAM,EACAL,EACAM,EAAO,KACe,CACtB,KAAM,CACJ,SAAAC,EAAW,GACX,QAAAC,EAAWC,GACTA,EACG,QAAQ,QAAS,GAAG,EACpB,QAAQ,eAAgB,EAAE,EAC1B,aACP,EAAIJ,EAEJ,OAAO,QAAQ,IACbE,EAAS,IACP,MACE,CACE,IAAAG,EACA,OAAAC,EACA,OAAAC,EAAS,IAAc,GACvB,KAAAX,EAAO,SACP,OAAAY,EAAS,SACT,YAAAC,EAAc,KAA+B,IAC7C,SAAAC,EAAW,eACX,WAAAC,EAAa,SACb,gBAAAC,EAAkB,KAA+B,CAAA,EACnD,EACAC,IACG,CACH,GAAI,OAAOR,GAAQ,UAAY,CAACA,EAC9B,OAAAf,EAAO,MAAM,wBAAwBe,kBAAoBQ,KAAS,EAE3D,KAGT,GAAI,OAAOP,GAAW,WACpB,OAAAhB,EAAO,MACL,wCAAwCuB,+BAC1C,EAEO,KAGLnB,EAAI,IAAI,SAASJ,EAAO,KAAK,cAAce;AAAAA,CAAiB,EAEhE,MAAMS,EAA2B,CAAA,EAC3BC,EAAqB,CAAA,EACrBC,EACJ,OAAON,GAAa,WAChBA,EACCN,IACEM,GAAY,IACV,QAAQ,QAASP,EAAQE,CAAG,CAAC,EAC7B,QAAQ,SAAUF,EAAQC,CAAI,CAAC,EAE1C,UAAWa,KAActB,EAAS,CAChC,GAAIC,EAAM,CACR,MAAMsB,EAAW,GAAGD,IAAaE,EAC/BvB,EAAK,QAAQ,QAASO,EAAQE,CAAG,CAAC,CACpC,IAEMe,EAAW,MAAMC,EAAW3B,EAAK,CACrC,KAAMwB,EACN,YAAa,CACX,GAAGT,EAAYQ,CAAU,EACzB,KAAM,CACJ,KAAM,WACN,IAAAZ,CACF,EACA,OAAAG,CACF,CACF,CAAC,EAEKK,EAAQnB,EAAI,MAAM,UAAU,CAAC,CAAE,KAAAE,CAAK,IAAMA,IAASsB,CAAQ,EAE7DL,IAAU,GAAInB,EAAI,MAAM,KAAK0B,CAAQ,EAChC1B,EAAI,MAAMmB,GAAO,MAAQO,EAAS,MACzC1B,EAAI,MAAM,OAAOmB,EAAO,EAAGO,CAAQ,EAE/BnB,GAAMX,EAAO,KAAK,2BAA2B4B,GAAU,GAE7DH,EAAS,KAAKK,EAAS,GAAG,EAE1BN,EAAYG,GAAc,CACxB,KAAMG,EAAS,KACf,IAAK,CACP,CAAA,CACF,MACEN,EAAYG,GAAc,CACxB,KAAM,GACN,IAAK,CACP,CAAA,EAGF,KAAM,CAAE,IAAAK,CAAI,EAAIR,EAAYG,GACtBM,EAAuC,CAAA,EAE7C,UAAW1B,KAAQF,EAAQsB,GAAa,CACtC,MAAMO,EAAalB,EAAOT,CAAI,EAE9B,UAAWK,KAAYsB,EAAY,CACjC,GAAI,CAACF,EAAIpB,GAAW,CAClB,MAAMQ,EAAWM,EAAYd,CAAQ,EAErC,GAAIQ,EAAU,CACZ,MAAMQ,EAAW,GAAGD,IAAaE,EAC/BT,CACF,IAEMb,EAAO,MAAMwB,EAAW3B,EAAK,CACjC,KAAM,GAAGuB,IAAaE,EAAmBT,CAAQ,IACjD,YAAa,CACX,GAAGE,EAAgBV,EAAUe,CAAU,EACvC,KAAM,CACJ,KAAM,WACN,KAAMf,EACN,IAAAG,CACF,EACA,OAAQM,CACV,CACF,CAAC,EAEKE,EAAQnB,EAAI,MAAM,UACtB,CAAC,CAAE,KAAAE,CAAK,IAAMA,IAASsB,CACzB,EAEIL,IAAU,GAAInB,EAAI,MAAM,KAAKG,CAAI,EAC5BH,EAAI,MAAMmB,GAAO,MAAQhB,EAAK,MACrCH,EAAI,MAAM,OAAOmB,EAAO,EAAGhB,CAAI,EAE3BI,GACFX,EAAO,KAAK,2BAA2B4B,GAAU,GAGrDH,EAAS,KAAKlB,EAAK,GAAG,EAEtByB,EAAIpB,GAAY,CACd,KAAML,EAAK,KACX,KAAM,CAAA,CACR,CACF,MACEyB,EAAIpB,GAAY,CACd,KAAM,GACN,KAAM,CAAA,CACR,EAGFqB,EAAarB,GAAY,CAC3B,CAAA,CAEAqB,EAAarB,GAAU,KAAKL,CAAI,CAClC,CACF,CAEA,UAAWK,KAAYqB,EACrBD,EAAIpB,GAAU,KAAOqB,EAAarB,GAC/B,KAAKK,CAAM,EACX,IAAI,CAAC,CAAE,IAAAF,CAAI,IAAMA,CAAG,EAEzB,GAAIX,EAAI,IAAI,QAAS,CACnB,IAAI+B,EAAc,SAASR,QAAiBZ;AAAAA,EAE5C,UAAWH,KAAYoB,EAAK,CAC1B,KAAM,CAAE,KAAA1B,EAAM,KAAA8B,CAAK,EAAIJ,EAAIpB,GAE3BuB,GAAe,SAASvB,MACtBN,EAAO,SAASA,MAAW,YACnB8B,EAAK;AAAA,CACjB,CAEApC,EAAO,KAAKmC,CAAW,CACzB,CACF,CAEA,MAAO,CACL,IAAApB,EACA,IAAKS,EACL,SAAAC,CACF,CACF,CACF,CACF,EAAE,KAAK,MAAOY,GAAW,CACvB,MAAMC,EAAwC,CAAC,EACzCF,EAAiB,CAAA,EAEvB,OAAAC,EACG,OAEGE,GAKGA,IAAS,IAChB,EACC,QAAQ,CAAC,CAAE,IAAAxB,EAAK,IAAAiB,EAAK,SAAAP,CAAS,IAAM,CACnCa,EAASvB,GAAOiB,EAChBI,EAAK,KAAK,GAAGX,CAAQ,CACvB,CAAC,EAEH,MAAMrB,EAAI,UACR,mBACA,8BACuB,KAAK,UAAUkC,CAAQ;AAAA,EAClDlC,EAAI,IAAI,MAAQI,EAAW;AAAA,CAEzB,EAEIJ,EAAI,IAAI,SAASJ,EAAO,KAAK,2BAA2B,EAErDoC,CACT,CAAC,CACH,ECpOM5B,EAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaJgC,EAAc,CACzBpC,EACAM,EACAL,EACAM,EAAO,KACe,CACtB,KAAM,CACJ,KAAA8B,EAAO,CAAC,EACR,QAAA5B,EAAWC,GACTA,EACG,QAAQ,QAAS,GAAG,EACpB,QAAQ,eAAgB,EAAE,EAC1B,YAAY,CACnB,EAAIJ,EAEJ,OAAO,QAAQ,IACb+B,EAAK,IACH,MACE,CACE,IAAA1B,EACA,OAAAE,EAAS,IAAc,GACvB,OAAAd,EAAS,IAAe,GACxB,KAAAG,EAAO,SACP,OAAAY,EAAS,SACT,YAAAC,EAAc,KAA+B,CAAA,EAC/C,EACAI,IACG,CACH,GAAI,OAAOR,GAAQ,UAAY,CAACA,EAC9B,OAAAf,EAAO,MAAM,wBAAwBe,kBAAoBQ,KAAS,EAE3D,KAGT,MAAMmB,EAAmB,CAAA,EACnBjB,EAAqB,CAEvBrB,EAAAA,EAAI,IAAI,SAASJ,EAAO,KAAK,cAAce;AAAAA,CAAa,EAE5D,UAAWY,KAActB,EAAS,CAChC,MAAM+B,EAAO/B,EAAQsB,GAClB,OAAOxB,CAAM,EACb,KAAKc,CAAM,EACX,IAAI,CAAC,CAAE,IAAAF,CAAI,IAAMA,CAAG,EAEvB,GAAIT,EAAM,CACR,MAAMsB,EAAW,GAAGD,IAAaE,EAC/BhB,EAAQP,EAAK,QAAQ,QAASS,CAAG,CAAC,CACpC,IAEMR,EAAO,MAAMwB,EAAW3B,EAAK,CACjC,KAAMwB,EACN,YAAa,CACX,GAAGT,EAAYQ,CAAU,EACzB,KAAM,CACJ,KAAM,OACN,IAAAZ,CACF,EACA,OAAAG,CACF,CACF,CAAC,EAEKK,EAAQnB,EAAI,MAAM,UAAU,CAAC,CAAE,KAAAE,CAAK,IAAMA,IAASsB,CAAQ,EAE7DL,IAAU,GAAInB,EAAI,MAAM,KAAKG,CAAI,EAC5BH,EAAI,MAAMmB,GAAO,MAAQhB,EAAK,MACrCH,EAAI,MAAM,OAAOmB,EAAO,EAAGhB,CAAI,EAE3BI,GAAMX,EAAO,KAAK,2BAA2B4B,GAAU,GAG7DH,EAAS,KAAKlB,EAAK,GAAG,EAEtBmC,EAAQf,GAAc,CAAE,KAAMpB,EAAK,KAAM,KAAA6B,CAAK,EAE1ChC,EAAI,IAAI,SACVJ,EAAO,KACL,SAAS2B,QAAiBZ,iBAAmBR,EAAK,gBAAgB6B,EAAK;AAAA,CACzE,CACJ,MACEM,EAAQf,GAAc,CAAE,KAAM,GAAI,KAAAS,CAAK,EAEnChC,EAAI,IAAI,SACVJ,EAAO,KACL,SAAS2B,QAAiBZ,kBAAoBqB,EAAK;AAAA,CACrD,CAEN,CAEA,MAAO,CACL,IAAArB,EACA,IAAK2B,EACL,SAAAjB,CACF,CACF,CACF,CACF,EAAE,KAAK,MAAOY,GAAW,CACvB,MAAMC,EAAoC,GACpCF,EAAiB,CAAA,EAEvB,OAAAC,EACG,OAEGE,GAKGA,IAAS,IAChB,EACC,QAAQ,CAAC,CAAE,IAAAxB,EAAK,IAAAiB,EAAK,SAAAP,CAAS,IAAM,CACnCa,EAASvB,GAAOiB,EAChBI,EAAK,KAAK,GAAGX,CAAQ,CACvB,CAAC,EAEH,MAAMrB,EAAI,UACR,eACA,0BACmB,KAAK,UAAUkC,CAAQ;AAAA,EAC9ClC,EAAI,IAAI,MAAQI,EAAW;AAAA,CAEzB,EAEIJ,EAAI,IAAI,SAASJ,EAAO,KAAK,sBAAsB,EAEhDoC,CACT,CAAC,CACH,ECrIaO,EACVjC,GACAN,GAAQ,CACP,KAAM,CACJ,QAAAwC,EAAU,KAA8B,CAAA,GACxC,OAAAzC,EAAUI,GACR,QAAQA,EAAK,gBAAgB,GAAK,CAACA,EAAK,YAAY,KACtD,UAAAsC,EAAY,OACd,EAAInC,EAEJ,IAAIoC,EAA6B,CAAA,EAEjC,OAAI1C,EAAI,IAAI,SAASJ,EAAO,KAAK,YAAYU,EAAQ,SAAY,GAAA,EAE1D,CACL,KAAM,wBAEN,OAAQ,KAAO,CACb,gBAAiBmC,CACnB,GAEA,YAActC,GAAe,CACvBJ,EAAOI,CAAI,IACbA,EAAK,UAAY,CACf,GAAIsC,IAAc,GACdD,EAAQrC,CAAI,EACZ,CAAE,CAACsC,GAAYD,EAAQrC,CAAI,CAAE,EACjC,GAAGA,EAAK,SACV,EACJ,EAEA,cAAgBH,GAAuB,CACrC,MAAMC,EAAUH,EAAWC,EAAQC,CAAG,EAEtC,OAAO,QAAQ,IAAI,CACjBK,EAAgBL,EAAKM,EAASL,EAAS,EAAI,EAAE,KAAMoB,GAAa,CAC9DqB,EAAiB,KAAK,GAAGrB,CAAQ,CACnC,CAAC,EACDe,EAAYpC,EAAKM,EAASL,EAAS,EAAI,EAAE,KAAMoB,GAAa,CAC1DqB,EAAiB,KAAK,GAAGrB,CAAQ,CACnC,CAAC,CACH,CAAC,EAAE,KAAK,IAAM,CACRrB,EAAI,IAAI,SAASJ,EAAO,KAAK,qBAAqB,CACxD,CAAC,CACH,EAEA,UAAW,CAACI,EAAK2C,IAAmB,CAIlC,GAFE,cAAerC,EAAUA,EAAQ,UAAYN,EAAI,IAAI,QAExC,CACb,MAAM4C,EAAkBC,EAAM,gBAAiB,CAC7C,IAAK7C,EAAI,IAAI,KAAK,EAClB,cAAe,EACjB,CAAC,EAEK8C,EAAa,IAAqB,CACtC,MAAMC,EAAiC,CAEjC9C,EAAAA,EAAUH,EAAWC,EAAQC,CAAG,EAEtC,OAAO,QAAQ,IAAI,CACjBK,EAAgBL,EAAKM,EAASL,CAAO,EAAE,KAAMoB,GAAa,CACxD0B,EAAqB,KAAK,GAAG1B,CAAQ,CACvC,CAAC,EACDe,EAAYpC,EAAKM,EAASL,CAAO,EAAE,KAAMoB,GAAa,CACpD0B,EAAqB,KAAK,GAAG1B,CAAQ,CACvC,CAAC,CACH,CAAC,EAAE,KAAK,SAAY,CAClB,MAAM2B,EAAmBN,EAAiB,OACvC/B,GAAQ,CAACoC,EAAqB,SAASpC,CAAG,CAC7C,EACMsC,EAAiBF,EAAqB,OACzCpC,GAAQ,CAAC+B,EAAiB,SAAS/B,CAAG,CACzC,EAEIsC,EAAe,SACbjD,EAAI,IAAI,SACVJ,EAAO,KACL,uBAAuBqD,EAAe,SAAS,GACjD,EAGF,MAAM,QAAQ,IACZA,EAAe,IAAI,MAAOC,GAAY,CACpC,MAAMC,EACJnD,EACAA,EAAI,MAAM,KAAK,CAAC,CAAE,IAAAW,CAAI,IAAMA,IAAQuC,CAAO,CAC7C,EACA,MAAME,EACJpD,EACAA,EAAI,MAAM,KAAK,CAAC,CAAE,IAAAW,CAAI,IAAMA,IAAQuC,CAAO,CAC7C,CACF,CAAC,CACH,GAIEF,EAAiB,SACfhD,EAAI,IAAI,SACVJ,EAAO,KACL,6BAA6BoD,EAAiB,SAAS,GACzD,EAEFA,EAAiB,QAASE,GAAY,CACpClD,EAAI,MAAM,OACRA,EAAI,MAAM,UAAU,CAAC,CAAE,IAAAW,CAAI,IAAMA,IAAQuC,CAAO,EAChD,CACF,CACF,CAAC,IAICF,EAAiB,QAAUC,EAAe,UAC5C,MAAMI,EAAuBrD,CAAG,EAChC,MAAMsD,EAAiBtD,CAAG,EAC1B,MAAMuD,EAAmBvD,CAAG,GAG9B0C,EAAmBK,EAEf/C,EAAI,IAAI,SAASJ,EAAO,KAAK,mBAAmB,CACtD,CAAC,CACH,EAEAgD,EAAgB,GAAG,MAAO,IAAM,CACzBE,EACP,CAAA,CAAC,EACDF,EAAgB,GAAG,SAAU,IAAM,CAC5BE,EACP,CAAA,CAAC,EACDF,EAAgB,GAAG,SAAU,IAAM,CAC5BE,EAAAA,CACP,CAAC,EAEDH,EAAS,KAAKC,CAAe,CAC/B,CACF,CACF,CACF"}