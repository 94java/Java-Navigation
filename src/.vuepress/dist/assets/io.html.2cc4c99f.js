import{_ as l}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as i,c as u,a as n,d as s,w as p,b as a,e,r as o}from"./app.ff70f562.js";const k={},r=e('<h1 id="io" tabindex="-1"><a class="header-anchor" href="#io" aria-hidden="true">#</a> IO</h1><ul><li><p>I表示input，是数据从硬盘进内存的过程，称之为读</p><p>O表示output，是数据从内存到硬盘的过程，称之为写</p></li><li><p>IO的数据传输，可以看作是一种数据的流动，按照流动的方向，以内存为参照物，进行读写操作</p></li></ul><p>简单来说：<em>内存在读，内存在写</em></p><ul><li><p>按流向分：输入流、输出流</p></li><li><p>按数据类型分：字节流、字符流</p><p>字节流：操作所有类型的文件（包括音频、视频、图片等）</p><p>字符流：只能操作纯文本文件（包括Java文件、txt文件等）</p><p>一般来说，我们说的IO流的分类是按照<em>数据类型</em>来分的</p></li></ul><blockquote><p>纯文本文件：用windows自带的记事本打开能读得懂的文件</p></blockquote><p><img src="http://images.hellocode.top/b6d5fba9b07c454ea68fbb0d98cdb23b.png" alt="img" loading="lazy"></p>',6),d={class:"table-of-contents"},m=e(`<h2 id="一、file" tabindex="-1"><a class="header-anchor" href="#一、file" aria-hidden="true">#</a> 一、File</h2><p>用处</p><ol><li><p>在读写数据时告诉虚拟机要操作的文件/文件夹在哪</p></li><li><p>对文件/文件夹本身进行操作，包括创建、删除等</p></li></ol><p>File:是文件和目录路径名的抽象表示</p><ul><li><p>表示系统中的文件或者文件夹的路径</p></li><li><p>文件和目录可以通过File封装成对象</p></li><li><p>File封装的对象仅仅是一个路径名。它可以是存在的，也可以是不存在的</p></li><li><p>File类只能对文件本身进行操作，不能读写文件里面存储的数据</p></li></ul><h3 id="_1、构造方法" tabindex="-1"><a class="header-anchor" href="#_1、构造方法" aria-hidden="true">#</a> 1、构造方法</h3><table><thead><tr><th style="text-align:center;">方法名</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">File(String pathname)</td><td style="text-align:center;">通过将给定的路径名字符串转换为抽象路径名来创建新的File实例</td></tr><tr><td style="text-align:center;">File(String parent, String child)</td><td style="text-align:center;">从父路径名字符串和子路径名字符串创建新的File实例（路径拼接）</td></tr><tr><td style="text-align:center;">File(File parent, String child)</td><td style="text-align:center;">从父抽象路径名和子路径名字符串创建新的File实例（路径拼接）</td></tr></tbody></table><blockquote><p>Q：为什么要把字符串表示形式的路径变为File对象？</p><p>A：就是为了使用File类里面的方法</p></blockquote><p><strong>绝对路径和相对路径</strong></p><ul><li>绝对路径：从盘符开始（完整的路径）</li><li>相对路径：相对当前项目下的路径</li></ul><h3 id="_2、常用操作" tabindex="-1"><a class="header-anchor" href="#_2、常用操作" aria-hidden="true">#</a> 2、常用操作</h3><p><strong>创建功能</strong></p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public boolean createNewFile()</td><td>创建一个新的空的文件</td></tr><tr><td>public boolean mkdir()</td><td>创建一个单级文件夹（了解）</td></tr><tr><td>public boolean mkdirs()</td><td>创建一个多级文件夹</td></tr></tbody></table><ul><li><p>createNewFile：只能创建文件</p><p>如果文件存在，创建失败，返回false</p><p>如果文件不存在，创建文件，返回true，要求文件所在文件夹必须存在</p></li><li><p>mkdir：只能创建单级文件夹【了解即可】</p></li><li><p>mkdirs：可以创建单级文件夹，也可以创建多级文件夹</p></li></ul><p><strong>删除功能</strong></p><p><code>public boolean delete()</code>：删除由此抽象路径名表示的文件或目录</p><ul><li>删除后不进回收站，不能恢复</li><li>可以删除文件，也可以删除文件夹</li><li>如果删除的是文件，直接删除。如果删除的是文件夹，只能删除空文件夹</li></ul><p><strong>判断和获取功能</strong></p><table><thead><tr><th style="text-align:center;">方法名</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">public boolean isDirectory()</td><td style="text-align:center;">测试此抽象路径名表示的File是否为目录</td></tr><tr><td style="text-align:center;">public boolean isFile()</td><td style="text-align:center;">测试此抽象路径名表示的File是否为文件</td></tr><tr><td style="text-align:center;">public boolean exists()</td><td style="text-align:center;">测试此抽象路径名表示的File是否存在</td></tr><tr><td style="text-align:center;">public String getName()</td><td style="text-align:center;">返回由此抽象路径名表示的文件或目录的名称</td></tr></tbody></table><blockquote><p>getName方法：如果调用者是文件，那么获取的是文件名和后缀名；如果调用者是文件夹，那么获取的是文件夹的名字</p></blockquote><p><strong>高级获取功能</strong></p><p><code>public File[] listFiles()</code>：返回此抽象路径名表示的目录中的文件和目录的File对象数组</p><ul><li>进入文件夹，获取这个文件夹里面所有的文件和文件夹的File对象，并把这些File对象都放在一个数组中返回</li><li>包括隐藏文件和隐藏文件夹，都可以获取出来</li></ul><blockquote><p>当调用者是一个文件或不存在时，会返回一个null</p><p>当调用者是一个空文件夹时，会返回一个长度为0的数组</p><p>当调用者是一个有权限才能进入的文件夹时，会返回一个null</p></blockquote><h3 id="_3、练习" tabindex="-1"><a class="header-anchor" href="#_3、练习" aria-hidden="true">#</a> 3、练习</h3><p>练习一：在当前模块下的aaa文件夹中创建一个a.txt文件</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">{</span>
        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;File\\\\aaa&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>		<span class="token comment">// 如果文件夹不存在，创建文件夹</span>
            file<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">File</span> newFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token string">&quot;a.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        newFile<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">// 要保证文件所在的文件夹必须存在</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>练习二：删除一个多级文件夹</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo2</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">File</span> src <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;C:\\\\Users\\\\lihao\\\\Desktop\\\\cs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">deleteDir</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">deleteDir</span><span class="token punctuation">(</span><span class="token class-name">File</span> src<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 递归思路</span>
        <span class="token comment">// 套路：</span>
        <span class="token comment">// 1.进入----得到src文件夹里面所有内容的File对象</span>
        <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> src<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 2.遍历----得到src文件夹里面每一个文件和文件夹的File对象</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">File</span> file<span class="token operator">:</span>files<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">// 3.判断----如果遍历到的File对象是一个文件就直接删除</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                file<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>		<span class="token comment">// 4.判断----如果遍历到的File对象是一个文件夹,递归</span>
                <span class="token function">deleteDir</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span> 			<span class="token comment">// 参数一定要是src文件夹里面的文件夹File对象</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        src<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>练习三：统计一个文件夹中每种文件的个数并打印</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo3</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">file</span><span class="token punctuation">(</span><span class="token string">&quot;File&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> hm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">getCount</span><span class="token punctuation">(</span>hm<span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> hm<span class="token punctuation">,</span> <span class="token class-name">File</span> file<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">File</span> f<span class="token operator">:</span>files<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token class-name">String</span> fileName <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fileNameArr <span class="token operator">=</span> fileName<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>fileNameArr<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token class-name">String</span> fileEndName <span class="token operator">=</span> fileNameArr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span>hm<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>fileEndName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                        <span class="token comment">// 已经存在</span>
                        <span class="token comment">// 将已经出现的次数获取出来</span>
                        <span class="token class-name">Integer</span> count <span class="token operator">=</span> hm<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>fileEndName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token comment">// 该文件再次出现</span>
                        count<span class="token operator">++</span><span class="token punctuation">;</span>
                        hm<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>fileEndName<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                        <span class="token comment">// 不存在</span>
                        <span class="token comment">// 当前文件是第一次出现</span>
                        hm<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>fileEndName<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                <span class="token function">getCount</span><span class="token punctuation">(</span>hm<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、字节流" tabindex="-1"><a class="header-anchor" href="#二、字节流" aria-hidden="true">#</a> 二、字节流</h2><h3 id="_1、字节流写数据" tabindex="-1"><a class="header-anchor" href="#_1、字节流写数据" aria-hidden="true">#</a> 1、字节流写数据</h3><blockquote><p>FileOutputStream：操作本地文件的字节输出流，可以把程序中的数据写出到本地文件中</p></blockquote><p><strong>步骤</strong></p><ul><li>创建字节输出流对象(<code>FileOutputStream fos = new FileOutputStream(&quot;指定文件的路径&quot;) </code>) <ul><li>参数是字符串表示的路径或者File对象都是可以的</li><li>如果文件不存在，会创建一个新的文件，但是要保证父级路径是存在的</li><li>如果文件已经存在，会清空文件</li></ul></li><li>写数据(<code>fos.write(数据)</code>) <ul><li>给write方法传递一个整数时，写入的数据是这个整数在ASCII码表中对应的字符</li></ul></li><li>释放资源(<code>fos.close();</code>) <ul><li>释放资源指令，表示告诉操作系统，已经不再使用这个文件了。每次使用完流必须要释放资源</li></ul></li></ul><p><strong>字节流写数据的3种方式</strong></p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>void write(int b)</td><td>一次写一个数据</td></tr><tr><td>void write(byte[] b)</td><td>一次写一个字节数组数据</td></tr><tr><td>void write(byte[] b, int off, int len)</td><td>一次写一个字节数组的部分数据(参数：数组、起始索引、个数)</td></tr></tbody></table><p><strong>两个小问题</strong></p><p><em>字节流写完数据如何实现换行</em></p><ul><li>写完数据后，加换行符</li><li>Windows：<code>\\r\\n</code>（回车换行）</li><li>Linux：<code>\\n</code></li><li>Mac：<code>\\r</code></li></ul><blockquote><p>在windows操作系统中，Java对回车换行进行了优化，虽然完整的是<code>\\r\\n</code>，但是当我们写其中一个<code>\\r</code>或者<code>\\n</code>，Java也可以实现换行，因为Java在底层会补全。建议不要省略</p></blockquote><p><em>字节流写数据如何实现追加写入呢(保留原数据)？</em></p><ul><li><p>在<code>public FileOutputStream(String name, boolean append)</code></p></li><li><p>true表示续写开关，保留原数据；默认为false</p></li></ul><h3 id="_2、字节流读数据" tabindex="-1"><a class="header-anchor" href="#_2、字节流读数据" aria-hidden="true">#</a> 2、字节流读数据</h3><blockquote><p>FileInputStream：操作本地文件的字节输入流，可以把本地文件中的数据读取到程序中来</p></blockquote><p><strong>步骤</strong></p><ul><li><p>创建字节输入流对象(<code>FileInputStream fis = new FileInputStream(&quot;a.txt&quot;);</code>)</p><ul><li>如果文件存在，不会报错；如果文件不存在，那么直接报错</li></ul></li><li><p>读数据(<code>int read = fis.read();</code>)</p><ul><li><p>一次读取一个字节，返回值就是本次读到的那个字节数据，也就是字符在码表中对应的那个数字</p></li><li><p>如果想要看到的是字符数据，一定要强转成char</p></li><li><p>读到文件末尾了，read方法会返回-1</p></li></ul></li><li><p>释放资源(<code>fis.close();</code>)</p><ul><li>每次使用完流必须要释放资源</li></ul></li></ul><p><strong>读取多个字节数据</strong></p><blockquote><p>当读取到文件结束时，会返回-1</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> b<span class="token punctuation">;</span>
<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、复制文件案例" tabindex="-1"><a class="header-anchor" href="#_3、复制文件案例" aria-hidden="true">#</a> 3、复制文件案例</h3><p>需求：把<code>E:\\\\\\study\\\\\\a.txt</code> 复制到当前模块下</p><blockquote><p>复制文件，其实就是把文件中的内容从一个文件中读取出来(<em>数据源</em>)，然后写入到另一个文件中(<em>目的地</em>)</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileNotFoundException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileOutputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo2</span> <span class="token punctuation">{</span>

	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
		<span class="token comment">// TODO Auto-generated method stub</span>
		<span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;E:\\\\study\\\\test.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;test.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">int</span> b<span class="token punctuation">;</span>
		<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
			fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>释放资源的先后顺序小技巧：先开启的后释放</p></blockquote><h3 id="_4、定义小数组拷贝" tabindex="-1"><a class="header-anchor" href="#_4、定义小数组拷贝" aria-hidden="true">#</a> 4、定义小数组拷贝</h3><ul><li><p>如果操作的文件过大，那么速度就会很慢</p></li><li><p>为了解决速度问题，字节流通过创建字节数组，可以一次读写多个数据</p></li></ul><p>一次读一个字节数组的方法</p><ul><li><code>public int read(byte[] buffer)</code>：从输入流读取最多b.length个字节的数据</li><li>一次读取一个字节数组的数据，每次读取会尽可能把数组装满</li><li>字节数组的长度一般是1024的整数倍，例如5M：<code>1024*1024*5</code></li><li>返回值是读入缓冲区的总字节数，也就是本次实际的读取字节个数，并且会把读取到的数据放入定义的字节数组中</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileNotFoundException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileOutputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo3</span> <span class="token punctuation">{</span>

	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
		<span class="token comment">// TODO Auto-generated method stub</span>
		<span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;a.test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;E:\\\\study\\\\test.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">int</span> len<span class="token punctuation">;</span>		<span class="token comment">// 本次读取到的有效字节个数-----这次读了几个字节</span>
		<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
			fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5、io流中不同jdk版本捕获异常的方式" tabindex="-1"><a class="header-anchor" href="#_5、io流中不同jdk版本捕获异常的方式" aria-hidden="true">#</a> 5、IO流中不同JDK版本捕获异常的方式</h3><p><strong>基本做法</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">try</span><span class="token punctuation">{</span>
    可能出现异常的代码<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类名 变量名<span class="token punctuation">)</span><span class="token punctuation">{</span>
    异常的处理代码<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>
    执行所有资源释放操作<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 手动释放资源</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>JDK7方案</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">try</span><span class="token punctuation">(</span>创建流对象<span class="token number">1</span><span class="token punctuation">;</span>创建流对象<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    可能出现异常的代码<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类名 变量名<span class="token punctuation">)</span><span class="token punctuation">{</span>
    异常的处理代码<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 资源用完最终自动释放</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>JDK9方案</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>创建流对象<span class="token number">1</span><span class="token punctuation">;</span>
创建流对象<span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">try</span><span class="token punctuation">(</span>流<span class="token number">1</span><span class="token punctuation">;</span> 流<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    可能出现异常的代码<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类名 变量名<span class="token punctuation">)</span><span class="token punctuation">{</span>
    异常的处理代码<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 资源用完最终自动释放</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：只有实现了<code>AutoCloseable</code>的类最终才能够自动释放资源</p></blockquote><h2 id="三、字节缓冲流" tabindex="-1"><a class="header-anchor" href="#三、字节缓冲流" aria-hidden="true">#</a> 三、字节缓冲流</h2><blockquote><p>字节缓冲流：提高读和写的效率</p></blockquote><ul><li>BufferedOutputStream：字节缓冲输出流</li><li>BufferedInputStream：字节缓冲输入流</li></ul><p><strong>构造方法</strong></p><ul><li><p>字节缓冲输出流：<code>BufferedOutputStream(OutputStream out)</code></p></li><li><p>字节缓冲输入流：<code>BufferedInputStream(InputStream in)</code></p></li><li><p>字节缓冲流仅仅提供缓冲区（8192长度的字节数组），而真正的读写数据还得依靠基本的字节流对象进行操作</p></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1</span> <span class="token punctuation">{</span>

	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
		<span class="token comment">// TODO Auto-generated method stub</span>
		<span class="token comment">// 创建字节缓冲输入流</span>
        <span class="token comment">// 在底层创建了一个默认长度为8192的字节数组</span>
		<span class="token class-name">BufferedInputStream</span> bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;E:\\\\study\\\\test.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 创建字节缓冲输出流</span>
		<span class="token class-name">BufferedOutputStream</span> bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;test.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		
		<span class="token keyword">int</span> b<span class="token punctuation">;</span>
		<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">=</span> bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
			bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
        <span class="token comment">// 释放资源（基本流不用手动关闭，会自动关闭）</span>
		bos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		bis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四、字符流-字符缓冲流" tabindex="-1"><a class="header-anchor" href="#四、字符流-字符缓冲流" aria-hidden="true">#</a> 四、字符流&amp;字符缓冲流</h2><h3 id="_1、字符集" tabindex="-1"><a class="header-anchor" href="#_1、字符集" aria-hidden="true">#</a> 1、字符集</h3><p><strong>基础知识</strong></p><ul><li>计算机中储存的信息都是用二进制数表示的</li><li>1个bit代表1位，1个字节有8个bit位，字节是计算机最小的存储单元</li><li>按照某种规则，将字符变成二进制，再存储到计算机中，称为编码</li><li>按照同样的规则，将存储在计算机中的二进制数解析显示出来，称为解码</li><li>编码和解码的方式必须要一致，否则会导致乱码</li></ul><p><strong>常用编码表</strong></p><blockquote><p>计算机在存储英文时，一个字节足以</p></blockquote><p><em>ASCII</em>（美国信息交换标准代码）：包括了数字，大小写字符和一些常见的标点符号</p><ul><li><p>ASCII 字符集由美国相关组织规定，其中共有 128 个数据。</p></li><li><p>常用的字符有 48 到 57 是十个阿拉伯数字，65 到 90 是 26 个大写英文字母，97 到 122 是小写英文字母。</p></li><li><p>编码规则：前面补0，补齐8位（计算机最小存储单元一字节）</p></li></ul><p><img src="http://images.hellocode.top/b6d4dcf8-9bae-11ed-8598-5cea1d84200c.png" alt="image-20230116194850128" loading="lazy"></p><blockquote><p>注意：ASCII码表中是没有中文的</p></blockquote><p><em>GBK</em>：windows系统默认的码表(系统显示ANSI)。兼容ASCII码表，也包含了21003个汉字，并支持繁体汉字以及部分日韩文字</p><p><img src="http://images.hellocode.top/b70be8a6-9bae-11ed-bf4d-5cea1d84200c.png" alt="image-20230116200359193" loading="lazy"></p><p><img src="http://images.hellocode.top/b748d4ee-9bae-11ed-a3c0-5cea1d84200c.png" alt="image-20230116201545704" loading="lazy"></p><ul><li>汉字两个字节存储（一个字节只能存储256个值，不够）</li><li>从左到右，前面的第一个字节为高位字节，后面的第二个字节为低位字节</li><li>高位字节二进制一定以1开头，转成十进制之后是一个负数（区分中英文）</li></ul><blockquote><p>注意：GBK是中国的码表，一个中文以两个字节的形式存储。但不包含世界上所有国家的文字</p></blockquote><p><em>Unicode码表</em>：由国际组织ISO制定，是统一的万国码，计算机科学领域里的一项业界标准，容纳世界上大多数国家的所有常见文字和符号</p><ul><li><p>同样的，Unicode 完全兼容 ASCII 字符集，但是其编码规则有所不同。例如 UTF-16（使用 2-4 个字节），UTF-32（固定使用 4 个字节），UTF-8等，其中 UTF-8 是我们实际开发中常用的编码方式，其使用 1 到 4 个字节的可变字符编码。</p></li><li><p>但是因为表示的字符太多，所有Unicode码表中的数字不是直接以二进制的形式存储到计算机的</p></li><li><p>会先通过UTF-7,UTF-7.5,UTF-8,UTF-16,以及UTF-32进行编码，再存储到计算机，其中最常见的就是UTF-8</p></li><li><p>在 UTF-8 字符编码规则中，ASCII字符集中的字符使用 1 个字节存储，中日韩文字等使用 3 个字节存储，其具以下的规则：</p><p><img src="http://images.hellocode.top/b7865b70-9bae-11ed-b68c-5cea1d84200c.png" alt="image-20230116204529634" loading="lazy"></p><p>例如 “汉” 字，在 Unicode 字符集中是 47802，转化为二进制是<code>1011101010111010</code>，其进行 UTF-8 编码以后是：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>11101011 1010101010 10111010
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><blockquote><p>注意：Unicode是万国码，以UTF-8编码后一个中文以三个字节的形式存储</p></blockquote><blockquote><p>UTF-8不是一个字符集，只是Unicode字符集的一种编码方式</p></blockquote><p><strong>重点</strong></p><ul><li><p>Windows默认使用码表为GBK，一个英文一个字节，一个中文两个字节</p></li><li><p>idea和以后工作默认使用Unicode的UTF-8编解码格式，一个英文一个字节，一个中文三个字节</p></li></ul><h4 id="_1-1-字符串的编码解码" tabindex="-1"><a class="header-anchor" href="#_1-1-字符串的编码解码" aria-hidden="true">#</a> 1.1. 字符串的编码解码</h4><p><strong>编码</strong></p><ul><li><code>byte[] getBytes()</code>：使用平台默认字符集将该String编码为一系列字节，将结果存储到新的字节数组中</li><li><code>byte[] getBytes(String charsetName)</code>：使用指定的字符集将该String编码为一系列字节，将结果存储到新的字节数组中</li></ul><p><strong>解码</strong></p><ul><li><code>String(byte[] bytes)</code>：通过使用平台的默认字符集解码指定的字节数组来构造新的String</li><li><code>String(bytes,String charsetName)</code>：通过指定的字符集解码指定的字节数组来构造新的String</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">UnsupportedEncodingException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1</span> <span class="token punctuation">{</span>

	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">UnsupportedEncodingException</span> <span class="token punctuation">{</span>
		<span class="token comment">// TODO Auto-generated method stub</span>
		<span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">&quot;好好学习，天天向上&quot;</span><span class="token punctuation">;</span>
		<span class="token comment">// 利用默认的GBK将中文编码为一系列的字节</span>
		<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes1 <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>bytes1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 指定为UTF-8编码格式</span>
		<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes2 <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>bytes2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes3 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">70</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">61</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">70</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">61</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">47</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">89</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">49</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">93</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">84</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">52</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">52</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">49</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">55</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">49</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
		<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes4 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">27</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">91</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">67</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">27</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">91</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">67</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">27</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">83</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">90</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">28</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">71</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">96</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">17</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">68</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">116</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">27</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">92</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">87</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">27</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">92</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">87</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">27</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">112</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">111</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">28</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">72</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">118</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
		<span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes3<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes4<span class="token punctuation">,</span><span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>IDEA默认采用UTF-8编码，Esclipe默认采用GBK进行编码</p></blockquote><p><strong>为什么字节流读取文本文件，可能出现乱码？</strong></p><ul><li>因为字节流一次读一个字节，而不管GBK还是UTF-8一个中文都是多个字节，用字节流每次只能读其中的一部分，所有就会出现乱码问题</li><li>编码和解码的方式不统一</li></ul><p><em>解决</em></p><ol><li>不要使用字节流读取文本文件</li><li>编码解码时使用同一个码表，同一个编码方式</li></ol><h4 id="_1-2-字符流读取中文的过程" tabindex="-1"><a class="header-anchor" href="#_1-2-字符流读取中文的过程" aria-hidden="true">#</a> 1.2. 字符流读取中文的过程</h4><p><strong>字符流 = 字节流 + 编码表</strong></p><ul><li>不管是在哪张码表中，中文的第一个字节一定是负数</li><li>GBK码表一个中文两个字节，UTF-8编码格式一个中文三个字节</li></ul><p>特点</p><ul><li>输入流：一次读取一个字节，遇到中文时，一次读取多个字节</li><li>输出流：底层会把数据按照指定的编码方式进行编码，变成字节再写到文件中</li></ul><p>使用场景</p><ul><li><p>想要进行拷贝，一律使用字节流或者字节缓冲流</p></li><li><p>想要把文本文件中的数据读到内存中，请使用字符输入流</p></li><li><p>想要把内存中的数据写到文本文件中，请使用字符输出流</p></li></ul><h3 id="_2、写出数据" tabindex="-1"><a class="header-anchor" href="#_2、写出数据" aria-hidden="true">#</a> 2、写出数据</h3><p><strong>步骤</strong></p><ul><li><p>创建字符输出流对象</p><table><thead><tr><th>构造方法</th><th>说明</th></tr></thead><tbody><tr><td><code>public FileWriter(File file)</code></td><td>创建字符输出流关联本地文件</td></tr><tr><td><code>public FileWriter(String pathname)</code></td><td>创建字符输出流关联本地文件</td></tr><tr><td><code>public FileWriter(File file, boolean append)</code></td><td>创建字符输出流关联本地文件，续写</td></tr><tr><td><code>public FileWriter(String pathname, boolean append)</code></td><td>创建字符输出流关联本地文件，续写</td></tr></tbody></table><ul><li>如果文件不存在，就创建。但要保证父级路径存在</li><li>如果文件存在且没开启续写，则清空</li></ul><blockquote><p>会创建一个长度为8192的字节数组，写出时先写进缓冲区，当以下三种情况发生时，写入本地文件：</p><ol><li>缓冲区满了，会自动将缓冲区数据刷新到本地文件</li><li>手动刷新：flush方法</li><li>关闭流：在关流之前会自动调用一下flush方法</li></ol></blockquote></li><li><p>写数据</p><ul><li>如果写出int类型的整数，实际写出的是整数在码表中对应的字母（如果要写整数，用字符串写）</li><li>写出字符串数据，是把字符串本身原样写出</li></ul></li><li><p>释放资源（每次操作完最后必须释放资源）</p></li></ul><p><strong>字符流写数据的5种方式</strong></p><table><thead><tr><th style="text-align:center;">方法名</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">void write(int c)</td><td style="text-align:center;">写一个字符</td></tr><tr><td style="text-align:center;">void write(char[] cbuf)</td><td style="text-align:center;">写出一个字符数组</td></tr><tr><td style="text-align:center;">void write(char[] cbuf, int off, int len)</td><td style="text-align:center;">写出字符数组的一部分</td></tr><tr><td style="text-align:center;">void write(String str)</td><td style="text-align:center;">写一个字符串</td></tr><tr><td style="text-align:center;">void write(String str, int off, int len)</td><td style="text-align:center;">写一个字符串的一部分</td></tr></tbody></table><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileWriter</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo2</span> <span class="token punctuation">{</span>

	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
		<span class="token comment">// TODO Auto-generated method stub</span>
		
		
		<span class="token comment">// 创建字符输出流对象</span>
		<span class="token class-name">FileWriter</span> fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">&quot;src\\\\CharStream\\\\a.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// FileWriter fw = new FileWriter(new File(&quot;CharStream\\\\a.txt&quot;));</span>
		
		
		<span class="token comment">// 写出数据(一次一个字符)</span>
		<span class="token comment">// method1(fw);</span>
		
		<span class="token comment">// 写一个字符数组</span>
		<span class="token comment">// method2(fw);</span>
		
		<span class="token comment">// 写出字符数组的一部分</span>
		<span class="token comment">// method3(fw);</span>
		
		<span class="token comment">// 写出一个字符串[重点]</span>
		<span class="token comment">// method4(fw);</span>
		
		<span class="token comment">// 写出一个字符串的一部分（了解）</span>
		<span class="token comment">// method5(fw);</span>
		
		<span class="token comment">// 释放资源</span>
		fw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		
		
	<span class="token punctuation">}</span>

	<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method5</span><span class="token punctuation">(</span><span class="token class-name">FileWriter</span> fw<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
		fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;好好学习，天天向上&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method4</span><span class="token punctuation">(</span><span class="token class-name">FileWriter</span> fw<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
		<span class="token class-name">String</span> line <span class="token operator">=</span> <span class="token string">&quot;好好学习,&quot;</span><span class="token punctuation">;</span>
		fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>
		fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;天天向上&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method3</span><span class="token punctuation">(</span><span class="token class-name">FileWriter</span> fw<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
		<span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">102</span><span class="token punctuation">,</span> <span class="token number">103</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
		fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>chars<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token class-name">FileWriter</span> fw<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
		<span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">98</span> <span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
		fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token class-name">FileWriter</span> fw<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
		fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">98</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>flush和close方法</strong></p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>flush()</td><td>刷新流，将缓冲区中的数据刷新到本地文件中，还可以继续写数据</td></tr><tr><td>close()</td><td>关闭流，释放资源，但是在关闭之前会先刷新流。一旦关闭，就不能再写数据</td></tr></tbody></table><blockquote><p>在写数据后，必须执行刷新流才能将内容最终写入文件种(close会在关闭流前刷新流)</p></blockquote><h3 id="_3、读取数据" tabindex="-1"><a class="header-anchor" href="#_3、读取数据" aria-hidden="true">#</a> 3、读取数据</h3><p><strong>步骤</strong></p><ul><li><p>创建字符输入流对象</p><table><thead><tr><th>构造方法</th><th>说明</th></tr></thead><tbody><tr><td><code>public FileReader(File file)</code></td><td>创建字符输入流关联本地文件</td></tr><tr><td><code>public FileReader(String pathname)</code></td><td>创建字符输入流关联本地文件</td></tr></tbody></table><blockquote><p>底层会关联文件，并创建缓冲区（长度为8192的字节数组）</p></blockquote></li><li><p>读取数据</p><table><thead><tr><th>成员方法</th><th>说明</th></tr></thead><tbody><tr><td><code>public int read()</code></td><td>读取数据，读到末尾返回-1</td></tr><tr><td><code>public int read(char[] buffer)</code></td><td>读取多个数据，读到末尾返回-1</td></tr></tbody></table><ul><li>按字节进行读取，遇到中文，一次读取多个字节，读取后解码，返回一个十进制整数</li><li>读到文件末尾了，read方法返回-1</li></ul><blockquote><p>底层：</p><ol><li><p>判断缓冲区中是否有数据可以读取</p></li><li><p>缓冲区中没有数据：就从文件中获取数据，装到缓冲区，每次尽可能装满缓冲区。如果文件中也没有数据了，返回-1</p></li><li><p>缓冲区有数据：就从缓冲区读取。</p><p>空参的read方法：一次读取一个字节，遇到中文读取多个字节，把字节解码并转成十进制返回</p><p>有参的read方法：把读取字节，解码，强转三步合并了，强转之后的字符放到数组中</p></li></ol></blockquote></li><li><p>释放资源 / 关流：<code>public int close();</code></p></li></ul><p><strong>一次读取多个字符</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileReader</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo3</span> <span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">{</span>
		<span class="token comment">// 创建对象</span>
		<span class="token class-name">FileReader</span> fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">&quot;src\\\\CharStream\\\\a.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		
		<span class="token comment">// 创建数组</span>
		<span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">int</span> len<span class="token punctuation">;</span>
		<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
			<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chars<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		
		<span class="token comment">// 释放资源</span>
		fr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>练习</strong></p><p>保存键盘录入的数据：将用户键盘录入的用户名和密码保存到本地实现永久化存储</p><p>要求用户名独占一行，密码独占一行</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileReader</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileWriter</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo4</span> <span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">{</span>
		<span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;【用户注册】&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;请输入用户名(6位)：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">String</span> userName <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;请输入密码(6位)：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">String</span> passWord <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">FileWriter</span> fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">&quot;user.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>userName <span class="token operator">+</span> <span class="token string">&quot;\\n&quot;</span> <span class="token operator">+</span> passWord<span class="token punctuation">)</span><span class="token punctuation">;</span>
		fw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;注册成功！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;【用户登录】&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;请输入用户名：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">String</span> user <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;请输入密码：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">String</span> pass <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">FileReader</span> fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">&quot;user.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">int</span> len<span class="token punctuation">;</span>
		<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
			userName <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chars<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			passWord <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chars<span class="token punctuation">,</span> <span class="token number">7</span> <span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>userName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> pass<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>passWord<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
			<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;登录成功！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
			<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;密码错误，登录失败！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4、综合练习" tabindex="-1"><a class="header-anchor" href="#_4、综合练习" aria-hidden="true">#</a> 4、综合练习</h3><h4 id="_4-1-拷贝" tabindex="-1"><a class="header-anchor" href="#_4-1-拷贝" aria-hidden="true">#</a> 4.1. 拷贝</h4><p>需求：拷贝一个文件夹，需要考虑子文件夹</p><h4 id="_4-2-文件加密" tabindex="-1"><a class="header-anchor" href="#_4-2-文件加密" aria-hidden="true">#</a> 4.2. 文件加密</h4><p>为了保证文件的安全性，就需要对原始文件进行加密存储，在使用的时候再对其进行解密处理</p><p><strong>加密原理</strong></p><ul><li>对原始文件中的每一个字节数据进行更改，然后将更改以后的数据存储到新的文件中</li></ul><p><strong>解密原理</strong></p><ul><li>读取加密之后的文件，按照加密的规则反向操作，变成原始文件</li></ul><h4 id="_4-3-修改文件中的数据" tabindex="-1"><a class="header-anchor" href="#_4-3-修改文件中的数据" aria-hidden="true">#</a> 4.3. 修改文件中的数据</h4><ul><li><p>文本文件中有以下的数据：<code>2-1-9-4-7-8</code></p></li><li><p>将文件中的数据进行排序，变成以下的数据：<code>1-2-4-7-8-9</code></p></li></ul><h3 id="_5、字符缓冲流" tabindex="-1"><a class="header-anchor" href="#_5、字符缓冲流" aria-hidden="true">#</a> 5、字符缓冲流</h3><ul><li>BufferedWriter(字符缓冲输出流)：可以将数据高效的写出</li><li>BufferedReader(字符缓冲输入流)：可以将数据高效的读取到内存</li></ul><blockquote><p>需要传入FileWriter或者FileReader对象，不能直接传入字符串地址或者File对象</p></blockquote><h4 id="_5-1-字符缓冲流特有方法" tabindex="-1"><a class="header-anchor" href="#_5-1-字符缓冲流特有方法" aria-hidden="true">#</a> 5.1. 字符缓冲流特有方法</h4><p>BufferedWriter</p><ul><li><code>void newLine()</code>：写一行行分隔符，行分隔符字符串由系统属性定义（跨平台换行）</li></ul><p>BufferedReader</p><ul><li><code>public String readLine()</code>：读一行文字。结果包含行内的内容的字符串，不包括任何行终止字符，如果流的结尾已经到达，则为null</li></ul><h4 id="_5-2-练习" tabindex="-1"><a class="header-anchor" href="#_5-2-练习" aria-hidden="true">#</a> 5.2. 练习</h4><p>读取文件中的数据，排序后再次写到本地文件</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">BufferedReader</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">BufferedWriter</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileReader</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileWriter</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo5</span> <span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">{</span>
		<span class="token comment">// 创建字符缓冲输入流对象</span>
		<span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">&quot;sort.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">String</span> s <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">// 8 7 5 2 1 3 4 9 10 6</span>
		<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
			<span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			num<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> number<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
		br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 写入</span>
		<span class="token class-name">BufferedWriter</span> bw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">&quot;sort.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
			bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			bw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		bw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>拷贝文件</strong></p><p>四种方式拷贝文件，并统计各自用时</p><ul><li>字节流的基本流：一次读写一个字节</li><li>字节流的基本流：一次读写一个字节数组</li><li>字节缓冲流：一次读写一个字节</li><li>字节缓冲流：一次读写一个字节数组</li></ul><p><strong>修改文本顺序</strong></p><p>需求：把《出师表》的文章顺序进行恢复到一个新文件中</p><p><strong>软件运行次数</strong></p><p>需求：实现一个验证程序运行次数的小程序，要求如下：</p><ol><li>当程序运行超过3次时给出提示：本软件只能免费使用3次，欢迎您注册会员后继续使用~</li><li>程序运行演示如下： <ul><li>第一次运行控制台输出：欢迎使用本软件，第1次使用免费~</li><li>第二次运行控制台输出：欢迎使用本软件，第2次使用免费~</li><li>第三次运行控制台输出：欢迎使用本软件，第3次使用免费~</li><li>第四次及以后运行控制台输出：本软件只能免费使用3次，欢迎您注册会员后继续使用~</li></ul></li></ol><h3 id="_6、小结" tabindex="-1"><a class="header-anchor" href="#_6、小结" aria-hidden="true">#</a> 6、小结</h3><ul><li>字节流用来拷贝文件</li><li>字符流用来进行文件的读写</li><li>缓冲流用来提高效率</li></ul><h2 id="五、转换流-对象操作流-properties" tabindex="-1"><a class="header-anchor" href="#五、转换流-对象操作流-properties" aria-hidden="true">#</a> 五、转换流&amp;对象操作流&amp;Properties</h2><h3 id="_1、转换流" tabindex="-1"><a class="header-anchor" href="#_1、转换流" aria-hidden="true">#</a> 1、转换流</h3><p>是对字符流的一个增强，是字符和字节流之间的桥梁，使用时可以按照字符流的步骤使用</p><ul><li>字符转换输入流：InputStreamReader，字节流到字符流的桥梁，把字节流转换为字符流</li><li>字符转换输出流：OutputStreamWriter，字符流到字节流的桥梁，把字符流转换为字节流</li></ul><p><strong>使用场景</strong></p><ul><li><p>在JDK11以前，可用于指定编码读写<code>InputStreamReader(&quot;a.txt&quot;,&quot;utf-8&quot;);</code>【了解即可】</p></li><li><p>在JDK11之后，字符流新推出了一个构造，也可以指定编码表</p><p><code>FileReader fr = new FileReader(&quot;a.txt&quot;,charset.forName(&quot;UTF-8&quot;));</code></p></li><li><p>字节流想要使用字符流中的方法</p></li></ul><p><strong>案例1</strong></p><ul><li><p>需求1：手动创建GBK的文件，把文件中的中文读取到内存中，不能出现乱码</p></li><li><p>需求2：把一段中文按照GBK的方式写到本地文件</p></li><li><p>需求3：将本地文件中的GBK文件，转成UTF-8</p></li></ul><p><strong>案例2</strong></p><p>利用字节流读取文件中的数据，每次读取一整行，而且不能出现乱码</p><h3 id="_2、序列化流" tabindex="-1"><a class="header-anchor" href="#_2、序列化流" aria-hidden="true">#</a> 2、序列化流</h3><blockquote><p>特点：可以把对象以字节的形式写到本地文件，直接打开文件，是读不懂的，需要再次用对象操作流读到内存中</p></blockquote><p><strong>对象操作流分为两类</strong></p><ul><li>对象操作输出流(对象序列化流)：ObjectOutputStream，就是将对象写到本地文件中，或者在网络中传输对象 <ul><li><code>public final void writeObject(Object object)</code>：把对象序列化（写出）到文件中</li><li>被序列化的对象需要实现Serializable接口（否则会出现NotSerializableException异常）</li><li>序列化流写到文件中的数据是不能修改的，一旦修改就无法再次读回来了</li></ul></li><li>对象操作输入流(对象反序列化流)：ObjectInputStream，把写到本地文件中的对象读到内存中，或者接收网络中传输的对象 <ul><li><code>public Object readObject()</code>：把序列化到本地文件中的对象，读取到程序中来</li></ul></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// User类</span>
<span class="token keyword">package</span> <span class="token class-name">Streamio</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Serializable</span></span><span class="token punctuation">;</span>

<span class="token comment">//	如果想要这个类的对象能被序列化，那么这个类就必须实现一个接口</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">{</span>
	
	<span class="token comment">//	成员变量</span>
	<span class="token keyword">private</span> <span class="token class-name">String</span> userName<span class="token punctuation">;</span>
	<span class="token keyword">private</span> <span class="token class-name">String</span> passWord<span class="token punctuation">;</span>
	
	<span class="token comment">//	构造方法</span>
	<span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token class-name">String</span> userName<span class="token punctuation">,</span> <span class="token class-name">String</span> passWord<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>userName <span class="token operator">=</span> userName<span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>passWord <span class="token operator">=</span> passWord<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token comment">//	成员方法</span>
	<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> userName<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserName</span><span class="token punctuation">(</span><span class="token class-name">String</span> userName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>userName <span class="token operator">=</span> userName<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getPassWord</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> passWord<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPassWord</span><span class="token punctuation">(</span><span class="token class-name">String</span> passWord<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>passWord <span class="token operator">=</span> passWord<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token string">&quot;User [userName=&quot;</span> <span class="token operator">+</span> userName <span class="token operator">+</span> <span class="token string">&quot;, passWord=&quot;</span> <span class="token operator">+</span> passWord <span class="token operator">+</span> <span class="token string">&quot;]&quot;</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>	
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Serializable接口的意义：标记性接口，里面没有任何抽象方法，只要一个类实现类这个Serializable接口，那么就表示这个类的对象可以被序列化</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 实现类	对象操作输出流</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileNotFoundException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileOutputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ObjectOutputStream</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1</span> <span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">FileNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
		<span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;qwer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 需求：把这个用户信息保存到本地文件</span>
		<span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;a.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
		oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 实现类  写：对象操作输入流</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileNotFoundException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ObjectInputStream</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo2</span> <span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">FileNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>
		<span class="token comment">// TODO Auto-generated method stub</span>
		<span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;a.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">User</span> o <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>
		ois<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-1-注意点" tabindex="-1"><a class="header-anchor" href="#_2-1-注意点" aria-hidden="true">#</a> 2.1. 注意点</h4><p><strong>用对象序列化流序列化了一个对象后，假如我们修改了对象所属的Javabean类（对象实现类），读取数据会不会出问题？</strong></p><ul><li>serialVersionUID序列号：如果没有手动定义，虚拟机会根据类中的信息自动计算出一个序列号</li><li>如果我们修改了类中的信息，虚拟机会再次计算出一个序列号</li></ul><p><strong>如果出问题了，如何解决？</strong></p><p>不让虚拟机计算序列号，自己手动给出一个不变的序列号</p><ul><li><p><code>private static final long serialVersionUID = 1L;</code></p></li><li><p>1L可以自定义，只要不超出long的范围即可</p></li></ul><p><strong>如果一个对象中的某个成员变量的值不想被序列化，又该如何实现？</strong></p><ul><li>使用关键字<code>transient</code>（瞬态关键字）修饰，该关键字标记的成员变量不参与序列化过程</li></ul><h4 id="_2-2-练习" tabindex="-1"><a class="header-anchor" href="#_2-2-练习" aria-hidden="true">#</a> 2.2. 练习</h4><p>案例：用对象操作流读写多个对象</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 需求：创建多个JavaBean类对象写到文件中，再次读取到内存</span>
<span class="token comment">// Student类</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Serializable</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">{</span>
	<span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
	<span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
	<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span>
	<span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> name<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> age<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token string">&quot;Student [name=&quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&quot;, age=&quot;</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">&quot;]&quot;</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>	
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 实现类</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileNotFoundException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileOutputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ObjectInputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ObjectOutputStream</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo3</span> <span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">FileNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">{</span>
		<span class="token class-name">Student</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">Student</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&quot;李四&quot;</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">Student</span> s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&quot;王五&quot;</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 写入</span>
		<span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;b.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>
		oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>
		oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span>
		oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 读出</span>
		<span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;b.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token doc-comment comment">/**while(true)<span class="token punctuation">{</span>
			try<span class="token punctuation">{</span>
				Student stu = (Student) ois.readObject();
				System.out.println(stu);
			<span class="token punctuation">}</span> catch(IOException e)<span class="token punctuation">{</span>
				break;
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		*/</span>
        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Student</span> stu <span class="token operator">:</span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
		ois<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、properties" tabindex="-1"><a class="header-anchor" href="#_3、properties" aria-hidden="true">#</a> 3、Properties</h3><ul><li>是一个Map体系的集合类</li><li>Properties中有跟IO相关的方法</li><li>键值对的数据类型基本都定义为字符串</li></ul><p>练习：Properties作为Map集合的使用</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token class-name">Properties</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Properties</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Set</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1</span> <span class="token punctuation">{</span>

	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// TODO Auto-generated method stub</span>
		<span class="token class-name">Properties</span> prop <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 增</span>
		prop<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;唐三&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;小舞&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		prop<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;戴沐白&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;朱竹青&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		prop<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;奥斯卡&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;宁荣荣&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 删</span>
		prop<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">&quot;戴沐白&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 改</span>
		prop<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;奥斯卡&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;朱竹青&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 查</span>
		<span class="token class-name">Object</span> value <span class="token operator">=</span> prop<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;唐三&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 遍历</span>
		<span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> keys <span class="token operator">=</span> prop<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key <span class="token operator">:</span> keys<span class="token punctuation">)</span><span class="token punctuation">{</span>		<span class="token comment">// 所有的键</span>
			<span class="token class-name">Object</span> r <span class="token operator">=</span> prop<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">&quot;=&quot;</span> <span class="token operator">+</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// 所有的键值对对象</span>
		<span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> entries <span class="token operator">=</span> prop<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> entry <span class="token operator">:</span>entries<span class="token punctuation">)</span><span class="token punctuation">{</span>
			<span class="token class-name">Object</span> key <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token class-name">Object</span> val <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">&quot;---&quot;</span> <span class="token operator">+</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>作为集合的特有方法</strong></p><table><thead><tr><th style="text-align:center;">方法名</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>Object setProperty(String key, String value)</code></td><td style="text-align:center;">设置集合的键和值，都是String类型，底层调用Hashtable方法</td></tr><tr><td style="text-align:center;"><code>String getProperty(String key)</code></td><td style="text-align:center;">使用此属性列表中指定的键搜索属性</td></tr><tr><td style="text-align:center;"><code>Set&lt;String&gt; stringPropertyNames()</code></td><td style="text-align:center;">从该属性列表中返回一个不可修改的键集，其中键及其对应的值是字符串</td></tr></tbody></table><p><strong>Properties和IO流结合的方法</strong></p><table><thead><tr><th style="text-align:center;">方法名</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>void load(InputStream inStream)</code></td><td style="text-align:center;">从输入字节流读取属性列表(键和元素对)</td></tr><tr><td style="text-align:center;"><code>void load(Reader reader)</code></td><td style="text-align:center;">从输入字符流读取属性列表(键和元素对)</td></tr><tr><td style="text-align:center;"><code>void store(OutputStream out, String comments)</code></td><td style="text-align:center;">将此属性列表(键和元素对)写入此Properties表中，以适合于使用load(InputStream)方法的格式写入输出字节流</td></tr><tr><td style="text-align:center;"><code>void store(Writer writer, String comments)</code></td><td style="text-align:center;">将此属性列表(键和元素对)写入此Properties表中，以适合使用load(Reader)方法的格式写入输出字符流</td></tr></tbody></table><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 读取</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileReader</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Properties</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo2</span> <span class="token punctuation">{</span>

	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
		<span class="token comment">// TODO Auto-generated method stub</span>
		<span class="token class-name">Properties</span> prop <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">FileReader</span> fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">&quot;src\\\\Properties\\\\prop.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 调用完了load方法之后，文件中的键值对数据已经在集合中了</span>
		prop<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>fr<span class="token punctuation">)</span><span class="token punctuation">;</span>
		fr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 保存</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileWriter</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Properties</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo3</span> <span class="token punctuation">{</span>

	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
		<span class="token comment">// TODO Auto-generated method stub</span>
		<span class="token class-name">Properties</span> prop <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		prop<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		prop<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;lisi&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		prop<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;wangwu&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;789&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">FileWriter</span> fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">&quot;src\\\\Properties\\\\prop.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		prop<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span>fw<span class="token punctuation">,</span> <span class="token string">&quot;注释&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">// 注释不填可以填写null</span>
		fw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="六、打印流" tabindex="-1"><a class="header-anchor" href="#六、打印流" aria-hidden="true">#</a> 六、打印流</h2><p><strong>分类</strong>：打印流一般是指：PrintStream、PrintWriter两个类</p><p><strong>特点</strong></p><ul><li>打印流只能操作文件目的地，不能操作数据源（只有写，没有读）</li><li>特有的写出方法可以实现，数据原样写出 <ul><li>打印：97，文件中：97</li><li>打印：true，文件中：true</li></ul></li><li>特有的写出方法，可以实现自动刷新，自动换行（打印一次数据 = 写出 + 换行 + 刷新）</li></ul><h3 id="_1、字节打印流" tabindex="-1"><a class="header-anchor" href="#_1、字节打印流" aria-hidden="true">#</a> 1、字节打印流</h3><table><thead><tr><th>构造方法</th><th>说明</th></tr></thead><tbody><tr><td><code>public PrintStream(OutputStream/File/String)</code></td><td>关联字节输出流/文件/文件路径</td></tr><tr><td><code>public PrintStream(String fileName, Charset charset)</code></td><td>指定字符编码</td></tr><tr><td><code>public PrintStream(OutputStream out, boolean autoFlush)</code></td><td>自动刷新</td></tr><tr><td><code>public PrintStream(OutputStream out, boolean autoFlush, String encoding)</code></td><td>指定字符编码且自动刷新</td></tr></tbody></table><blockquote><p>字节流底层没有缓冲区，开不开自动刷新都一样</p></blockquote><table><thead><tr><th>成员方法</th><th>说明</th></tr></thead><tbody><tr><td><code>public void write(int b)</code></td><td>常规方法：规则和之前一样，将指定的字节写出</td></tr><tr><td><code>public void println(Xxx xx)</code></td><td><em>特有方法</em>：打印任意数据，自动刷新，自动换行</td></tr><tr><td><code>public void print(Xxx xx)</code></td><td><em>特有方法</em>：打印任意数据，不换行</td></tr><tr><td><code>public void printf(String format,Object... args)</code></td><td><em>特有方法</em>：带有占位符的打印语句，不换行</td></tr></tbody></table><h3 id="_2、字符打印流" tabindex="-1"><a class="header-anchor" href="#_2、字符打印流" aria-hidden="true">#</a> 2、字符打印流</h3><table><thead><tr><th>构造方法</th><th>说明</th></tr></thead><tbody><tr><td><code>public PrintWriter(Writer/File/String)</code></td><td>关联字节输出流/文件/文件路径</td></tr><tr><td><code>public PrintWriter(String fileName, Charset charset)</code></td><td>指定字符编码</td></tr><tr><td><code>public PrintWriter(Write w, boolean autoFlush)</code></td><td>自动刷新</td></tr><tr><td><code>public PrintWriter(Write w, boolean autoFlush, Charset charset)</code></td><td>指定字符编码且自动刷新</td></tr></tbody></table><blockquote><p>字符打印流底层有缓冲区，想要自动刷新需要开启</p></blockquote><table><thead><tr><th>成员方法</th><th>说明</th></tr></thead><tbody><tr><td><code>public void write(int b)</code></td><td>常规方法：规则和之前一样，将指定的字节写出</td></tr><tr><td><code>public void println(Xxx xx)</code></td><td><em>特有方法</em>：打印任意数据，自动刷新，自动换行</td></tr><tr><td><code>public void print(Xxx xx)</code></td><td><em>特有方法</em>：打印任意数据，不换行</td></tr><tr><td><code>public void printf(String format,Object... args)</code></td><td><em>特有方法</em>：带有占位符的打印语句，不换行</td></tr></tbody></table><p><strong>System.out.println()</strong></p><ul><li><code>PrintStream ps = System.out;</code>，获取打印流的对象，此打印流在虚拟机启动的时候，由虚拟机创建，默认指向控制台</li><li>特殊的打印流，也叫系统中的标准输出流，是不能关闭的，在系统中是唯一的</li></ul><h2 id="七、解压缩流-压缩流" tabindex="-1"><a class="header-anchor" href="#七、解压缩流-压缩流" aria-hidden="true">#</a> 七、解压缩流/压缩流</h2><h3 id="_1、解压缩流" tabindex="-1"><a class="header-anchor" href="#_1、解压缩流" aria-hidden="true">#</a> 1、解压缩流</h3><ul><li>需要是.zip后缀的压缩包</li><li>压缩包里面的每一个文件，对应Java中的ZipEntry对象</li><li>解压本质：把每一个ZipEntry按照层级拷贝到本地另一个文件夹中</li></ul><p><strong>步骤</strong></p><ol><li><p>创建一个File表示要解压的压缩包</p><p><code>File src = new File(&quot;D:\\\\aaa.zip&quot;);</code></p></li><li><p>创建一个File表示解压的目的地</p><p><code>File dest = new File(&quot;D:\\\\&quot;);</code></p></li><li><p>定义一个方法用来解压</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">unzip</span><span class="token punctuation">(</span><span class="token class-name">File</span> src<span class="token punctuation">,</span> <span class="token class-name">File</span> dest<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">{</span>
    <span class="token comment">// 创建一个解压缩流用来读取压缩包中的数据</span>
    <span class="token class-name">ZipInputStream</span> zip <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZipInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取到压缩包里面的每一个zipentry对象</span>
    <span class="token class-name">ZipEntry</span> entry<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>entry <span class="token operator">=</span> zip<span class="token punctuation">.</span><span class="token function">getNextEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">// 文件夹：需要在目的地dest处创建一个同样的文件夹</span>
            <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span> entry<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            file<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token comment">// 文件：需要读取到压缩包中的文件，并把它存放到目的地dest文件夹中（按照层级目录进行存放）</span>
            <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span> entry<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> b<span class="token punctuation">;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">=</span> zip<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token comment">// 写到目的地</span>
                fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 表示在压缩包中的一个文件处理完毕了</span>
            zip<span class="token punctuation">.</span><span class="token function">closeEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="_2、压缩流" tabindex="-1"><a class="header-anchor" href="#_2、压缩流" aria-hidden="true">#</a> 2、压缩流</h3><ul><li>压缩包里面的每一个文件，对应Java中的ZipEntry对象</li><li>压缩本质：把每一个（文件 / 文件夹）看出ZipEntry对象放到压缩包中</li></ul><p>需求：把<code>D:\\\\a.txt</code>打包成一个压缩包</p><ol><li><p>创建一个File表示要压缩的文件</p><p><code>File src = new File(&quot;D:\\\\a.txt&quot;);</code></p></li><li><p>创建一个File表示压缩包的位置</p><p><code>File dest = new File(&quot;D:\\\\&quot;);</code></p></li><li><p>定义一个方法用来压缩</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">toZip</span><span class="token punctuation">(</span><span class="token class-name">File</span> src<span class="token punctuation">,</span> <span class="token class-name">File</span> dest<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token class-name">IOException</span><span class="token punctuation">{</span>
    <span class="token comment">// 1. 创建压缩流关联压缩包</span>
    <span class="token class-name">ZipOutputStream</span> zos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZipOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span><span class="token string">&quot;a.zip&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 2.创建ZipEntry对象，表示压缩包里面的每一个文件夹和文件</span>
    <span class="token comment">// 参数：压缩包中的路径</span>
    <span class="token class-name">ZipEntry</span> entry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZipEntry</span><span class="token punctuation">(</span><span class="token string">&quot;a.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 3. 把ZipEntry对象放到压缩包中</span>
    zos<span class="token punctuation">.</span><span class="token function">putNextEntry</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 4. 把src中的数据写到压缩包当中</span>
    <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> b<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        zos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    zos<span class="token punctuation">.</span><span class="token function">closeEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    zos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p><strong>案例：压缩文件夹</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 1. 创建File对象表示要压缩的文件夹</span>
    <span class="token class-name">File</span> src <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;D:\\\\aaa&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 2. 创建File对象表示压缩包放在哪里（压缩包的父级路径）</span>
    <span class="token class-name">File</span> destParent <span class="token operator">=</span> src<span class="token punctuation">.</span><span class="token function">getParentFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token comment">// 3. 创建File对象表示压缩包的路径</span>
    <span class="token class-name">File</span> dest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>destParent<span class="token punctuation">,</span> src<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;.zip&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 4. 创建压缩流关联压缩包</span>
    <span class="token class-name">ZipOutputStream</span> zos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZipOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 5. 获取src里面的每一个文件，变成ZipEntry对象，放入到压缩包中</span>
    <span class="token function">toZip</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span>zos<span class="token punctuation">,</span>src<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 6. 释放资源</span>
    zos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 参数一：数据源</span>
<span class="token comment">// 参数二：压缩流</span>
<span class="token comment">// 参数三：压缩包内部的路径</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">toZip</span><span class="token punctuation">(</span><span class="token class-name">File</span> src<span class="token punctuation">,</span> <span class="token class-name">ZipOutputStream</span> zos<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 1. 进入src文件夹</span>
    <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> src<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 2. 遍历数组</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">File</span> file <span class="token operator">:</span> files<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 3. 判断-文件，变成ZipEntry对象，放入到压缩包中</span>
        <span class="token class-name">ZipEntry</span> entry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZipEntry</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">&quot;\\\\&quot;</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        zos<span class="token punctuation">.</span><span class="token function">putNextEntry</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 读取文件数据，写到压缩包</span>
        <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> b<span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            zos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        zos<span class="token punctuation">.</span><span class="token function">closeEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token comment">// 4. 判断-文件夹，递归</span>
        <span class="token function">toZip</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span>zos<span class="token punctuation">,</span>name <span class="token operator">+</span> <span class="token string">&quot;\\\\&quot;</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="八、常用工具包" tabindex="-1"><a class="header-anchor" href="#八、常用工具包" aria-hidden="true">#</a> 八、常用工具包</h2><h3 id="_1、commons-io" tabindex="-1"><a class="header-anchor" href="#_1、commons-io" aria-hidden="true">#</a> 1、Commons-io</h3><blockquote><p>Commons-io是apache开源基金会组织提供的一组有关IO操作的开源工具包。Commons-io工具包提供了很多有关io操作的类。有两个主要的类FileUtils, IOUtils</p></blockquote><p><strong>作用</strong>：提供IO流的开发效率</p><p>commons-io工具包提供了很多有关io操作的类，见下表：</p>`,234),v=n("thead",null,[n("tr",null,[n("th",null,"包"),n("th",null,"功能描述")])],-1),b={href:"http://org.apache.commons.io",target:"_blank",rel:"noopener noreferrer"},g=n("td",null,"有关Streams、Readers、Writers、Files的工具类",-1),y=n("tr",null,[n("td",null,"org.apache.commons.io.input"),n("td",null,"输入流相关的实现类，包含Reader和InputStream")],-1),w=n("tr",null,[n("td",null,"org.apache.commons.io.output"),n("td",null,"输出流相关的实现类，包含Writer和OutputStream")],-1),f=n("tr",null,[n("td",null,"org.apache.commons.io.serialization"),n("td",null,"序列化相关的类")],-1),h=e(`<div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>commons-io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
&lt;/dependency
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-1-ioutils-工具类" tabindex="-1"><a class="header-anchor" href="#_1-1-ioutils-工具类" aria-hidden="true">#</a> 1.1. IOUtils 工具类</h4><p>包路径：org.apache.commons.io.IOUtils;</p><p>处理输入 - 输出流。所有成员字段和方法都是静态的</p><p>常用静态变量：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">LINE_SEPARATOR</span><span class="token punctuation">;</span>                        <span class="token comment">// 行分隔符</span>
<span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">LINE_SEPARATOR_UNIX</span> <span class="token operator">=</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">;</span>            <span class="token comment">// Unix系统的行分隔符</span>
<span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">LINE_SEPARATOR_WINDOWS</span> <span class="token operator">=</span> <span class="token string">&quot;\\r\\n&quot;</span><span class="token punctuation">;</span>        <span class="token comment">// Windows系统的行分隔符</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>常用静态方法：</p><p>注：类中的所有处理InputStream的方法都带有内部的缓冲区，所以不需要再使用 <code>BufferedReader</code>或者 <code>BufferedInputStream</code>，默认的缓冲区大小为4K，不过也可以自定义它的大小。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 把input输入流中的内容拷贝到output输出流中，返回拷贝的字节个数(适合文件大小为2GB以下)</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">copy</span><span class="token punctuation">(</span><span class="token class-name">Reader</span> input<span class="token punctuation">,</span> <span class="token class-name">Writer</span> output<span class="token punctuation">)</span>                            <span class="token comment">// 字符流</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">copy</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> input<span class="token punctuation">,</span> <span class="token class-name">OutputStream</span> output<span class="token punctuation">)</span>                    <span class="token comment">// 字节流</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">copy</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> input<span class="token punctuation">,</span> <span class="token class-name">Writer</span> output<span class="token punctuation">,</span> <span class="token class-name">Charset</span> encoding<span class="token punctuation">)</span>
<span class="token comment">// 把input输入流中的内容拷贝到output输出流中，返回拷贝的字节个数(适合文件大小为2GB以上)</span>
<span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">copyLarge</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> input<span class="token punctuation">,</span> <span class="token class-name">OutputStream</span> output<span class="token punctuation">)</span>
<span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">copyLarge</span><span class="token punctuation">(</span><span class="token class-name">Reader</span> input<span class="token punctuation">,</span> <span class="token class-name">Writer</span> output<span class="token punctuation">)</span>
    
<span class="token comment">// 从流中读取内容，并转换为String的list</span>
<span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">readLines</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> input<span class="token punctuation">)</span>
<span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">readLines</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> input<span class="token punctuation">,</span> <span class="token class-name">String</span> encoding<span class="token punctuation">)</span>
        <span class="token comment">// input 的类型可以为 InputStream，Reader</span>
        <span class="token comment">// encoding 的类型可以为 Charset，String</span>

<span class="token comment">// 把数据写入到输出流中</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">,</span> <span class="token class-name">OutputStream</span> output<span class="token punctuation">)</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">,</span> <span class="token class-name">OutputStream</span> output<span class="token punctuation">,</span> <span class="token class-name">String</span> encoding<span class="token punctuation">)</span>
<span class="token comment">// 把string的List写入到输出流中</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">writeLines</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> lines<span class="token punctuation">,</span> <span class="token class-name">String</span> lineEnding<span class="token punctuation">,</span> <span class="token class-name">OutputStream</span> output<span class="token punctuation">)</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">writeLines</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> lines<span class="token punctuation">,</span> <span class="token class-name">String</span> lineEnding<span class="token punctuation">,</span> <span class="token class-name">OutputStream</span> output<span class="token punctuation">,</span> <span class="token class-name">String</span> encoding<span class="token punctuation">)</span>
        <span class="token comment">// data 的类型可以为 byte[]，CharSequence，StringBuffer，String</span>
        <span class="token comment">// output 的类型可以为 OutputStream，Writer</span>
        <span class="token comment">// encoding 的类型可以为 Charset，String</span>

<span class="token comment">// 无条件的关闭一个可被关闭的对象而不抛出任何异常。</span>
<span class="token comment">// 重载支持关闭所有的InputStream、OutputStream、Reader和Writer。</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">closeQuietly</span><span class="token punctuation">(</span><span class="token class-name">Closeable</span> closeable<span class="token punctuation">)</span>

<span class="token comment">// 比较两个Reader对象的内容是否相同，相同返回true，否则返回false</span>
<span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">contentEquals</span><span class="token punctuation">(</span><span class="token class-name">Reader</span> input1<span class="token punctuation">,</span> <span class="token class-name">Reader</span> input2<span class="token punctuation">)</span>
<span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">contentEquals</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> input1<span class="token punctuation">,</span> <span class="token class-name">InputStream</span> input2<span class="token punctuation">)</span>
<span class="token comment">// 比较两个Reader对象的内容是否相同，忽略行结束符而比较内容</span>
<span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">contentEqualsIgnoreEOL</span><span class="token punctuation">(</span><span class="token class-name">Reader</span> input1<span class="token punctuation">,</span> <span class="token class-name">Reader</span> input2<span class="token punctuation">)</span>

<span class="token comment">// 从InputStream中返回一个行迭代器。行迭代器将持有一个打开的InputStream的引用。迭代结束后，应当关闭stream来释放内部资源。</span>
<span class="token keyword">static</span> <span class="token class-name">LineIterator</span> <span class="token function">lineIterator</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> input<span class="token punctuation">,</span> <span class="token class-name">String</span> encoding<span class="token punctuation">)</span>
        <span class="token comment">// input 的类型可以为 InputStream，Reader</span>
        <span class="token comment">// encoding 的类型可以为 Charset，String。传null则使用默认的</span>

<span class="token comment">// 返回字符输入流缓冲流</span>
<span class="token keyword">static</span> <span class="token class-name">BufferedReader</span> <span class="token function">toBufferedReader</span><span class="token punctuation">(</span><span class="token class-name">Reader</span> reader<span class="token punctuation">)</span>
<span class="token keyword">static</span> <span class="token class-name">BufferedReader</span> <span class="token function">toBufferedReader</span><span class="token punctuation">(</span><span class="token class-name">Reader</span> reader<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span>
<span class="token comment">// 返回字节输入流缓冲流</span>
<span class="token keyword">static</span> <span class="token class-name">InputStream</span> <span class="token function">toInputStream</span><span class="token punctuation">(</span><span class="token class-name">CharSequence</span> input<span class="token punctuation">)</span>
<span class="token keyword">static</span> <span class="token class-name">InputStream</span> <span class="token function">toInputStream</span><span class="token punctuation">(</span><span class="token class-name">CharSequence</span> input<span class="token punctuation">,</span> <span class="token class-name">String</span> encoding<span class="token punctuation">)</span>

<span class="token comment">// 返回字符串</span>
<span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token class-name">Reader</span> input<span class="token punctuation">)</span>
<span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> input<span class="token punctuation">,</span> <span class="token class-name">String</span> encoding<span class="token punctuation">)</span>
<span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token class-name">URI</span> uri<span class="token punctuation">)</span>
<span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token class-name">URI</span> uri<span class="token punctuation">,</span> <span class="token class-name">Charset</span> encoding<span class="token punctuation">)</span>
<span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token class-name">URL</span> url<span class="token punctuation">,</span> <span class="token class-name">Charset</span> encoding<span class="token punctuation">)</span>
<span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token class-name">URL</span> url<span class="token punctuation">,</span> <span class="token class-name">String</span> encoding<span class="token punctuation">)</span>
        <span class="token comment">// input 的类型可以为 InputStream，Reader，byte[]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-2-fileutils-工具类" tabindex="-1"><a class="header-anchor" href="#_1-2-fileutils-工具类" aria-hidden="true">#</a> 1.2. FileUtils 工具类</h4><p>包路径：org.apache.commons.io.FileUtils;</p><p>操作文件的工具类</p><p>常见工具类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 读取一个文件以字符串形式返回</span>
<span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">readFileToString</span><span class="token punctuation">(</span><span class="token class-name">File</span> file<span class="token punctuation">)</span>
<span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">readFileToString</span><span class="token punctuation">(</span><span class="token class-name">File</span> file<span class="token punctuation">,</span> <span class="token class-name">String</span> encoding<span class="token punctuation">)</span>

<span class="token comment">// 文件复制</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">copyFile</span><span class="token punctuation">(</span><span class="token class-name">File</span> srcFile<span class="token punctuation">,</span> <span class="token class-name">File</span> destFile<span class="token punctuation">)</span>
<span class="token comment">// 复制整个文件夹到另外一个地方</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">copyDirectory</span><span class="token punctuation">(</span><span class="token class-name">File</span> source<span class="token punctuation">,</span> <span class="token class-name">File</span> destination<span class="token punctuation">)</span>
<span class="token comment">// 复制整个文件夹到另外一个地方，过滤一些指定的文件（比如名字，修改时时间等等）</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">copyDirectory</span><span class="token punctuation">(</span><span class="token class-name">File</span> source<span class="token punctuation">,</span> <span class="token class-name">File</span> destination<span class="token punctuation">,</span> <span class="token class-name">FileFilter</span> filter<span class="token punctuation">)</span>
<span class="token comment">// 把一个文件复制到一个文件夹中</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">copyFileToDirectory</span><span class="token punctuation">(</span><span class="token class-name">File</span> srcFile<span class="token punctuation">,</span> <span class="token class-name">File</span> destDir<span class="token punctuation">)</span>
<span class="token comment">// 文件夹复制</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">copyDirectoryToDirectory</span><span class="token punctuation">(</span><span class="token class-name">File</span> srcDir<span class="token punctuation">,</span> <span class="token class-name">File</span> destDir<span class="token punctuation">)</span>

<span class="token comment">// 使用指定的编码将CharSequence写入文件中</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">File</span> file<span class="token punctuation">,</span> <span class="token class-name">CharSequence</span> data<span class="token punctuation">)</span>
<span class="token comment">// 将集合按行写入到文件中</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">writeLines</span><span class="token punctuation">(</span><span class="token class-name">File</span> file<span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> lines<span class="token punctuation">)</span>
<span class="token comment">// 把字符串写入到一个文件中</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">writeStringToFile</span><span class="token punctuation">(</span><span class="token class-name">File</span> file<span class="token punctuation">,</span> <span class="token class-name">String</span> data<span class="token punctuation">)</span>

<span class="token comment">// 返回一个File对象</span>
<span class="token keyword">static</span> <span class="token class-name">File</span> <span class="token function">getFile</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> names<span class="token punctuation">)</span>
<span class="token comment">// 返回表示系统临时目录的File对象</span>
<span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getTempDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// 返回表示用户目录的File对象</span>
<span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getUserDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// 创建了一个迭代器，可以按行遍历给定的文件</span>
<span class="token keyword">static</span> <span class="token class-name">LineIterator</span> <span class="token function">lineIterator</span><span class="token punctuation">(</span><span class="token class-name">File</span> file<span class="token punctuation">)</span>
<span class="token comment">// 返回目录内容的大小</span>
<span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">sizeOfDirectory</span><span class="token punctuation">(</span><span class="token class-name">File</span> directory<span class="token punctuation">)</span>

<span class="token comment">// 比较两个文件的内容，返回比较的结果</span>
<span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">contentEquals</span><span class="token punctuation">(</span><span class="token class-name">File</span> file1<span class="token punctuation">,</span> <span class="token class-name">File</span> file2<span class="token punctuation">)</span>

<span class="token comment">// 递归的删除一个文件夹</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">deleteDirectory</span><span class="token punctuation">(</span><span class="token class-name">File</span> directory<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-3-filenameutils-工具类" tabindex="-1"><a class="header-anchor" href="#_1-3-filenameutils-工具类" aria-hidden="true">#</a> 1.3. FilenameUtils 工具类</h4><p>路径：org.apache.commons.io.FilenameUtils;</p><p>常用方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 获取当前系统格式化路径</span>
<span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">normalize</span><span class="token punctuation">(</span><span class="token class-name">String</span> filename<span class="token punctuation">)</span>
<span class="token comment">// 获取当前系统无结尾分隔符的路径</span>
<span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">normalizeNoEndSeparator</span><span class="token punctuation">(</span><span class="token class-name">String</span> filename<span class="token punctuation">)</span>

<span class="token comment">// 合并目录和文件名为文件全路径</span>
<span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">concat</span><span class="token punctuation">(</span><span class="token class-name">String</span> basePath<span class="token punctuation">,</span> <span class="token class-name">String</span> fullFilenameToAdd<span class="token punctuation">)</span>

<span class="token comment">// 获取文件名称，包含后缀</span>
<span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token class-name">String</span> filename<span class="token punctuation">)</span>
<span class="token comment">// 获取文件路径去除目录和后缀后的文件名</span>
<span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getBaseName</span><span class="token punctuation">(</span><span class="token class-name">String</span> filename<span class="token punctuation">)</span>
<span class="token comment">// 获取文件的后缀</span>
<span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getExtension</span><span class="token punctuation">(</span><span class="token class-name">String</span> filename<span class="token punctuation">)</span>
<span class="token comment">// 获取文件的完整目录(示例：/D:/aa/bb/cc/)</span>
<span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getFullPath</span><span class="token punctuation">(</span><span class="token class-name">String</span> filename<span class="token punctuation">)</span>
<span class="token comment">// 获取文件的目录不包含结束符(示例：/D:/aa/bb/cc)</span>
<span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getFullPathNoEndSeparator</span><span class="token punctuation">(</span><span class="token class-name">String</span> filename<span class="token punctuation">)</span>
<span class="token comment">// 获取去除前缀的路径(示例：D:/aa/bb/cc/)</span>
<span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getPath</span><span class="token punctuation">(</span><span class="token class-name">String</span> filename<span class="token punctuation">)</span>
<span class="token comment">// 获取去除前缀并结尾去除分隔符的路径(示例：D:/aa/bb/cc)</span>
<span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getPathNoEndSeparator</span><span class="token punctuation">(</span><span class="token class-name">String</span> filename<span class="token punctuation">)</span>
<span class="token comment">// 获取前缀</span>
<span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getPrefix</span><span class="token punctuation">(</span><span class="token class-name">String</span> filename<span class="token punctuation">)</span>
<span class="token comment">// 获取最后一个.(文件名与拓展名的分隔符)的位置</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">indexOfExtension</span><span class="token punctuation">(</span><span class="token class-name">String</span> filename<span class="token punctuation">)</span>
<span class="token comment">// 获取最后一个分隔符的位置</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">indexOfLastSeparator</span><span class="token punctuation">(</span><span class="token class-name">String</span> filename<span class="token punctuation">)</span>

<span class="token comment">// 转换分隔符为当前系统分隔符</span>
<span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">separatorsToSystem</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">)</span>
<span class="token comment">// 转换分隔符为linux系统分隔符</span>
<span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">separatorsToUnix</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">)</span>
<span class="token comment">// 转换分隔符为windows系统分隔符</span>
<span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">separatorsToWindows</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">)</span>

<span class="token comment">// 判断文件路径是否相同</span>
<span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">String</span> filename1<span class="token punctuation">,</span> <span class="token class-name">String</span> filename2<span class="token punctuation">)</span>
<span class="token comment">// 判断文件路径是否相同，格式化并大小写不敏感    // IOCase.INSENSITIVE</span>
<span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">String</span> filename1<span class="token punctuation">,</span> <span class="token class-name">String</span> filename2<span class="token punctuation">,</span> <span class="token keyword">boolean</span> normalized<span class="token punctuation">,</span> <span class="token class-name">IOCase</span> caseSensitivity<span class="token punctuation">)</span>
<span class="token comment">// 判断文件路径是否相同，格式化并大小写敏感</span>
<span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">equalsNormalized</span><span class="token punctuation">(</span><span class="token class-name">String</span> filename1<span class="token punctuation">,</span> <span class="token class-name">String</span> filename2<span class="token punctuation">)</span>
<span class="token comment">// 判断文件路径是否相同，不格式化，大小写敏感根据系统规则：windows：敏感；linux：不敏感</span>
<span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">equalsOnSystem</span><span class="token punctuation">(</span><span class="token class-name">String</span> filename1<span class="token punctuation">,</span> <span class="token class-name">String</span> filename2<span class="token punctuation">)</span>

<span class="token comment">// 判断文件扩展名是否等于指定扩展名</span>
<span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isExtension</span><span class="token punctuation">(</span><span class="token class-name">String</span> filename<span class="token punctuation">,</span> <span class="token class-name">String</span> extension<span class="token punctuation">)</span>
<span class="token comment">// 判断文件扩展名是否包含在指定字符串数组中</span>
<span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isExtension</span><span class="token punctuation">(</span><span class="token class-name">String</span> filename<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> extensions<span class="token punctuation">)</span>
<span class="token comment">// 判断文件扩展名是否包含在指定集合中</span>
<span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isExtension</span><span class="token punctuation">(</span><span class="token class-name">String</span> filename<span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> extensions<span class="token punctuation">)</span>

<span class="token comment">// 判断文件扩展名是否和指定规则匹配，大小写敏感</span>
<span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">wildcardMatch</span><span class="token punctuation">(</span><span class="token class-name">String</span> filename<span class="token punctuation">,</span> <span class="token class-name">String</span> wildcardMatcher<span class="token punctuation">)</span>
<span class="token comment">// 判断文件扩展名是否和指定规则匹配，大小写不敏感        // IOCase.INSENSITIVE</span>
<span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">wildcardMatch</span><span class="token punctuation">(</span><span class="token class-name">String</span> filename<span class="token punctuation">,</span> <span class="token class-name">String</span> wildcardMatcher<span class="token punctuation">,</span> <span class="token class-name">IOCase</span> caseSensitivity<span class="token punctuation">)</span>
<span class="token comment">// 判断文件扩展名是否和指定规则匹配，根据系统判断敏感型：windows:不敏感；linux：敏感</span>
<span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">wildcardMatchOnSystem</span><span class="token punctuation">(</span><span class="token class-name">String</span> filename<span class="token punctuation">,</span> <span class="token class-name">String</span> wildcardMatcher<span class="token punctuation">)</span>
    
<span class="token comment">// 移除文件的扩展名</span>
<span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">removeExtension</span><span class="token punctuation">(</span><span class="token class-name">String</span> filename<span class="token punctuation">)</span>
<span class="token comment">// 判断目录下是否包含指定文件或目录</span>
<span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">directoryContains</span><span class="token punctuation">(</span><span class="token class-name">String</span> canonicalParent<span class="token punctuation">,</span> <span class="token class-name">String</span> canonicalChild<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、hutool工具包" tabindex="-1"><a class="header-anchor" href="#_2、hutool工具包" aria-hidden="true">#</a> 2、Hutool工具包</h3><table><thead><tr><th>相关类</th><th>说明</th></tr></thead><tbody><tr><td>IoUtil</td><td>流操作工具类</td></tr><tr><td>FileUtil</td><td>文件读写和操作的工具类</td></tr><tr><td>FileTypeUtil</td><td>文件类型判断工具类</td></tr><tr><td>WatchMonitor</td><td>目录、文件监听</td></tr><tr><td>ClassPathResource</td><td>针对ClassPath中资源的访问封装</td></tr><tr><td>FileReader</td><td>封装文件读取</td></tr><tr><td>FileWriter</td><td>封装文件写入</td></tr></tbody></table>`,20);function S(F,q){const t=o("router-link"),c=o("ExternalLinkIcon");return i(),u("div",null,[r,n("nav",d,[n("ul",null,[n("li",null,[s(t,{to:"#一、file"},{default:p(()=>[a("一、File")]),_:1}),n("ul",null,[n("li",null,[s(t,{to:"#_1、构造方法"},{default:p(()=>[a("1、构造方法")]),_:1})]),n("li",null,[s(t,{to:"#_2、常用操作"},{default:p(()=>[a("2、常用操作")]),_:1})]),n("li",null,[s(t,{to:"#_3、练习"},{default:p(()=>[a("3、练习")]),_:1})])])]),n("li",null,[s(t,{to:"#二、字节流"},{default:p(()=>[a("二、字节流")]),_:1}),n("ul",null,[n("li",null,[s(t,{to:"#_1、字节流写数据"},{default:p(()=>[a("1、字节流写数据")]),_:1})]),n("li",null,[s(t,{to:"#_2、字节流读数据"},{default:p(()=>[a("2、字节流读数据")]),_:1})]),n("li",null,[s(t,{to:"#_3、复制文件案例"},{default:p(()=>[a("3、复制文件案例")]),_:1})]),n("li",null,[s(t,{to:"#_4、定义小数组拷贝"},{default:p(()=>[a("4、定义小数组拷贝")]),_:1})]),n("li",null,[s(t,{to:"#_5、io流中不同jdk版本捕获异常的方式"},{default:p(()=>[a("5、IO流中不同JDK版本捕获异常的方式")]),_:1})])])]),n("li",null,[s(t,{to:"#三、字节缓冲流"},{default:p(()=>[a("三、字节缓冲流")]),_:1})]),n("li",null,[s(t,{to:"#四、字符流-字符缓冲流"},{default:p(()=>[a("四、字符流&字符缓冲流")]),_:1}),n("ul",null,[n("li",null,[s(t,{to:"#_1、字符集"},{default:p(()=>[a("1、字符集")]),_:1})]),n("li",null,[s(t,{to:"#_2、写出数据"},{default:p(()=>[a("2、写出数据")]),_:1})]),n("li",null,[s(t,{to:"#_3、读取数据"},{default:p(()=>[a("3、读取数据")]),_:1})]),n("li",null,[s(t,{to:"#_4、综合练习"},{default:p(()=>[a("4、综合练习")]),_:1})]),n("li",null,[s(t,{to:"#_5、字符缓冲流"},{default:p(()=>[a("5、字符缓冲流")]),_:1})]),n("li",null,[s(t,{to:"#_6、小结"},{default:p(()=>[a("6、小结")]),_:1})])])]),n("li",null,[s(t,{to:"#五、转换流-对象操作流-properties"},{default:p(()=>[a("五、转换流&对象操作流&Properties")]),_:1}),n("ul",null,[n("li",null,[s(t,{to:"#_1、转换流"},{default:p(()=>[a("1、转换流")]),_:1})]),n("li",null,[s(t,{to:"#_2、序列化流"},{default:p(()=>[a("2、序列化流")]),_:1})]),n("li",null,[s(t,{to:"#_3、properties"},{default:p(()=>[a("3、Properties")]),_:1})])])]),n("li",null,[s(t,{to:"#六、打印流"},{default:p(()=>[a("六、打印流")]),_:1}),n("ul",null,[n("li",null,[s(t,{to:"#_1、字节打印流"},{default:p(()=>[a("1、字节打印流")]),_:1})]),n("li",null,[s(t,{to:"#_2、字符打印流"},{default:p(()=>[a("2、字符打印流")]),_:1})])])]),n("li",null,[s(t,{to:"#七、解压缩流-压缩流"},{default:p(()=>[a("七、解压缩流/压缩流")]),_:1}),n("ul",null,[n("li",null,[s(t,{to:"#_1、解压缩流"},{default:p(()=>[a("1、解压缩流")]),_:1})]),n("li",null,[s(t,{to:"#_2、压缩流"},{default:p(()=>[a("2、压缩流")]),_:1})])])]),n("li",null,[s(t,{to:"#八、常用工具包"},{default:p(()=>[a("八、常用工具包")]),_:1}),n("ul",null,[n("li",null,[s(t,{to:"#_1、commons-io"},{default:p(()=>[a("1、Commons-io")]),_:1})]),n("li",null,[s(t,{to:"#_2、hutool工具包"},{default:p(()=>[a("2、Hutool工具包")]),_:1})])])])])]),m,n("table",null,[v,n("tbody",null,[n("tr",null,[n("td",null,[n("a",b,[a("org.apache.commons.io"),s(c)])]),g]),y,w,f])]),h])}const O=l(k,[["render",S],["__file","io.html.vue"]]);export{O as default};
