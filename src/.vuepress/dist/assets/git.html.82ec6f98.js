import{_ as c}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as d,c as r,a as i,b as l,d as t,e as o,r as a}from"./app.d1f70aa1.js";const n={},s=o('<h1 id="git" tabindex="-1"><a class="header-anchor" href="#git" aria-hidden="true">#</a> Git</h1><h2 id="一、概述及安装" tabindex="-1"><a class="header-anchor" href="#一、概述及安装" aria-hidden="true">#</a> 一、概述及安装</h2><blockquote><p>版本控制：无论是代码编写，还是文档编写，我们都会遇到对文档内容反复修改的情况</p></blockquote><p><strong>Git和SVN的对比</strong></p><ul><li>SVN是集中式版本控制系统，版本库是集中放在中央服务器的，而开发人员工作的时候，用的都是自己的电脑，所以首先要从中央服务器下载最新的版本，然后开发，开发完后，需要把自己开发的代码提交到中央服务器</li><li>Git是在2005年，Liunx创建者为了帮助全球的开发者，维护Linux系统内核的开发，而开发了自己的开源分布式版本控制工具，分为两种类型的仓库，本地仓库和远程仓库</li></ul><p><strong>Git下载和安装</strong></p>',6),g={href:"https://git-scm.com/downloads",target:"_blank",rel:"noopener noreferrer"},p=i("li",null,"Git GUI : Git提供的图形界面工具",-1),h=i("li",null,"Git Bash：Git提供的命令行工具",-1),u=i("li",null,"运行Git命令客户端，使用git --version命令，可以查看git版本",-1),_=o('<h2 id="二、基本操作" tabindex="-1"><a class="header-anchor" href="#二、基本操作" aria-hidden="true">#</a> 二、基本操作</h2><h3 id="_1、本地仓库" tabindex="-1"><a class="header-anchor" href="#_1、本地仓库" aria-hidden="true">#</a> 1、本地仓库</h3><ul><li>工作目录：Working Tree ----代码存放的位置</li><li>暂存区(Index)：代码提交到仓库之前的临时存储空间</li><li>本地历史仓库(Repository)/版本库：存放不同版本的代码，例如：（完成了项目10%的代码、完成了项目20%的代码）</li></ul><p>工作目录----&gt;暂存区----&gt;本地历史仓库（版本库）</p><blockquote><p>版本库指.git隐藏文件夹，工作目录是和.git同级的目录，暂存区是.git隐藏文件中的index</p></blockquote><h3 id="_2、git常用命令" tabindex="-1"><a class="header-anchor" href="#_2、git常用命令" aria-hidden="true">#</a> 2、Git常用命令</h3><ul><li><code>git init</code>：初始化，创建git仓库</li><li><code>git status</code>：查看git状态（文件是否进行了添加、提交操作）</li><li><code>git add 文件名（支持*通配）</code>：添加，将指定文件添加到暂存区</li><li><code>git reset 文件名（支持*通配）</code>：将指定文件从暂存区移除（取消git版本跟踪） <ul><li>也可以通过<code>git reset --hard 唯一标识</code>，指定版本，回退到对应的版本（唯一标识通过log查询）</li></ul></li><li><code>git commit -m &#39;描述信息&#39; [文件名（支持*通配）]</code>：提交，将暂存区文件提交到历史仓库</li><li><code>git log</code>：查看日志（git提交的历史日志）</li></ul><p><strong>基本操作流程</strong></p><ol><li>创建工作目录，初始化本地git仓库（初始化本地仓库使用不多，更多的是clone远程仓库）</li><li>新建一个test.txt文件（暂不执行添加操作）</li><li>使用status命令，查看状态</li><li>使用add命令添加，并查看状态</li><li>使用commit命令，提交到本地历史仓库</li><li>使用log命令，查看日志</li><li>修改test.txt文件</li><li>添加并提交，查看日志</li></ol><h3 id="_3、git版本管理" tabindex="-1"><a class="header-anchor" href="#_3、git版本管理" aria-hidden="true">#</a> 3、Git版本管理</h3><ul><li><p>准备工作：</p><ol><li><p>查看log日志</p><p><code>git reflog</code>：可以查看所有分支的所有操作记录（包括已经被删除的commit记录的操作）</p></li><li><p>增加一次新的修改记录</p></li></ol></li><li><p>主要指令</p><p><code>git reflog</code></p><p><code>git reset --hard 版本唯一索引值</code>：将代码切换到指定版本</p></li></ul><h3 id="_4、远程仓库" tabindex="-1"><a class="header-anchor" href="#_4、远程仓库" aria-hidden="true">#</a> 4、远程仓库</h3><p><strong>工作流程</strong></p><ul><li>推送(push)：推送本地仓库内容到远程仓库</li><li>克隆(clone)：将远程仓库中的内容复制到本地仓库</li><li>拉取(pull)：更新远程仓库中新的内容到本地仓库（和克隆有区别）</li></ul><p><strong>常用命令</strong></p><ul><li><p><code>git remote [-v]</code>：查看远程仓库（shortname和url）</p></li><li><p><code>git remote add &lt;shortname&gt; &lt;url&gt;</code>：添加一个新的远程Git仓库，同时指定一个可以引用的简写（一般origin）</p></li><li><p><code>git clone</code>：从远程仓库克隆</p></li><li><p><code>git pull &lt;shortname&gt; &lt;url&gt;</code>：从远程仓库拉取</p><blockquote><p>如果当前本地仓库不是从远程仓库克隆，而是在本地创建后关联的远程仓库，并且仓库中存在文件，此时从远程仓库拉取文件的时候会报错（fatal: refusing to merge unrelated histories）</p><p>解决此问题可以在git pull 命令后加入参数<code>--allow-unrelated-histories</code></p></blockquote></li><li><p><code>git push &lt;shortname&gt; &lt;url&gt;</code>：推送到远程仓库</p></li></ul><h3 id="_5、常见远程仓库平台" tabindex="-1"><a class="header-anchor" href="#_5、常见远程仓库平台" aria-hidden="true">#</a> 5、常见远程仓库平台</h3><p><strong>GitHub：</strong></p>',18),m={href:"https://github.com",target:"_blank",rel:"noopener noreferrer"},b=i("li",null,"介绍：GitHub是全球最大的开源项目托管平台，俗称大型程序员社区化交友网站 各类好玩有趣的开源项目，只有想不到，没有找不到",-1),f=i("p",null,[i("strong",null,"码云：")],-1),x={href:"https://gitee.com",target:"_blank",rel:"noopener noreferrer"},k=i("li",null,"介绍：码云是全国最大的开源项目托管平台，良心平台，速度快，提供免费私有库",-1),G=o('<p><strong>远程仓库平台操作</strong></p><ol><li>先有本地仓库，远程仓库为空</li><li>先有远程仓库，本地仓库为空</li></ol><p><em>情况1</em></p><ol><li><p>创建远程仓库</p></li><li><p>将项目从本地仓库，推送到远程仓库</p></li></ol><p>在推送代码之前，需要先配置SSH公钥</p><blockquote><p>生成SSH公钥步骤：</p><ol><li>设置Git账户 查看git账户：<code>git config user.name</code> 查看git邮箱：<code>git config user.email</code> 设置全局账户名和邮箱：<code>git config --global user.name &quot;账户名&quot;</code><code>git config --global user.email &quot;邮箱&quot;</code></li><li>生成SSH公钥 查看是否生成过SSH公钥：<code>cd ~/.ssh</code> 生成SSH：<code>ssh-keygen -t rsa -C &quot;邮箱&quot;</code> 这里需要敲击三次回车 查看SSH：<code>cat ~/.ssh/id_rsa.pub</code></li><li>设置账户公钥（在远程仓库平台设置）</li><li>公钥测试：<code>ssh -T git@gitee.com</code></li></ol></blockquote><ol start="3"><li><p>推送到远程平台</p><ol><li>为远程仓库的URL（网址），自定义仓库名称：<code>git remote add 远程名称 远程仓库URL</code></li><li>推送：<code>git push -u 仓库名称 分支名</code></li></ol></li></ol><p><em>情况2</em></p><ol><li>将远程仓库的代码，克隆到本地仓库：<code>git clone 仓库地址</code></li><li>创建新文件，添加并提交到本地仓库</li><li>推送至远程仓库</li><li>项目拉取更新：<code>git pull 远程仓库名 分支名</code></li></ol><ul><li><p>代码冲突</p><p><img src="http://images.hellocode.top/代码冲突.png" alt="" loading="lazy"></p><p><strong>&lt;&lt;&lt;&lt;&lt;&lt;&lt;和&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;中间的内容，就是冲突部分</strong></p><ol><li>修改冲突行，保存，即可解决冲突</li><li>重新add冲突文件并commit到本地仓库，重新push到远程</li></ol></li></ul><h3 id="_6、分支管理" tabindex="-1"><a class="header-anchor" href="#_6、分支管理" aria-hidden="true">#</a> 6、分支管理</h3><blockquote><p>分支是Git使用过程中非常重要的概念。使用分支意味着你可以把你的工作从开发主线上分离开来，以免影响开发主线。同一个仓库可以有多个分支，各分支相互独立，互不干扰。</p></blockquote><p>通过<code>git init</code>命令创建仓库时默认会创建一个master分支</p><ul><li><p>分支：由每次提交的代码，串成的一条时间线</p></li><li><p>特点：两条时间线，并行工作，互不打扰，多条时间线可以合并</p></li></ul><p><strong>使用场景</strong></p><ol><li>周期较长的模块开发</li><li>尝试性的模块开发</li></ol><p><strong>工作流程</strong></p><ol><li><p>查看分支：<code>git branch</code></p><ul><li><p>列出所有远程分支：<code>git branch -r</code></p></li><li><p>列出所有本地分支和远程分支：<code>git branch -a</code></p></li><li><p>创建新分支：<code>git branch 分支名</code></p></li><li><p>删除分支：<code>git branch -d 分支名</code></p></li></ul></li><li><p>切换分支: <code>git checkout 分支名</code></p></li><li><p>推送至远程仓库分支：<code>git push [shortName] [name]</code></p></li><li><p>合并分支:：<code>git merge 分支名</code></p></li></ol><h3 id="_7、标签操作" tabindex="-1"><a class="header-anchor" href="#_7、标签操作" aria-hidden="true">#</a> 7、标签操作</h3><blockquote><p>Git中的标签，指的是某个分支某个特定时间点的状态。通过标签，可以很方便的切换到标记时的状态。</p><p>比较有代表性的是人们会使用这个功能来标记发布结点（v1.0、v1.2等）</p></blockquote><p><strong>常用命令</strong></p><ul><li><code>git tag</code>：列出已有的标签</li><li><code>git tag [name]</code>：创建标签（创建标签时就记录当前分支下的版本信息）</li><li><code>git push [shortName] [name]</code>：将标签推送至远程仓库</li><li><code>git checkout -b [branch] [name]</code>：检出标签（需要新建一个分支branch来指向某个标签）</li></ul><h3 id="_8、idea集成git" tabindex="-1"><a class="header-anchor" href="#_8、idea集成git" aria-hidden="true">#</a> 8、IDEA集成Git</h3><p><strong>IDEA中配置Git</strong></p><ol><li>File ---- Settings</li><li>Version Control ---- Git ---- 指定git.exe存放目录</li><li>点击Test测试</li></ol><p><strong>版本切换</strong></p><ul><li>Reset Current Branch to Here...：会抛弃原来的提交记录</li><li>Revert Commit：需要进行版本冲突处理，历史记录还保留提交记录</li></ul><p><strong>远程仓库操作</strong></p><ul><li>本地推送到远程</li><li>远程克隆到本地</li></ul>',29);function q(S,H){const e=a("ExternalLinkIcon");return d(),r("div",null,[s,i("ul",null,[i("li",null,[l("官网下载地址："),i("a",g,[l("https://git-scm.com/downloads"),t(e)])]),p,h,u]),_,i("ul",null,[i("li",null,[l("域名："),i("a",m,[l("https://github.com"),t(e)])]),b]),f,i("ul",null,[i("li",null,[l("域名："),i("a",x,[l("https://gitee.com"),t(e)])]),k]),G])}const V=c(n,[["render",q],["__file","git.html.vue"]]);export{V as default};
