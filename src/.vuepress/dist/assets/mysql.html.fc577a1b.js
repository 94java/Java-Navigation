import{_ as p}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c as l,a as n,b as s,d as t,e,r as c}from"./app.ff70f562.js";const i={},u=e(`<h1 id="mysql" tabindex="-1"><a class="header-anchor" href="#mysql" aria-hidden="true">#</a> MySQL</h1><h2 id="一、函数" tabindex="-1"><a class="header-anchor" href="#一、函数" aria-hidden="true">#</a> 一、函数</h2><blockquote><p>函数是指一段可以直接被另一端程序调用的程序或代码。聚合函数也是函数的一种</p></blockquote><p><strong>调用方法</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> 函数<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_1、字符串函数" tabindex="-1"><a class="header-anchor" href="#_1、字符串函数" aria-hidden="true">#</a> 1、字符串函数</h3><p>MySQL中内置了很多字符串函数，常用的几个如下：</p><p><img src="http://images.hellocode.top/20b85d21d32b4127a2af4d4dbb3e2ce2.png" alt="img" loading="lazy"></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> CONCAT<span class="token punctuation">(</span><span class="token string">&#39;Hello &#39;</span><span class="token punctuation">,</span><span class="token string">&#39;MySQL&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">-- Hello MySQL</span>

<span class="token keyword">SELECT</span> LOWER<span class="token punctuation">(</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">-- hello</span>
<span class="token keyword">SELECT</span> UPPER<span class="token punctuation">(</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">-- HELLO</span>

<span class="token keyword">SELECT</span> LPAD<span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">-- ..abc</span>
<span class="token keyword">SELECT</span> RPAD<span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">-- abc..</span>

<span class="token keyword">SELECT</span> TRIM<span class="token punctuation">(</span><span class="token string">&#39; Hello Mysql &#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">-- Hello Mysql</span>

<span class="token keyword">SELECT</span> SUBSTRING<span class="token punctuation">(</span><span class="token string">&#39;HelloCode&#39;</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">-- ello</span>

<span class="token comment">-- 由于业务需求的变更，企业员工的工号，统一为5位数，目前不足5位数的全部在前面补0</span>
<span class="token keyword">update</span> emp <span class="token keyword">set</span> workno <span class="token operator">=</span> lpad<span class="token punctuation">(</span>workno<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong></p><ul><li><code>TRIM</code>函数只去除头部和尾部空格，字符串之间的空格不会去除</li><li><code>SUBSTRING</code>函数索引是从1开始的</li></ul><h3 id="_2、数值函数" tabindex="-1"><a class="header-anchor" href="#_2、数值函数" aria-hidden="true">#</a> 2、数值函数</h3><p><img src="http://images.hellocode.top/08cdada06eee4db487766a56a16bae95.png" alt="img" loading="lazy"></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> CEIL<span class="token punctuation">(</span><span class="token number">1.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">-- 2</span>
<span class="token keyword">SELECT</span> FLOOR<span class="token punctuation">(</span><span class="token number">1.9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">-- 1</span>
<span class="token keyword">SELECT</span> <span class="token function">MOD</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">-- 2</span>
<span class="token keyword">SELECT</span> RAND<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">-- 随机数（0~1）</span>
<span class="token keyword">SELECT</span> <span class="token function">ROUND</span><span class="token punctuation">(</span><span class="token number">2.345</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">-- 2.35</span>

<span class="token comment">-- 通过数据库的函数，生成一个六位数的随机验证码</span>
<span class="token keyword">SELECT</span> LPAD<span class="token punctuation">(</span><span class="token function">ROUND</span><span class="token punctuation">(</span>RAND<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1000000</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、日期函数" tabindex="-1"><a class="header-anchor" href="#_3、日期函数" aria-hidden="true">#</a> 3、日期函数</h3><p><img src="http://images.hellocode.top/e76dd623f2674db3b01c593dfe865790.png" alt="img" loading="lazy"></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> CURDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">-- 2023-01-15</span>
<span class="token keyword">SELECT</span> CURTIME<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">-- 21:47:16</span>
<span class="token keyword">SELECT</span> <span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">-- 2023-01-15 21:48:15</span>

<span class="token keyword">SELECT</span> <span class="token keyword">YEAR</span><span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">-- 2023</span>
<span class="token keyword">SELECT</span> <span class="token keyword">MONTH</span><span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">-- 1</span>
<span class="token keyword">SELECT</span> <span class="token keyword">DAY</span><span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">-- 15</span>

<span class="token keyword">SELECT</span> DATE_ADD<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">INTERVAL</span> <span class="token number">70</span> <span class="token keyword">DAY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">-- 2023-03-26 21:51:07</span>
<span class="token keyword">SELECT</span> DATEDIFF<span class="token punctuation">(</span><span class="token string">&#39;2023-1-15&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2022-10-30&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">-- 77</span>

<span class="token comment">-- 查询所有员工的入职天数，并根据入职天数倒序排序</span>
<span class="token keyword">select</span> name<span class="token punctuation">,</span> datediff<span class="token punctuation">(</span>curdate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> entrydate<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">&#39;entrydays&#39;</span> <span class="token keyword">from</span> emp <span class="token keyword">order</span> <span class="token keyword">by</span> entrydays <span class="token keyword">desc</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4、流程函数" tabindex="-1"><a class="header-anchor" href="#_4、流程函数" aria-hidden="true">#</a> 4、流程函数</h3><p><img src="http://images.hellocode.top/2618b1593f8f43f29b04704623bc20ae.png" alt="img" loading="lazy"></p><h2 id="二、约束" tabindex="-1"><a class="header-anchor" href="#二、约束" aria-hidden="true">#</a> 二、约束</h2><ul><li><p>什么是约束 对表中的数据进行限定，保证数据的正确性、有效性、完整性</p></li><li><p>约束的分类</p><table><thead><tr><th style="text-align:left;">约束</th><th style="text-align:left;">作用</th></tr></thead><tbody><tr><td style="text-align:left;">PRIMARY KEY</td><td style="text-align:left;">主键约束</td></tr><tr><td style="text-align:left;">PRIMARY KEY AUTO_INCREMENT</td><td style="text-align:left;">主键自增</td></tr><tr><td style="text-align:left;">UNIQUE</td><td style="text-align:left;">唯一约束</td></tr><tr><td style="text-align:left;">NOT NULL</td><td style="text-align:left;">非空约束</td></tr><tr><td style="text-align:left;">FOREIGN KEY</td><td style="text-align:left;">外键约束</td></tr><tr><td style="text-align:left;">FOREIGN KEY ON UPDATE CASCADE</td><td style="text-align:left;">外键级联更新</td></tr><tr><td style="text-align:left;">FOREIGN KEY ON DELETE CASCADE</td><td style="text-align:left;">外键级联删除</td></tr></tbody></table></li></ul><h3 id="_1、主键约束" tabindex="-1"><a class="header-anchor" href="#_1、主键约束" aria-hidden="true">#</a> 1、主键约束</h3><ul><li><p>特点 主键约束默认包含非空和唯一两个功能 一张表只能有一个主键 主键一般用于表中数据的唯一标识</p></li><li><p>建表时添加主键约束</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> 表名<span class="token punctuation">(</span>
    列名 数据类型 <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    列名 数据类型 约束
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>删除主键约束 <code>ALTER TABLE 表名 DROP PRIMARY KEY;</code></p></li><li><p>建表以后单独添加主键 <code>ALTER TABLE 表名 MODIFY 列名 数据类型 PRIMARY KEY;</code></p></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 创建学生表(编号、姓名、年龄) 编号为主键</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> students<span class="token punctuation">(</span>
    id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>
    NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    age <span class="token keyword">INT</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 查询学生表的详细信息</span>
<span class="token keyword">DESC</span> students<span class="token punctuation">;</span>

<span class="token comment">-- 添加数据</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> students <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">-- 添加失败，主键不能为空</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> students <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> students <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;李四&#39;</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">-- 添加失败，主键唯一</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> students <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;李四&#39;</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 删除主键</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> students <span class="token keyword">DROP</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">;</span>

<span class="token comment">-- 建表后单独添加主键约束</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> students <span class="token keyword">MODIFY</span> id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、主键自增约束" tabindex="-1"><a class="header-anchor" href="#_2、主键自增约束" aria-hidden="true">#</a> 2、主键自增约束</h3><p>建表时添加主键自增约束</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> 表名<span class="token punctuation">(</span>
    列名 数据类型 <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    列名 数据类型 约束
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>添加自增约束之后，主键内容就可以写null，会自动进行加一操作</p></blockquote><ul><li><p>删除主键自增约束 <code>ALTER TABLE 表名 MODIFY 列名 数据类型;</code></p></li><li><p>建表后单独添加主键自增约束 <code>ALTER TABLE 表名 MODIFY 列名 数据类型 AUTO_INCREMENT;</code></p></li></ul><p>MySQL中的自增约束，必须配合主键的约束一起来使用！</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 创建学生表(编号、姓名、年龄) 编号设为主键自增</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> students<span class="token punctuation">(</span>
    id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>
    NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    age <span class="token keyword">INT</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 查询学生表的详细信息</span>
<span class="token keyword">DESC</span> students<span class="token punctuation">;</span>

<span class="token comment">-- 添加数据</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> students <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> students <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">&#39;李四&#39;</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 删除自增约束</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> students <span class="token keyword">MODIFY</span> id <span class="token keyword">INT</span><span class="token punctuation">;</span>     <span class="token comment">-- 只删除自增约束，不会删除主键约束</span>

<span class="token comment">-- 建表后单独添加自增约束</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> students <span class="token keyword">MODIFY</span> id <span class="token keyword">INT</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、唯一约束" tabindex="-1"><a class="header-anchor" href="#_3、唯一约束" aria-hidden="true">#</a> 3、唯一约束</h3><p>建表时添加唯一约束</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> 表名<span class="token punctuation">(</span>
    列名 数据类型 <span class="token keyword">UNIQUE</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    列名 数据类型 约束
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>删除唯一约束 <code>ALTER TABLE 表名 DROP INDEX 列名;</code></p></li><li><p>建表后单独添加唯一约束 <code>ALTER TABLE 表名 MODIFY 列名 数据类型 UNIQUE;</code></p></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 创建学生表（编号、姓名、年龄）  编号设为主键自增，年龄设为唯一</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> student<span class="token punctuation">(</span>
    id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>
    NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    age <span class="token keyword">INT</span> <span class="token keyword">UNIQUE</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- 查询学生表的详细信息</span>
<span class="token keyword">DESC</span> student<span class="token punctuation">;</span>

<span class="token comment">-- 添加数据</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> student <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> student <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">&#39;李四&#39;</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 删除唯一约束</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> student <span class="token keyword">DROP</span> <span class="token keyword">INDEX</span> age<span class="token punctuation">;</span>

<span class="token comment">-- 建表后单独添加唯一约束</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> student <span class="token keyword">MODIFY</span> age <span class="token keyword">INT</span> <span class="token keyword">UNIQUE</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4、非空约束" tabindex="-1"><a class="header-anchor" href="#_4、非空约束" aria-hidden="true">#</a> 4、非空约束</h3><p>建表时添加非空约束</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> 表名<span class="token punctuation">(</span>
    列名 数据类型 <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    列名 数据类型 约束
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>删除非空约束 <code>ALTER TABLE 表名 MODIFY 列名 数据类型;</code></p></li><li><p>建表后单独添加非空约束 <code>ALTER TABLE 表名 MODIFY 列名 数据类型 NOT NULL;</code></p></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 创建学生表（编号、姓名、年龄）  编号设为主键自增，姓名设为非空，年龄设为唯一</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> student<span class="token punctuation">(</span>
    id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>
    NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    age <span class="token keyword">INT</span> <span class="token keyword">UNIQUE</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 查询学生表的详细信息</span>
<span class="token keyword">DESC</span> student<span class="token punctuation">;</span>

<span class="token comment">-- 添加数据</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> student <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 删除非空约束</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> student <span class="token keyword">MODIFY</span> NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 添加非空约束</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> student <span class="token keyword">MODIFY</span> NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5、检查约束" tabindex="-1"><a class="header-anchor" href="#_5、检查约束" aria-hidden="true">#</a> 5、检查约束</h3><p>检查约束使用 <code>CHECK</code> 关键字，具体的语法格式如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CHECK</span> <span class="token operator">&lt;</span>表达式<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>其中，“表达式”指的就是 SQL 表达式，用于指定需要检查的限定条件。</li><li>若将 CHECK 约束子句置于表中某个列的定义之后，则这种约束也称为基于列的 CHECK 约束。</li><li>在更新表数据的时候，系统会检查更新后的数据行是否满足 CHECK 约束中的限定条件。MySQL 可以使用简单的表达式来实现 CHECK 约束，也允许使用复杂的表达式作为限定条件，例如在限定条件中加入子查询。</li></ul><p><strong>在修改表时添加检查约束</strong></p><p>如果一个表创建完成，可以通过修改表的方式为表添加检查约束。</p><p>修改表时设置检查约束的语法格式如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> tb_emp7 <span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> <span class="token operator">&lt;</span>检查约束名<span class="token operator">&gt;</span> <span class="token keyword">CHECK</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>检查约束<span class="token operator">&gt;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>删除检查约束</strong></p><p>修改表时删除检查约束的语法格式如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token operator">&lt;</span>数据表名<span class="token operator">&gt;</span> <span class="token keyword">DROP</span> <span class="token keyword">CONSTRAINT</span> <span class="token operator">&lt;</span>检查约束名<span class="token operator">&gt;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_6、默认约束" tabindex="-1"><a class="header-anchor" href="#_6、默认约束" aria-hidden="true">#</a> 6、默认约束</h3><p>默认值（Default）的完整称呼是默认值约束（Default Constraint）。 MySQL 默认值约束用来指定某列的默认值。</p><p>例如女性员工较多，性别就可以默认为“女”。如果插入一条新的记录时没有为这个字段赋值，那么系统会自动为这个字段赋值为“女”。</p><p><strong>在创建表时设置默认值约束</strong></p><p>创建表时可以使用 <code>DEFAULT</code> 关键字设置默认值约束，具体的语法规则如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">&lt;</span>字段名<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>数据类型<span class="token operator">&gt;</span> <span class="token keyword">DEFAULT</span> <span class="token operator">&lt;</span>默认值<span class="token operator">&gt;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>在修改表时添加默认值约束</strong></p><p>有两种语法，分别是CHANGE和MODIFY子句。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token operator">&lt;</span>数据表名<span class="token operator">&gt;</span>
<span class="token keyword">MODIFY</span> <span class="token keyword">COLUMN</span> <span class="token operator">&lt;</span>字段名<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>数据类型<span class="token operator">&gt;</span> <span class="token keyword">DEFAULT</span> <span class="token operator">&lt;</span>默认值<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token operator">&lt;</span>数据表名<span class="token operator">&gt;</span>
CHANGE <span class="token keyword">COLUMN</span> <span class="token operator">&lt;</span>原字段名<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>新字段名<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>数据类型<span class="token operator">&gt;</span> <span class="token keyword">DEFAULT</span> <span class="token operator">&lt;</span>默认值<span class="token operator">&gt;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>删除默认值约束</strong></p><p>修改表时删除默认值约束的语法规则如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token operator">&lt;</span>数据表名<span class="token operator">&gt;</span>
CHANGE <span class="token keyword">COLUMN</span> <span class="token operator">&lt;</span>字段名<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>字段名<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>数据类型<span class="token operator">&gt;</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7、外键约束" tabindex="-1"><a class="header-anchor" href="#_7、外键约束" aria-hidden="true">#</a> 7、外键约束</h3><ul><li><p>为什么要有外键约束？ 当表与表之间的数据有相关联性的时候，如果没有相关的数据约束，则无法保证数据的准确性！ 比如用户和订单，表与表之间也有关联</p></li><li><p>外键约束的作用 让表与表之间产生关联关系，从而保证数据的准确性！</p></li></ul><p>建表时添加外键约束</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> 表名{
    列名 数据类型 约束<span class="token punctuation">,</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">CONSTRAINT</span> 外键名 <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>本表外键列名<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> 主表名<span class="token punctuation">(</span>主表主键列名<span class="token punctuation">)</span>
}<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>删除外键约束 <code>ALTER TABLE 表名 DROP FOREIGN KEY 外键名;</code></li></ul><p>建表后单独添加外键约束</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">ADD</span>
<span class="token keyword">CONSTRAINT</span> 外键名 <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>本表外键列名<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> 主表名<span class="token punctuation">(</span>主键列名<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>外键名一般取两个表的首字母_fk编号 例如：ou_fk1</p></blockquote><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 建表时添加外键约束</span>
<span class="token comment">-- 创建user表</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">USER</span><span class="token punctuation">(</span>
    id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token comment">-- id</span>
    NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span>       <span class="token comment">-- 姓名</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- 添加用户数据</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token keyword">USER</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">&#39;张三&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">&#39;李四&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 创建orderlist订单表</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> orderlist<span class="token punctuation">(</span>
    id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token comment">-- id</span>
    number <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>        <span class="token comment">-- 订单编号</span>
    uid <span class="token keyword">INT</span><span class="token punctuation">,</span>                <span class="token comment">-- 外键列</span>
    <span class="token keyword">CONSTRAINT</span> ou_fk1 <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>uid<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> <span class="token keyword">USER</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 添加订单数据</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> orderlist <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">&#39;001&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">&#39;002&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">&#39;003&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">&#39;004&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 添加一个订单，但是没有真实用户,添加失败</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> orderlist <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">&#39;005&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 删除李四用户，删除失败</span>
<span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> <span class="token keyword">USER</span> <span class="token keyword">WHERE</span> NAME<span class="token operator">=</span><span class="token string">&#39;李四&#39;</span><span class="token punctuation">;</span>

<span class="token comment">-- 删除外键约束</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> orderlist <span class="token keyword">DROP</span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> ou_fk1<span class="token punctuation">;</span> 

<span class="token comment">-- 添加外键约束</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> orderlist <span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> ou_fk1 <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>uid<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> <span class="token keyword">USER</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8、外键级联操作-了解" tabindex="-1"><a class="header-anchor" href="#_8、外键级联操作-了解" aria-hidden="true">#</a> 8、外键级联操作(了解)</h3><ul><li>什么是级联更新 当对主表中的数据进行修改时，从表中有关联的数据也会随之修改</li><li>什么是级联删除 当主表中的数据删除时，从表中的数据也会随之删除</li></ul><blockquote><p>级联操作在真实开发中很少使用，因为它耦合性太强，牵一发动全身</p></blockquote><p>添加级联更新</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">ADD</span>
<span class="token keyword">CONSTRAINT</span> 外键名 <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>本表外键列名<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> 主表名<span class="token punctuation">(</span>主键列名<span class="token punctuation">)</span>
<span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CASCADE</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>添加级联删除</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">ADD</span>
<span class="token keyword">CONSTRAINT</span> 外键名 <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>本表外键列名<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> 主表名<span class="token punctuation">(</span>主键列名<span class="token punctuation">)</span>
<span class="token keyword">ON</span> <span class="token keyword">DELETE</span> <span class="token keyword">CASCADE</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同时添加级联更新和级联删除</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">ADD</span>
<span class="token keyword">CONSTRAINT</span> 外键名 <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>本表外键列名<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> 主表名<span class="token punctuation">(</span>主键列名<span class="token punctuation">)</span>
<span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CASCADE</span> <span class="token keyword">ON</span> <span class="token keyword">DELETE</span> <span class="token keyword">CASCADE</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 添加外键约束，同时添加级联更新和级联删除</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> orderlist <span class="token keyword">ADD</span>
<span class="token keyword">CONSTRAINT</span> ou_fk1 <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>uid<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> <span class="token keyword">USER</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
<span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CASCADE</span> <span class="token keyword">ON</span> <span class="token keyword">DELETE</span> <span class="token keyword">CASCADE</span><span class="token punctuation">;</span>

<span class="token comment">-- 将李四这个用户id修改为3,订单表中的uid也自动修改</span>
<span class="token keyword">UPDATE</span> <span class="token keyword">USER</span> <span class="token keyword">SET</span> id<span class="token operator">=</span><span class="token number">3</span> <span class="token keyword">WHERE</span> NAME<span class="token operator">=</span><span class="token string">&#39;李四&#39;</span><span class="token punctuation">;</span>

<span class="token comment">-- 将李四这个用户删除，订单表中的该用户所属的订单也自动修改</span>
<span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> <span class="token keyword">USER</span> <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、多表操作" tabindex="-1"><a class="header-anchor" href="#三、多表操作" aria-hidden="true">#</a> 三、多表操作</h2><ul><li>多表概念 通俗的讲就是多张数据表，而表与表之间是可以有一定的关联关系，这种关联关系通过外键约束实现。</li><li>多表的分类 一对一 一对多 多对多</li></ul><h3 id="_1、一对一" tabindex="-1"><a class="header-anchor" href="#_1、一对一" aria-hidden="true">#</a> 1、一对一</h3><ul><li>适用场景 例如人和身份证。一个人只有一个身份证，一个身份证只能对应一个人</li><li>建表原则 在任意一个表建立外键，去关联另外一个表的主键</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 创建db5数据库</span>
<span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> db5<span class="token punctuation">;</span>

<span class="token comment">-- 使用db5数据库</span>
<span class="token keyword">USE</span> db5<span class="token punctuation">;</span>

<span class="token comment">-- 创建person表</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> person<span class="token punctuation">(</span>
    id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token comment">-- 主键id</span>
    NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>            <span class="token comment">-- 姓名</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 添加数据</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> person <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">&#39;李四&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 创建card表</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> card<span class="token punctuation">(</span>
    id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>      <span class="token comment">-- 主键id</span>
    number <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">UNIQUE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>     <span class="token comment">-- 身份证号</span>
    pid <span class="token keyword">INT</span> <span class="token keyword">UNIQUE</span><span class="token punctuation">,</span>                 <span class="token comment">-- 外键列</span>
    <span class="token keyword">CONSTRAINT</span> cp_fk1 <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>pid<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> person<span class="token punctuation">(</span>id<span class="token punctuation">)</span> 
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 添加数据</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> card <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">&#39;12345&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">&#39;56789&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、一对多" tabindex="-1"><a class="header-anchor" href="#_2、一对多" aria-hidden="true">#</a> 2、一对多</h3><ul><li>适用场景 用户和订单。一个用户可以有多个订单 商品分类和商品。一个分类下可以有多个商品</li><li>建表原则 在多的一方，建立外键约束，来关联一的一方主键</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 创建user表</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">USER</span><span class="token punctuation">(</span>
    id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token comment">-- 主键id</span>
    NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>            <span class="token comment">-- 姓名</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 添加数据</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token keyword">USER</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">&#39;李四&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 创建orderlist表</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> orderlist<span class="token punctuation">(</span>
    id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token comment">-- 主键id</span>
    number <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token comment">-- 订单编号</span>
    uid <span class="token keyword">INT</span><span class="token punctuation">,</span>                <span class="token comment">-- 外键链</span>
    <span class="token keyword">CONSTRAINT</span> ou_fk1 <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>uid<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> <span class="token keyword">USER</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 添加数据</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> orderlist <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">&#39;001&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">&#39;002&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">&#39;003&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">&#39;004&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、多对多" tabindex="-1"><a class="header-anchor" href="#_3、多对多" aria-hidden="true">#</a> 3、多对多</h3><ul><li>适用场景 学生和课程。一个学生可以选择多个课程，一个课程也可以被多个学生选择</li><li>建表原则 需要借助第三张中间表，中间表至少包含两个列。这两个列作为中间表的外键，分别关联两张表的主键</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 创建student表</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> student<span class="token punctuation">(</span>
    id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token comment">-- 主键id</span>
    NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>            <span class="token comment">-- 姓名</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 添加数据</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> student <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">&#39;李四&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 创建course表</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> course<span class="token punctuation">(</span>
    id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token comment">-- 主键id</span>
    NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>            <span class="token comment">-- 课程名称</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 添加数据</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> course <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">&#39;高数&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">&#39;线代&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 创建中间表</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> stu_course<span class="token punctuation">(</span>
    id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token comment">-- 主键id</span>
    sid <span class="token keyword">INT</span><span class="token punctuation">,</span>    <span class="token comment">-- 用于和student表中的id进行外键关联</span>
    cid <span class="token keyword">INT</span><span class="token punctuation">,</span>    <span class="token comment">-- 用于和course表中的id进行外键关联</span>
    <span class="token keyword">CONSTRAINT</span> sc_fk1 <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>sid<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> student<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">-- 添加外键约束</span>
    <span class="token keyword">CONSTRAINT</span> sc_fk2 <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>cid<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> course<span class="token punctuation">(</span>id<span class="token punctuation">)</span>   <span class="token comment">-- 添加外键约束</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 添加数据</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> stu_course <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4、多表查询" tabindex="-1"><a class="header-anchor" href="#_4、多表查询" aria-hidden="true">#</a> 4、多表查询</h3><p><strong>多表查询分类</strong></p><ul><li>内连接查询</li><li>外连接查询</li><li>联合查询</li><li>子查询</li><li>自关联查询</li></ul><p><strong>数据准备</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 创建db4数据库</span>
<span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> db4<span class="token punctuation">;</span>

<span class="token comment">-- 使用db4数据库</span>
<span class="token keyword">USE</span> db4<span class="token punctuation">;</span>

<span class="token comment">-- 创建user表</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">USER</span><span class="token punctuation">(</span>
    id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token comment">-- 用户id</span>
    NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>           <span class="token comment">-- 用户姓名</span>
    age <span class="token keyword">INT</span>                 <span class="token comment">-- 用户年龄</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 添加数据</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token keyword">USER</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;李四&#39;</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;王五&#39;</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&#39;赵六&#39;</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 订单表</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> orderlist<span class="token punctuation">(</span>
    id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token comment">-- 订单id</span>
    number <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token comment">-- 订单编号</span>
    uid <span class="token keyword">INT</span><span class="token punctuation">,</span>                <span class="token comment">-- 外键字段</span>
    <span class="token keyword">CONSTRAINT</span> ou_fk1 <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>uid<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> <span class="token keyword">USER</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> 
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 添加数据</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> orderlist <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;001&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> orderlist <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;002&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> orderlist <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;003&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> orderlist <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&#39;004&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> orderlist <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">&#39;005&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> orderlist <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">&#39;006&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> orderlist <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">&#39;007&#39;</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 商品分类表</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> category<span class="token punctuation">(</span>
    id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token comment">-- 商品分类id</span>
    NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>            <span class="token comment">-- 商品分类名称</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- 添加数据</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> category <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;手机数码&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;电脑办公&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;烟酒茶糖&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&#39;鞋靴箱包&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 商品表</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> product<span class="token punctuation">(</span>
    id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token comment">-- 商品id</span>
    NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>           <span class="token comment">-- 商品名称</span>
    cid <span class="token keyword">INT</span><span class="token punctuation">,</span>                <span class="token comment">-- 外键字段</span>
    <span class="token keyword">CONSTRAINT</span> cp_fk1 <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>cid<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> category<span class="token punctuation">(</span>id<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 添加数据</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> product <span class="token keyword">VALUES</span> 
<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;华为手机&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;小米手机&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;联想电脑&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&#39;苹果电脑&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">&#39;中华香烟&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">&#39;玉溪香烟&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">&#39;计生用品&#39;</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 中间表</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> us_pro<span class="token punctuation">(</span>
    upid <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>    <span class="token comment">-- 中间表id</span>
    uid <span class="token keyword">INT</span><span class="token punctuation">,</span>                <span class="token comment">-- 外键字段，需要和用户表的主键产生关联</span>
    pid <span class="token keyword">INT</span><span class="token punctuation">,</span>                <span class="token comment">-- 外键字段，需要和商品表的主键产生关联</span>
    <span class="token keyword">CONSTRAINT</span> up_fk1 <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>uid<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> <span class="token keyword">USER</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">CONSTRAINT</span> up_fk2 <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>pid<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> product<span class="token punctuation">(</span>id<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 添加数据</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> us_pro <span class="token keyword">VALUES</span>
<span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>内连接查询</strong></p><ul><li>查询原理 内连接查询的是两张表有交集的部分数据（有主外键关联的数据）</li><li>查询语法 显示内连接：<code>SELECT 列名 FROM 表名1 [INNER] JOIN 表名2 ON 条件;</code> 隐式内连接：<code>SELECT 列名 FROM 表名1,表名2 WHERE 条件;</code></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">/*
    显示内连接
*/</span>

<span class="token comment">-- 查询用户信息和他对应的订单信息</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">USER</span> <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> orderlist <span class="token keyword">ON</span> orderlist<span class="token punctuation">.</span>uid <span class="token operator">=</span> <span class="token keyword">user</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span>

<span class="token comment">-- 查询用户信息和对应的订单信息，起别名</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">USER</span> u <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> orderlist o <span class="token keyword">ON</span> o<span class="token punctuation">.</span>uid <span class="token operator">=</span> u<span class="token punctuation">.</span>id<span class="token punctuation">;</span>

<span class="token comment">-- 查询用户姓名、年龄和订单号</span>
<span class="token keyword">SELECT</span>
    u<span class="token punctuation">.</span>name<span class="token punctuation">,</span>     <span class="token comment">-- 用户姓名</span>
    u<span class="token punctuation">.</span>age<span class="token punctuation">,</span>      <span class="token comment">-- 用户年龄</span>
    o<span class="token punctuation">.</span>number    <span class="token comment">-- 订单编号</span>
<span class="token keyword">FROM</span>
    <span class="token keyword">USER</span> u      <span class="token comment">-- 用户表</span>
<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span>
    orderlist o     <span class="token comment">-- 订单表</span>
<span class="token keyword">ON</span>
    o<span class="token punctuation">.</span>uid <span class="token operator">=</span> u<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
    
<span class="token comment">/*
    隐式内连接
*/</span>

<span class="token comment">-- 查询用户姓名，年龄，订单编号</span>
<span class="token keyword">SELECT</span>
    u<span class="token punctuation">.</span>name<span class="token punctuation">,</span>     <span class="token comment">-- 用户姓名</span>
    u<span class="token punctuation">.</span>age<span class="token punctuation">,</span>      <span class="token comment">-- 用户年龄</span>
    o<span class="token punctuation">.</span>number    <span class="token comment">-- 订单编号</span>
<span class="token keyword">FROM</span>
    <span class="token keyword">USER</span> u<span class="token punctuation">,</span>
    orderlist o
<span class="token keyword">WHERE</span>
    o<span class="token punctuation">.</span>uid<span class="token operator">=</span>u<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>外连接查询</strong></p><p>左外连接</p><ul><li>查询原理 查询左表的全部数据，和左右两张表有交集部分的数据</li><li>查询语法 <code>SELECT 列名 FROM 表名1 LEFT [OUTER] JOIN 表名2 ON 条件;</code></li></ul><p>右外连接</p><ul><li>查询原理 查询右表的全部数据，和左右两张表有交集部分的数据</li><li>查询语法 <code>SELECT 列名 FROM 表名1 RIGHT [OUTER] JOIN 表名2 ON 条件;</code></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 查询所有用户信息，以及用户对应的订单信息</span>
<span class="token keyword">SELECT</span>
    u<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span>
    o<span class="token punctuation">.</span>number
<span class="token keyword">FROM</span>
    <span class="token keyword">USER</span> u
<span class="token keyword">LEFT</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span>
    orderlist o
<span class="token keyword">ON</span>
    u<span class="token punctuation">.</span>id<span class="token operator">=</span>o<span class="token punctuation">.</span>uid<span class="token punctuation">;</span>
    
<span class="token comment">-- 所有订单信息，以及订单所属的用户信息</span>
<span class="token keyword">SELECT</span>
    o<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span>
    u<span class="token punctuation">.</span>name
<span class="token keyword">FROM</span>
    <span class="token keyword">USER</span> u
<span class="token keyword">RIGHT</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span>
    orderlist o
<span class="token keyword">ON</span>
    u<span class="token punctuation">.</span>id<span class="token operator">=</span>o<span class="token punctuation">.</span>uid<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>联合查询</strong></p><p>对于union查询，就是把多次查询的结果合并起来，形成一个新的查询结果集</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> 字段列表 <span class="token keyword">FROM</span> 表A <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">UNION</span> <span class="token punctuation">[</span><span class="token keyword">ALL</span><span class="token punctuation">]</span>
<span class="token keyword">SELECT</span> 字段列表 <span class="token keyword">FROM</span> 表B <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>UNION ALL</code>会直接将查询结果合并，不做处理</p></li><li><p><code>UNION</code>会将结果合并（去除重复结果）</p></li><li><p>对于联合查询的多张表的列数必须保持一致，字段类型也需要保持一致</p></li></ul><p><strong>子查询</strong></p><p>查询语句中嵌套了查询语句，我们就将嵌套的查询称为子查询</p><p><em>结果是单行单列的（标量子查询）</em></p><ul><li><p>查询作用</p><p>可以将查询的结果作为另一条语句的查询条件，使用运算符判断（=、&gt;、&gt;=、&lt;、&lt;=de等）</p></li><li><p>查询语法</p><p><code>SELECT 列名 FROM 表名 WHERE 列名=(SELECT 列名 FROM 表名 [WHERE 条件]);</code></p></li></ul><p><em>结果是多行单列的（列子查询）</em></p><ul><li><p>查询作用</p><p>可以作为条件，使用运算符 IN 或 NOT IN 进行判断</p></li><li><p>查询语法</p><p><code>SELECT 列名 FROM 表名 WHERE 列名 [NOT] IN (SELECT 列名 FROM 表名 [WHERE 条件]);</code></p></li></ul><p><em>结果是一行多列的（行子查询）</em></p><ul><li><p>查询作用</p><p>可以作为条件，使用运算符 =、&lt;&gt;、 IN 或 NOT IN 进行判断</p></li><li><p>查询语法</p><p><code>SELECT 列名 FROM 表名 WHERE (列名,列名) = (SELECT 列名 FROM 表名 [WHERE 条件]);</code></p></li></ul><p><em>结果是多行多列的（表子查询）</em></p><ul><li><p>查询作用</p><p>查询的结果可以作为一张虚拟表参与查询</p></li><li><p>查询语法</p><p><code>SELECT 列名 FROM 表名 [别名], (SELECT 列名 FROM 表名 [WHERE 条件] [别名] [WHERE 条件]);</code></p></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 查询年龄最高的用户姓名</span>
<span class="token keyword">SELECT</span> NAME<span class="token punctuation">,</span>age <span class="token keyword">FROM</span> <span class="token keyword">USER</span> <span class="token keyword">WHERE</span> age<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token keyword">FROM</span> <span class="token keyword">USER</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 查询张三和李四的订单信息</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> orderlist <span class="token keyword">WHERE</span> uid <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> id <span class="token keyword">FROM</span> <span class="token keyword">USER</span> <span class="token keyword">WHERE</span> NAME <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;李四&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 查询订单表中id大于4的订单信息和所属用户信息</span>
<span class="token keyword">SELECT</span>
    o<span class="token punctuation">.</span>number<span class="token punctuation">,</span>
    u<span class="token punctuation">.</span>name
<span class="token keyword">FROM</span>
    <span class="token keyword">USER</span> u
<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span>
    <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> orderlist <span class="token keyword">WHERE</span> id <span class="token operator">&gt;</span> <span class="token number">4</span><span class="token punctuation">)</span> o
<span class="token keyword">ON</span>
    u<span class="token punctuation">.</span>id<span class="token operator">=</span>o<span class="token punctuation">.</span>uid<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>自关联查询</strong></p><p>在同一张表中数据有关联性，我们可以把这张表当成多个表来查询</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 创建员工表</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> employee<span class="token punctuation">(</span>
    id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token comment">-- 员工编号</span>
    NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>           <span class="token comment">-- 员工姓名</span>
    mgr <span class="token keyword">INT</span><span class="token punctuation">,</span>                <span class="token comment">-- 上级编号</span>
    salary <span class="token keyword">DOUBLE</span>               <span class="token comment">-- 员工工资</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 添加数据</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> employee <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span> <span class="token string">&#39;孙悟空&#39;</span><span class="token punctuation">,</span> <span class="token number">1005</span><span class="token punctuation">,</span> <span class="token number">9000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token number">1002</span><span class="token punctuation">,</span> <span class="token string">&#39;猪八戒&#39;</span><span class="token punctuation">,</span> <span class="token number">1005</span><span class="token punctuation">,</span> <span class="token number">8000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token number">1003</span><span class="token punctuation">,</span> <span class="token string">&#39;沙和尚&#39;</span><span class="token punctuation">,</span> <span class="token number">1005</span><span class="token punctuation">,</span> <span class="token number">8500.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token number">1004</span><span class="token punctuation">,</span> <span class="token string">&#39;小白龙&#39;</span><span class="token punctuation">,</span> <span class="token number">1005</span><span class="token punctuation">,</span> <span class="token number">7900.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token number">1005</span><span class="token punctuation">,</span> <span class="token string">&#39;唐僧&#39;</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token number">15000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token number">1006</span><span class="token punctuation">,</span> <span class="token string">&#39;武松&#39;</span><span class="token punctuation">,</span> <span class="token number">1009</span><span class="token punctuation">,</span> <span class="token number">7600.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token number">1007</span><span class="token punctuation">,</span> <span class="token string">&#39;李逵&#39;</span><span class="token punctuation">,</span> <span class="token number">1009</span><span class="token punctuation">,</span> <span class="token number">7400.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token number">1008</span><span class="token punctuation">,</span> <span class="token string">&#39;林冲&#39;</span><span class="token punctuation">,</span> <span class="token number">1009</span><span class="token punctuation">,</span> <span class="token number">8100.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token number">1009</span><span class="token punctuation">,</span> <span class="token string">&#39;宋江&#39;</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token number">16000.00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 查询所有员工的姓名及其直接上级的姓名，没有上级的员工也需要查询</span>
<span class="token keyword">SELECT</span>
    e1<span class="token punctuation">.</span>id<span class="token punctuation">,</span>
    e1<span class="token punctuation">.</span>name<span class="token punctuation">,</span>
    e1<span class="token punctuation">.</span>mgr<span class="token punctuation">,</span>
    e2<span class="token punctuation">.</span>id<span class="token punctuation">,</span>
    e2<span class="token punctuation">.</span>name
<span class="token keyword">FROM</span>
    employee e1
<span class="token keyword">LEFT</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span>
    employee e2
<span class="token keyword">ON</span>
    e1<span class="token punctuation">.</span>mgr<span class="token operator">=</span>e2<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5、练习" tabindex="-1"><a class="header-anchor" href="#_5、练习" aria-hidden="true">#</a> 5、练习</h3><ol><li>查询用户的编号、姓名、年龄、订单编号</li><li>查询所有的用户。用户的编号、姓名、年龄、订单编号</li><li>查询所有的订单。用户的编号、姓名、年龄、订单编号</li><li>查询用户年龄大于23岁的信息。显示用户的编号、姓名、年龄、订单编号</li><li>查询张三和李四用户的信息。显示用户的编号、姓名、年龄、订单编号</li><li>查询商品分类的编号、分类名称、分类下的商品名称</li><li>查询所有的商品分类。商品分类的编号、分类名称、分类下的商品名称</li><li>查询所有的商品信息。商品分类的编号、分类名称、分类下的商品名称</li><li>查询所有的用户和所有的商品。显示用户的编号、姓名、年龄、商品名称</li><li>查询张三和李四这两个用户可以看到的商品。显示用户的编号、姓名、年龄、商品名称</li></ol><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 1.查询用户的编号、姓名、年龄、订单编号</span>
<span class="token keyword">SELECT</span> 
    u<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span>
    o<span class="token punctuation">.</span>number 
<span class="token keyword">FROM</span> 
    <span class="token keyword">USER</span> <span class="token keyword">AS</span> u 
<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> 
    orderlist <span class="token keyword">AS</span> o 
<span class="token keyword">ON</span> 
    u<span class="token punctuation">.</span>id<span class="token operator">=</span>o<span class="token punctuation">.</span>uid<span class="token punctuation">;</span>

<span class="token comment">-- 2.查询所有的用户。用户的编号、姓名、年龄、订单编号</span>
<span class="token keyword">SELECT</span>
    u<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span>
    o<span class="token punctuation">.</span>number
<span class="token keyword">FROM</span>
    <span class="token keyword">USER</span> u
<span class="token keyword">LEFT</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span>
    orderlist o
<span class="token keyword">ON</span>
    u<span class="token punctuation">.</span>id<span class="token operator">=</span>o<span class="token punctuation">.</span>uid<span class="token punctuation">;</span>

<span class="token comment">-- 3.查询所有的订单。用户的编号、姓名、年龄、订单编号</span>
<span class="token keyword">SELECT</span>
    u<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span>
    o<span class="token punctuation">.</span>number
<span class="token keyword">FROM</span>
    <span class="token keyword">USER</span> u
<span class="token keyword">RIGHT</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span>
    orderlist o
<span class="token keyword">ON</span>
    u<span class="token punctuation">.</span>id<span class="token operator">=</span>o<span class="token punctuation">.</span>uid<span class="token punctuation">;</span>

<span class="token comment">-- 4.查询用户年龄大于23岁的信息。显示用户的编号、姓名、年龄、订单编号</span>
<span class="token comment"># 方式1</span>
<span class="token keyword">SELECT</span>
    u<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span>
    o<span class="token punctuation">.</span>number
<span class="token keyword">FROM</span>
    <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">USER</span> <span class="token keyword">WHERE</span> age<span class="token operator">&gt;</span><span class="token number">23</span><span class="token punctuation">)</span> u<span class="token punctuation">,</span>
    orderlist o
<span class="token keyword">WHERE</span>
    u<span class="token punctuation">.</span>id<span class="token operator">=</span>o<span class="token punctuation">.</span>uid<span class="token punctuation">;</span>
<span class="token comment"># 方式2</span>
<span class="token keyword">SELECT</span>
    u<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span>
    o<span class="token punctuation">.</span>number
<span class="token keyword">FROM</span>
    <span class="token keyword">USER</span> u<span class="token punctuation">,</span>
    orderlist o
<span class="token keyword">WHERE</span>
    u<span class="token punctuation">.</span>id<span class="token operator">=</span>o<span class="token punctuation">.</span>uid
    <span class="token operator">AND</span>
    u<span class="token punctuation">.</span>age <span class="token operator">&gt;</span> <span class="token number">23</span><span class="token punctuation">;</span>


<span class="token comment">-- 5.查询张三和李四用户的信息。显示用户的编号、姓名、年龄、订单编号</span>
<span class="token comment"># 方式1</span>
<span class="token keyword">SELECT</span>
    u<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span>
    o<span class="token punctuation">.</span>number
<span class="token keyword">FROM</span>
    <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">USER</span> <span class="token keyword">WHERE</span> NAME <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;李四&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> u<span class="token punctuation">,</span>
    orderlist o
<span class="token keyword">WHERE</span>
    u<span class="token punctuation">.</span>id<span class="token operator">=</span>o<span class="token punctuation">.</span>uid<span class="token punctuation">;</span>
<span class="token comment"># 方式2</span>
<span class="token keyword">SELECT</span>
    u<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span>
    o<span class="token punctuation">.</span>number
<span class="token keyword">FROM</span>
    <span class="token keyword">USER</span> u<span class="token punctuation">,</span>
    orderlist o
<span class="token keyword">WHERE</span>
    u<span class="token punctuation">.</span>id<span class="token operator">=</span>o<span class="token punctuation">.</span>uid
    <span class="token operator">AND</span>
    u<span class="token punctuation">.</span>name <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;李四&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
<span class="token comment">-- 6.查询商品分类的编号、分类名称、分类下的商品名称</span>
<span class="token comment"># 方式1</span>
<span class="token keyword">SELECT</span>
    c<span class="token punctuation">.</span>id<span class="token punctuation">,</span>
    c<span class="token punctuation">.</span>name<span class="token punctuation">,</span>
    p<span class="token punctuation">.</span>name
<span class="token keyword">FROM</span>
    category c
<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span>
    product p
<span class="token keyword">ON</span>
    c<span class="token punctuation">.</span>id<span class="token operator">=</span>p<span class="token punctuation">.</span>cid<span class="token punctuation">;</span>
<span class="token comment"># 方式2</span>
<span class="token keyword">SELECT</span>
    c<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span>
    p<span class="token punctuation">.</span>name
<span class="token keyword">FROM</span>
    category c<span class="token punctuation">,</span>
    product p
<span class="token keyword">WHERE</span>
    c<span class="token punctuation">.</span>id<span class="token operator">=</span>p<span class="token punctuation">.</span>cid<span class="token punctuation">;</span>

<span class="token comment">-- 7.查询所有的商品分类。商品分类的编号、分类名称、分类下的商品名称</span>
<span class="token keyword">SELECT</span>
    c<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span>
    p<span class="token punctuation">.</span>name
<span class="token keyword">FROM</span>
    category c
<span class="token keyword">LEFT</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span>
    product p
<span class="token keyword">ON</span>
    c<span class="token punctuation">.</span>id<span class="token operator">=</span>p<span class="token punctuation">.</span>cid<span class="token punctuation">;</span>

<span class="token comment">-- 8.查询所有的商品信息。商品分类的编号、分类名称、分类下的商品名称</span>
<span class="token keyword">SELECT</span>
    c<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span>
    p<span class="token punctuation">.</span>name
<span class="token keyword">FROM</span>
    category c
<span class="token keyword">RIGHT</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span>
    product p
<span class="token keyword">ON</span>
    c<span class="token punctuation">.</span>id<span class="token operator">=</span>p<span class="token punctuation">.</span>cid<span class="token punctuation">;</span>

<span class="token comment">-- 9.查询所有的用户和所有的商品。显示用户的编号、姓名、年龄、商品名称</span>
<span class="token keyword">SELECT</span>
    u<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span>
    p<span class="token punctuation">.</span>name
<span class="token keyword">FROM</span>
    <span class="token keyword">USER</span> u<span class="token punctuation">,</span>
    product p<span class="token punctuation">,</span>
    us_pro up
<span class="token keyword">WHERE</span>
    up<span class="token punctuation">.</span>uid<span class="token operator">=</span>u<span class="token punctuation">.</span>id
    <span class="token operator">AND</span>
    up<span class="token punctuation">.</span>pid<span class="token operator">=</span>p<span class="token punctuation">.</span>id<span class="token punctuation">;</span>

<span class="token comment">-- 10.查询张三和李四这两个用户可以看到的商品。显示用户的编号、姓名、年龄、商品名称</span>
<span class="token keyword">SELECT</span>
    u<span class="token punctuation">.</span>id<span class="token punctuation">,</span>
    u<span class="token punctuation">.</span>name<span class="token punctuation">,</span>
    u<span class="token punctuation">.</span>age<span class="token punctuation">,</span>
    p<span class="token punctuation">.</span>name
<span class="token keyword">FROM</span>
    <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">USER</span> <span class="token keyword">WHERE</span> NAME <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;李四&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> u<span class="token punctuation">,</span>
    product p<span class="token punctuation">,</span>
    us_pro up
<span class="token keyword">WHERE</span>
    up<span class="token punctuation">.</span>uid<span class="token operator">=</span>u<span class="token punctuation">.</span>id
    <span class="token operator">AND</span>
    up<span class="token punctuation">.</span>pid<span class="token operator">=</span>p<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四、事务" tabindex="-1"><a class="header-anchor" href="#四、事务" aria-hidden="true">#</a> 四、事务</h2><p>事务：一条或多条SQL语句组成一个执行单元，其特点是这个单元要么同时成功要么同时失败</p><ul><li>单元中的每条SQL语句都相互依赖，形成一个整体</li><li>如果某条SQL语句失败或者出现错误，那么这个单元就会撤回到事务最初的状态</li><li>如果单元中所有的SQL语句都执行成功，则事务就顺利执行</li></ul><h3 id="_1、基本使用" tabindex="-1"><a class="header-anchor" href="#_1、基本使用" aria-hidden="true">#</a> 1、基本使用</h3><ul><li><p>开启事务</p><p><code>START TRANSACTION;</code>或者<code>BEGIN;</code></p></li><li><p>回滚事务</p><p><code>ROLLBACK;</code></p></li><li><p>提交事务</p><p><code>COMMIT;</code></p></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 创建db8数据库</span>
<span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> db8<span class="token punctuation">;</span>

<span class="token comment">-- 使用db8数据库</span>
<span class="token keyword">USE</span> db8<span class="token punctuation">;</span>

<span class="token comment">-- 创建账户表</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> account<span class="token punctuation">(</span>
    id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token comment">-- 账户id</span>
    NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>           <span class="token comment">-- 账户名称</span>
    money <span class="token keyword">DOUBLE</span>                <span class="token comment">-- 账户余额</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- 添加数据</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> account <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">&#39;李四&#39;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- 张三给李四转账500元</span>

<span class="token comment">-- 开启事务</span>
<span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span><span class="token punctuation">;</span>

<span class="token comment">-- 1. 张三账户-500</span>
<span class="token keyword">UPDATE</span> account <span class="token keyword">SET</span> money <span class="token operator">=</span> money <span class="token operator">-</span> <span class="token number">500</span> <span class="token keyword">WHERE</span> NAME <span class="token operator">=</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">;</span>

出错了<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token comment">-- 2.李四账户+500</span>
<span class="token keyword">UPDATE</span> account <span class="token keyword">SET</span> money <span class="token operator">=</span> money <span class="token operator">+</span> <span class="token number">500</span> <span class="token keyword">WHERE</span> NAME <span class="token operator">=</span> <span class="token string">&#39;李四&#39;</span><span class="token punctuation">;</span>

<span class="token comment">-- 回滚事务</span>
<span class="token keyword">ROLLBACK</span><span class="token punctuation">;</span>

<span class="token comment">-- 提交事务</span>
<span class="token keyword">COMMIT</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、提交方式" tabindex="-1"><a class="header-anchor" href="#_2、提交方式" aria-hidden="true">#</a> 2、提交方式</h3><ul><li><p>事务提交方式</p><ul><li>自动提交（MySQL默认）</li><li>手动提交</li></ul></li><li><p>查看事务提交方式</p><p><code>SELECT @@AUTOCOMMIT;</code></p><ul><li><p>0代表手动提交</p></li><li><p>1代表自动提交</p></li></ul></li><li><p>修改事务提交方式</p><p><code>SET @@AUTOCOMMIT = 数字;</code></p></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 查询事务提交方式</span>
<span class="token keyword">SELECT</span> @<span class="token variable">@autocommit</span><span class="token punctuation">;</span>

<span class="token comment">-- 修改事务提交方式</span>
<span class="token keyword">SET</span> @<span class="token variable">@autocommit</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">UPDATE</span> account <span class="token keyword">SET</span> money <span class="token operator">=</span> <span class="token number">2000</span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">-- 临时修改，并未提交</span>

<span class="token keyword">COMMIT</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>即使开启了事务自动提交，也可以通过手动开启事务(<code>START TRANSACTION;</code>)进行控制（开启了事务就需要手动提交或者回滚）</p></blockquote><h3 id="_3、四大特征-acid" tabindex="-1"><a class="header-anchor" href="#_3、四大特征-acid" aria-hidden="true">#</a> 3、四大特征(ACID)</h3><ul><li><p>原子性(Atomicty)</p><p>事务是不可分隔的最小操作单元，原子性指事物包含的所有操作要么全部成功，要么全部失败回滚</p><p>因此事务的操作如果成功就必须要完全应用到数据库，如果操作失败则不能对数据库有任何影响</p></li><li><p>一致性(Consistency)</p><p>一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态</p><p>也就是说一个事务执行之前和执行之后都必须处于一致性状态</p></li><li><p>隔离性(Isolcation)</p><p>隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务</p><p>不能被其他事务的操作所干扰，多个并发事务之间要相互隔离</p></li><li><p>持久性(Durability)</p><p>持久性是指一个事务一旦提交了，那么对数据库中的数据的改变就是永久性的</p><p>即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作</p></li></ul><h3 id="_4、隔离级别" tabindex="-1"><a class="header-anchor" href="#_4、隔离级别" aria-hidden="true">#</a> 4、隔离级别</h3><p>事务的隔离级别</p><ul><li>多个客户端操作时，各个客户端的事务之间应该是隔离的，相互独立的，不受影响的</li><li>而如果多个事务操作同一批数据时，就会产生不同的问题，我们需要设置不同的隔离级别来解决这些问题</li></ul><p>隔离级别分类</p><table><thead><tr><th style="text-align:left;">隔离级别</th><th style="text-align:left;">名称</th><th style="text-align:left;">会引发的问题</th></tr></thead><tbody><tr><td style="text-align:left;">read uncommitted</td><td style="text-align:left;">读未提交</td><td style="text-align:left;">脏读、不可重复读、幻读</td></tr><tr><td style="text-align:left;">read committed</td><td style="text-align:left;">读已提交</td><td style="text-align:left;">不可重复读、幻读</td></tr><tr><td style="text-align:left;">repeatable read</td><td style="text-align:left;">可重复读</td><td style="text-align:left;">幻读</td></tr><tr><td style="text-align:left;">serializable</td><td style="text-align:left;">串行化</td><td style="text-align:left;">无</td></tr></tbody></table><p>并发事务引发的问题</p><table><thead><tr><th style="text-align:left;">问题</th><th style="text-align:left;">现象</th></tr></thead><tbody><tr><td style="text-align:left;">脏读</td><td style="text-align:left;">在一个事务处理过程中读取到了另一个未提交事务中的数据，导致两次查询结果不一致</td></tr><tr><td style="text-align:left;">不可重复读</td><td style="text-align:left;">一个事务先后读取同一条记录，读取到了另一个事务中修改并已提交的数据，导致两次查询不一致</td></tr><tr><td style="text-align:left;">幻读</td><td style="text-align:left;">查询某数据不存在，准备插入此纪录，但执行插入时发现此纪录已存在，无法插入。或者查询数据不存在执行删除操作，却发现删除成功，好像出现了“幻影”</td></tr></tbody></table><ul><li><p>查询数据库隔离级别</p><p><code>SELECT @@TRANSACTION_ISOLATION;</code> 或者<code>SELECT @@TX_ISOLATION;</code>（低版本使用）</p></li><li><p>修改数据库隔离级别</p><p><code>SET [SESSION|GLOBAL] TRANSACTION ISOLATION LEVEL 级别字符串;</code></p><ul><li>SESSION：当前会话</li><li>GLOBAL：全局</li></ul></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 查询事务隔离级别</span>
<span class="token keyword">SELECT</span> @<span class="token variable">@TRANSACTION_ISOLATION</span><span class="token punctuation">;</span>

<span class="token comment">-- 修改事务隔离级别（修改后需要重新连接）</span>
<span class="token keyword">SET</span> <span class="token keyword">GLOBAL</span> <span class="token keyword">TRANSACTION</span> <span class="token keyword">ISOLATION</span> <span class="token keyword">LEVEL</span> <span class="token keyword">READ</span> <span class="token keyword">COMMITTED</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总结</p><table><thead><tr><th style="text-align:left;">序号</th><th style="text-align:left;">隔离级别</th><th style="text-align:left;">名称</th><th style="text-align:left;">脏读</th><th style="text-align:left;">不可重复读</th><th style="text-align:left;">幻读</th><th style="text-align:left;">数据库默认隔离级别</th></tr></thead><tbody><tr><td style="text-align:left;">1</td><td style="text-align:left;">read uncommitted</td><td style="text-align:left;">读未提交</td><td style="text-align:left;">是</td><td style="text-align:left;">是</td><td style="text-align:left;">是</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">2</td><td style="text-align:left;">read committed</td><td style="text-align:left;">读已提交</td><td style="text-align:left;">否</td><td style="text-align:left;">是</td><td style="text-align:left;">是</td><td style="text-align:left;">Oracle</td></tr><tr><td style="text-align:left;">3</td><td style="text-align:left;">repeatable read</td><td style="text-align:left;">可重复读</td><td style="text-align:left;">否</td><td style="text-align:left;">否</td><td style="text-align:left;">是</td><td style="text-align:left;">MySQL</td></tr><tr><td style="text-align:left;">4</td><td style="text-align:left;">serializable</td><td style="text-align:left;">串行化</td><td style="text-align:left;">否</td><td style="text-align:left;">否</td><td style="text-align:left;">否</td><td style="text-align:left;"></td></tr></tbody></table><blockquote><p>注意 ：隔离级别从小到大安全性越来越高，但是效率越来越低，所以不建议修改数据库默认的隔离级别</p></blockquote><h2 id="五、存储引擎" tabindex="-1"><a class="header-anchor" href="#五、存储引擎" aria-hidden="true">#</a> 五、存储引擎</h2><p><img src="http://images.hellocode.top/mysql体系结构.png" alt="" loading="lazy"></p><h3 id="_1、体系结构" tabindex="-1"><a class="header-anchor" href="#_1、体系结构" aria-hidden="true">#</a> 1、体系结构</h3><p><em>客户端连接</em></p><p>支持接口：支持的客户端连接，例如：C、Java、PHP等语言来连接MySQL数据库</p><p><em>第一层：网络连接层</em></p><ul><li><p>最上层是一些客户端和链接服务，主要完成一些类似于连接处理、授权认证及相关的安全方案。服务器也会为安全接入的每个客户端验证它所具有的操作权限。</p></li><li><p>连接池：管理、缓冲用户的连接，线程处理等需要缓存的需求</p></li></ul><p><em>第二层：核心服务层</em></p><ul><li>管理服务和工具：系统的管理和控制工具，例如备份恢复、复制、集群等</li><li>SQL接口：接受SQL命令，并且返回查询结果</li><li>查询解析器：验证和解析SQL命令，例如过滤条件、语法结构等</li><li>缓存：如果缓存当中有想查询的数据，则直接将缓存中的数据返回。没有的话重新查询</li></ul><p><em>第三层：存储引擎层</em></p><ul><li><p>存储引擎真正的负责了MySQL中数据的存储和提取，服务器通过API和存储引擎进行通信。不同存储引擎具有不同的功能</p></li><li><p>插件式存储引擎：管理和操作数据的一种机制，包括（存储数据、如何更新、查询数据等）</p></li></ul><p><em>第四层：系统文件层（存储层）</em></p><ul><li><p>主要是将数据存储在文件系统之上，并完成与存储引擎的交互</p></li><li><p>文件系统：配置文件、数据文件、日志文件、错误文件、二进制文件等等的保存</p></li></ul><h3 id="_2、存储引擎" tabindex="-1"><a class="header-anchor" href="#_2、存储引擎" aria-hidden="true">#</a> 2、存储引擎</h3><ul><li>在生活中，引擎就是整个机器运行的核心（发动机），不同的引擎具备不同的功能，应用于不同的场景之中</li><li>MySQL数据库使用不同的机制存取表文件，包括存储方式、索引技巧、锁定水平等不同的功能。这些不同的技术以及配套的功能称为存储引擎</li><li>Oracle、SQL server等数据库只有一种存储引擎。而MySQL针对不同的需求，配置不同的存储索引，就会让数据库采取不同处理数据的方式和扩展功能</li><li>MySQL支持的存储引擎有很多，常用的有三种：InnoDB、MyISAM、MEMORY</li><li>存储引擎是基于表的，而不是基于库的，所以存储引擎也可称为表类型</li></ul><p><strong>InnoDB</strong></p><ul><li>InnoDB是一种兼顾高可靠性和高性能的通用存储引擎，在MySQL 5.5之后，InnoDB是默认的MySQL存储引擎</li></ul><p>特点</p><ul><li>DML操作遵循ACID模型，支持<em>事务</em></li><li><em>行级锁</em>，提高并发访问性能</li><li><em>支持外键</em> FOREIGN KEY 约束，保证数据的完整性和正确性</li></ul><p>文件</p><ul><li><code>xxx.ibd</code>：xxx代表的是表名，innoDB引擎的每张表都会对应这样一个表空间文件，存储该表的表结构（frm、sdi）、数据和索引</li><li>参数：innodb_file_per_table</li></ul><p>逻辑存储结构</p><p><img src="http://images.hellocode.top/ee904c6679644c3c8a03bebba542f21b.png" alt="在这里插入图片描述" loading="lazy"></p><p><strong>MyISAM</strong></p><ul><li>MyISAM是MySQL早期的默认存储引擎</li><li>特点 <ul><li>不支持事务，不支持外键</li><li>支持表锁，不支持行锁</li><li>访问速度快</li></ul></li><li>文件 <ul><li><code>xxx.sdi</code>：存储表结构信息</li><li><code>xxx.MYD</code>：存储数据</li><li><code>xxx.MYI</code>：存储索引</li></ul></li></ul><p><strong>Memory</strong></p><ul><li>Memory引擎的表数据是存储在内存中的，由于受到硬件问题或断电问题的影响，只能将这些表作为临时表或缓存使用</li><li>特点 <ul><li>内存存储，访问速度快</li><li>hash索引（默认）</li></ul></li><li>文件 <ul><li><code>xxx.sdi</code>：存储表结构信息</li></ul></li></ul><p><strong>特性对比</strong></p><table><thead><tr><th>特点</th><th>InnoDB</th><th>MyISAM</th><th>Memory</th></tr></thead><tbody><tr><td>存储限制</td><td>64TB</td><td>有</td><td>有</td></tr><tr><td>事务安全</td><td><em>支持</em></td><td>-</td><td>-</td></tr><tr><td>锁机制</td><td><em>行锁</em></td><td>表锁</td><td>表锁</td></tr><tr><td>B+tree索引</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>Hash索引</td><td>-</td><td>-</td><td>支持</td></tr><tr><td>全文索引</td><td>支持（5.6版本之后）</td><td>支持</td><td>-</td></tr><tr><td>空间使用</td><td>高</td><td>低</td><td>N/A</td></tr><tr><td>内存使用</td><td>高</td><td>低</td><td>中等</td></tr><tr><td>批量插入速度</td><td>低</td><td>高</td><td>高</td></tr><tr><td>支持外键</td><td><em>支持</em></td><td>-</td><td>-</td></tr></tbody></table><h3 id="_3、基本操作" tabindex="-1"><a class="header-anchor" href="#_3、基本操作" aria-hidden="true">#</a> 3、基本操作</h3><ul><li>查询数据库支持的存储引擎</li></ul><p><code>SHOW ENGINES;</code></p><ul><li>查询某个数据库中所有数据表的存储引擎</li></ul><p><code>SHOW TABLE STATUS FROM 数据库名称;</code></p><ul><li>查询某个数据库中某个数据表的存储索引</li></ul><p><code>SHOW TABLE STATUS FROM 数据库名称 WHERE NAME = &#39;数据表名称&#39;;</code></p><ul><li><p>创建数据表，指定存储引擎</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> 表名<span class="token punctuation">(</span>
	列名 数据类型 <span class="token punctuation">[</span><span class="token keyword">COMMENT</span> 字段注释<span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    列名 数据类型 <span class="token punctuation">[</span><span class="token keyword">COMMENT</span> 字段注释<span class="token punctuation">]</span>
<span class="token punctuation">)</span><span class="token keyword">ENGINE</span> <span class="token operator">=</span> 引擎名称 <span class="token punctuation">[</span><span class="token keyword">COMMENT</span> 表注释<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>修改数据表的存储引擎</p><p><code>ALTER TABLE 表名 ENGINE = 引擎名称;</code></p></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 查询数据库支持的存储引擎</span>
<span class="token keyword">SHOW</span> ENGINES<span class="token punctuation">;</span>

<span class="token comment">-- 查询db4数据库所有表的存储引擎</span>
<span class="token keyword">SHOW</span> <span class="token keyword">TABLE</span> <span class="token keyword">STATUS</span> <span class="token keyword">FROM</span> db4<span class="token punctuation">;</span>

<span class="token comment">-- 查看db4数据库中category表的存储引擎</span>
<span class="token keyword">SHOW</span> <span class="token keyword">TABLE</span> <span class="token keyword">STATUS</span> <span class="token keyword">FROM</span> db4 <span class="token keyword">WHERE</span> NAME <span class="token operator">=</span> <span class="token string">&#39;category&#39;</span><span class="token punctuation">;</span>

<span class="token comment">-- 创建数据表并指定存储引擎</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> engine_test<span class="token punctuation">(</span>
	id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>
	NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token keyword">ENGINE</span> <span class="token operator">=</span> MYISAM<span class="token punctuation">;</span>

<span class="token keyword">SHOW</span> <span class="token keyword">TABLE</span> <span class="token keyword">STATUS</span> <span class="token keyword">FROM</span> db4 <span class="token keyword">WHERE</span> NAME <span class="token operator">=</span> <span class="token string">&#39;engine_test&#39;</span><span class="token punctuation">;</span>

<span class="token comment">-- 修改数据表的存储引擎</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> engine_test <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">INNODB</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4、存储引擎的选择" tabindex="-1"><a class="header-anchor" href="#_4、存储引擎的选择" aria-hidden="true">#</a> 4、存储引擎的选择</h3><p>在选择存储引擎时，应该根据应用系统的特点选择合适的存储引擎。对于复杂的应用系统，还可以根据实际情况选择多种存储引擎进行组合</p><ul><li>MyISAM <ul><li>特点：不支持事务和外键操作。读取速度快，节约资源</li><li>使用场景：以查询操作为主，只有很少的更新和删除操作，并且对事务的完整性、并发性要求不是很高</li></ul></li><li><em>InnoDB</em><ul><li>特点：MySQL的默认存储引擎，支持事务和外键操作</li><li>使用场景：对事务的完整性有比较高的要求，在并发条件下要求数据的一致性，读写频繁的操作</li></ul></li><li>MEMORY <ul><li>特点：将所有数据保存在内存中，在需要快速定位记录和其他类似数据环境下，可以提供更快的访问</li><li>使用场景：通常用于更新不太频繁的小表，用来快速得到访问的结果，用于临时表及缓存</li></ul></li></ul><p><strong>总结</strong> ：针对不同的需求场景，来选择最适合的存储引擎即可。如果不确定，则使用默认的存储引擎</p><p><strong>扩展：一个SQL语句在MySQL中的整体流程</strong></p><p>用户使用mysql查询的一个整体流程如下：</p><p><img src="http://images.hellocode.top/20210126212911166.png" alt="在这里插入图片描述" loading="lazy"></p><p>简化版：</p><p><img src="http://images.hellocode.top/20210130005455679.png" alt="在这里插入图片描述" loading="lazy"></p><h2 id="六、索引" tabindex="-1"><a class="header-anchor" href="#六、索引" aria-hidden="true">#</a> 六、索引</h2><ul><li>MySQL索引：是帮助MySQL高效获取数据的一种数据结构（有序）。所以，索引的本质就是数据结构</li><li>在表数据之外，数据系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式指向数据，这样就可以在这些数据结构上实现高级查找算法，这种数据结构就是索引</li></ul><p>优势</p><ul><li>提高数据检索的效率，降低数据库的IO成本</li><li>通过索引列对数据进行排序，降低数据排序的成本，降低CPU的消耗</li></ul><p>劣势</p><ul><li>索引列也是要占用空间的</li><li>索引大大提高了查询效率，同时却也降低更新表的速度，如对表进行INSERT、UPDATE、DELETE时，效率更低</li></ul><h3 id="_1、索引结构" tabindex="-1"><a class="header-anchor" href="#_1、索引结构" aria-hidden="true">#</a> 1、索引结构</h3><p>MySQL的索引是在存储引擎层实现的，不同的存储引擎有不同的结构，主要包含以下几种：</p><table><thead><tr><th>索引结构</th><th>描述</th></tr></thead><tbody><tr><td><em>B+Tree索引</em></td><td>最常见的索引类型，大部分引擎都支持B+树索引</td></tr><tr><td>Hash索引</td><td>底层数据结构是用哈希表实现的, 只有精确匹配索引列的查询才有效, 不支持范围查询</td></tr><tr><td>R-tree(空间索引）</td><td>空间索引是MyISAM引擎的一个特殊索引类型，主要用于地理空间数据类型，通常使用较少</td></tr><tr><td>Full-text(全文 索引)</td><td>是一种通过建立倒排索引,快速匹配文档的方式。类似于 Lucene,Solr,ES</td></tr></tbody></table><p>上述是MySQL中所支持的所有的索引结构，接下来，我们再来看看不同的存储引擎对于索引结构的支持情况。</p><table><thead><tr><th>索引</th><th>InnoDB</th><th>MyISAM</th><th>Memory</th></tr></thead><tbody><tr><td>B+tree索引</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>Hash 索引</td><td>不支持</td><td>不支持</td><td>支持</td></tr><tr><td>R-tree 索引</td><td>不支持</td><td>支持</td><td>不支持</td></tr><tr><td>Full-text</td><td>5.6版本之后支持</td><td>支持</td><td>不支持</td></tr></tbody></table><blockquote><p>注意： 我们平常所说的索引，如果没有特别指明，都是指B+树结构组织的索引</p></blockquote><p><strong>磁盘存储</strong></p><ul><li>系统从磁盘读取数据到内存时是以磁盘块（block）为基本单位的</li><li>位于同一个磁盘块中的数据会被一次性读取出来，而不是需要什么取什么</li><li>InnoDB 存储引擎中有页（page）的概念，页是其磁盘管理的最小单位。InnoDB存储引擎中默认每个页的大小为 16 KB</li><li>InnoDB 引擎将若干个地址连接磁盘块，以此来达到页的大小 16 KB，在查询数据时如果一个页中的每条数据都能有助于定位数据记录的位置，这将会减少磁盘 I/O 次数，提高查询效率</li></ul><p><strong>二叉树</strong></p><p>假如说MySQL的索引结构采用二叉树的数据结构，比较理想的结构如下：</p><p><img src="http://images.hellocode.top/3074738-20230117155736188-1164604305.png" alt="image" loading="lazy"></p><p>如果主键是顺序插入的，则会形成一个单向链表，结构如下：</p><p><img src="http://images.hellocode.top/3074738-20230117155817609-987529761.png" alt="image" loading="lazy"></p><p>所以，如果选择二叉树作为索引结构，会存在以下缺点：</p><ul><li>顺序插入时，会形成一个链表，查询性能大大降低。</li><li>大数据量情况下，层级较深，检索速度慢。</li></ul><p>此时大家可能会想到，我们可以选择红黑树，红黑树是一颗自平衡二叉树，那这样即使是顺序插入数据，最终形成的数据结构也是一颗平衡的二叉树,结构如下:</p><p><img src="http://images.hellocode.top/3074738-20230117155949172-1962601829.png" alt="image" loading="lazy"></p><p>但是，即使如此，由于红黑树也是一颗二叉树，所以也会存在一个缺点：</p><ul><li>大数据量情况下，层级较深，检索速度慢。</li></ul><p>所以，在MySQL的索引结构中，并没有选择二叉树或者红黑树，而选择的是B+Tree，那么什么是B+Tree呢？在详解B+Tree之前，先来介绍一个B-Tree</p><p><strong>B-Tree</strong></p><p>B-Tree，B树是一种<em>多路平衡查找树</em>，相对于二叉树，B树每个节点可以有多个分支，即多叉</p><p>以一颗最大度数（max-degree）为5(5阶)的b-tree为例，那这个B树每个节点最多存储4个key，5个指针：</p><p><img src="http://images.hellocode.top/3074738-20230117160227967-1363352775.png" alt="image" loading="lazy"></p><blockquote><p>说明: 树的度数指的是一个节点的子节点个数</p></blockquote><p>我们可以通过一个数据结构可视化的网站来简单演示一下。</p>`,232),r={href:"https://www.cs.usfca.edu/~galles/visualization/BTree.html",target:"_blank",rel:"noopener noreferrer"},d=e('<p><img src="http://images.hellocode.top/3074738-20230117160449477-1845173373.png" alt="image" loading="lazy"></p><p><em>特点：</em></p><ul><li>5阶的B树，每一个节点最多存储4个key，对应5个指针。</li><li>一旦节点存储的key数量到达5，就会裂变，中间元素向上分裂。</li><li>在B树中，非叶子节点和叶子节点都会存放数据</li></ul><p><strong>B+Tree</strong></p><p>B+Tree是B-Tree的变种，我们以一颗最大度数（max-degree）为4（4阶）的b+tree为例，来看一下其结构示意图：</p><p><img src="http://images.hellocode.top/3074738-20230117160637859-759350956.png" alt="image" loading="lazy"> 我们可以看到，两部分：</p><ul><li>绿色框框起来的部分，是索引部分，仅仅起到索引数据的作用，不存储数据。</li><li>红色框框起来的部分，是数据存储部分，在其叶子节点中要存储具体的数据。</li></ul><p>我们可以通过一个数据结构可视化的网站来简单演示一下。</p>',8),k={href:"https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html",target:"_blank",rel:"noopener noreferrer"},m=e(`<p><img src="http://images.hellocode.top/3074738-20230117161057956-1764710826.png" alt="image" loading="lazy"></p><p><em>最终我们看到，B+Tree 与 B-Tree相比，主要有以下三点区别：</em></p><ul><li>所有的数据都会出现在叶子节点</li><li>叶子节点形成一个单向链表。</li><li>非叶子节点仅仅起到索引数据作用，具体的数据都是在叶子节点存放的</li></ul><p>上述我们所看到的结构是标准的B+Tree的数据结构，接下来，我们再来看看MySQL中优化之后的B+Tree</p><p>MySQL索引数据结构对经典的B+Tree进行了优化。在原B+Tree的基础上，增加一个指向相邻叶子节点的链表指针，就形成了带有顺序指针的B+Tree，提高区间访问的性能，利于排序</p><p><img src="http://images.hellocode.top/3074738-20230117161312134-813150726.png" alt="image" loading="lazy"></p><p><strong>Hash</strong></p><p>MySQL中除了支持B+Tree索引，还支持一种索引类型Hash索引</p><p>哈希索引就是采用一定的hash算法，将键值换算成新的hash值，映射到对应的槽位上，然后存储在hash表中</p><p><img src="http://images.hellocode.top/3074738-20230117161442722-1181075033.png" alt="image" loading="lazy"></p><p>如果两个(或多个)键值，映射到一个相同的槽位上，他们就产生了hash冲突（也称为hash碰撞），可以通过链表来解决</p><p><img src="http://images.hellocode.top/3074738-20230117161521042-1867114815.png" alt="image" loading="lazy"><em>特点：</em></p><ul><li>Hash索引只能用于对等比较(=，in)，不支持范围查询（between，&gt;，&lt; ，...）</li><li>无法利用索引完成排序操作</li><li>查询效率高，通常(不存在hash冲突的情况)只需要一次检索就可以了，效率通常要高于B+tree索引</li></ul><blockquote><p>在MySQL中，支持hash索引的是Memory存储引擎。 而InnoDB中具有自适应hash功能，hash索引是InnoDB存储引擎根据B+Tree索引在指定条件下自动构建的。</p></blockquote><p><strong>为什么InnoDB存储引擎选择使用B+tree索引结构?</strong></p><ul><li>相对于二叉树，层级更少，搜索效率高</li><li>对于B-tree，无论是叶子节点还是非叶子节点，都会保存数据，这样导致一页中存储的键值减少，指针跟着减少，要同样保存大量数据，只能增加树的高度，导致性能降低</li><li>相对Hash索引，B+tree支持范围匹配及排序操作</li></ul><h3 id="_2、索引分类" tabindex="-1"><a class="header-anchor" href="#_2、索引分类" aria-hidden="true">#</a> 2、索引分类</h3><p>在MySQL数据库，将索引的具体类型主要分为以下几类：主键索引、唯一索引、常规索引、全文索引。</p><table><thead><tr><th>分类</th><th>含义</th><th>特点</th><th>关键字</th></tr></thead><tbody><tr><td>主键索引</td><td>针对于表中主键创建的索引</td><td>默认自动创建, 只能有一个</td><td>PRIMARY</td></tr><tr><td>唯一索引</td><td>避免同一个表中某数据列中的值重复</td><td>可以有多个</td><td>UNIQUE</td></tr><tr><td>常规索引</td><td>快速定位特定数据</td><td>可以有多个</td><td></td></tr><tr><td>全文索引</td><td>全文索引查找的是文本中的关键词，而不是比较索引中的值</td><td>可以有多个</td><td>FULLTEXT</td></tr></tbody></table><p>而在在InnoDB存储引擎中，根据索引的存储形式，又可以分为以下两种：</p><table><thead><tr><th>分类</th><th>含义</th><th>特点</th></tr></thead><tbody><tr><td>聚集索引(Clustered Index)</td><td>将数据存储与索引放到了一块，索引结构的叶子节点保存了行数据</td><td>必须有,而且只有一个</td></tr><tr><td>二级索引(Secondary Index)</td><td>将数据与索引分开存储，索引结构的叶子节点关联的是对应的主键</td><td>可以存在多个</td></tr></tbody></table><p>聚集索引选取规则:</p><ul><li>如果存在主键，主键索引就是聚集索引</li><li>如果不存在主键，将使用第一个唯一（UNIQUE）索引作为聚集索引。</li><li>如果表没有主键，或没有合适的唯一索引，则InnoDB会自动生成一个rowid作为隐藏的聚集索引。</li></ul><p>聚集索引和二级索引的具体结构如下：</p><p><img src="http://images.hellocode.top/3074738-20230117164616411-481043974.png" alt="image" loading="lazy"></p><ul><li>聚集索引的叶子节点下挂的是这一行的数据 。</li><li>二级索引的叶子节点下挂的是该字段值对应的主键值。</li></ul><p>接下来，我们来分析一下，当我们执行如下的SQL语句时，具体的查找过程是什么样子的。</p><p><img src="http://images.hellocode.top/3074738-20230117164801249-620310463.png" alt="image" loading="lazy"></p><p>具体过程如下:</p><ol><li>由于是根据name字段进行查询，所以先根据name=&#39;Arm&#39;到name字段的二级索引中进行匹配查找。但是在二级索引中只能查找到 Arm对应的主键值10。</li><li>由于查询返回的数据是*，所以此时，还需要根据主键值10，到聚集索引中查找10对应的记录，最终找到10对应的行row。</li><li>最终拿到这一行的数据，直接返回即可。</li></ol><p><em>回表查询：</em> 这种先到二级索引中查找数据，找到主键值，然后再到聚集索引中根据主键值，获取数据的方式，就称之为回表查询</p><p><strong>思考题</strong></p><p><em>题一：</em> 以下两条SQL语句，那个执行效率高? 为什么?</p><p>A. <code>select * from user where id = 10 ;</code> B. <code>select * from user where name = &#39;Arm&#39; ;</code></p><blockquote><p>备注: id为主键，name字段创建的有索引；</p></blockquote><p>解答：</p><ul><li><p>A语句的执行性能要高于B语句。</p></li><li><p>因为A语句直接走聚集索引，直接返回数据。 而B语句需要先查询name字段的二级索引，然后再查询聚集索引，也就是需要进行回表查询</p></li></ul><p><em>题二：</em></p><p>InnoDB主键索引的B+tree高度为多高呢?</p><p><img src="http://images.hellocode.top/3074738-20230117165126470-127538315.png" alt="image" loading="lazy"></p><p>解答：</p><p>假设:一行数据大小为1k，一页中可以存储16行这样的数据。InnoDB的指针占用6个字节的空间，主键即使为bigint，占用字节数为8</p><ul><li><p>高度为2：</p><p><code>n * 8 + (n + 1) * 6 = 16*1024</code>,算出n约为 1170（n代表key的个数）</p><p><code>1171* 16 = 18736</code>,也就是说，如果树的高度为2，则可以存储 18000 多条记录</p></li><li><p>高度为3：</p><p><code>1171 * 1171 * 16 = 21939856</code> ,也就是说，如果树的高度为3，则可以存储 2200w 左右的记录</p></li></ul><h3 id="_3、创建和查询" tabindex="-1"><a class="header-anchor" href="#_3、创建和查询" aria-hidden="true">#</a> 3、创建和查询</h3><p>创建索引</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token punctuation">[</span><span class="token keyword">UNIQUE</span> <span class="token operator">|</span> FULLTEXT<span class="token punctuation">]</span> <span class="token keyword">INDEX</span> 索引名称
<span class="token punctuation">[</span><span class="token keyword">USING</span> 索引类型<span class="token punctuation">]</span> 	<span class="token comment">-- 默认是BTREE（实际就是B+Tree）</span>
<span class="token keyword">ON</span> 表名<span class="token punctuation">(</span>列名<span class="token punctuation">,</span>列名<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>UNIQUE 和 FULLTEXT 可选，如果不写的话就是常规索引</li><li>一个索引可以关联一个字段（单列索引），也可以关联多个字段（联合索引/组合索引）</li><li>索引名一般建议为：<code>idx_表名_字段名</code></li></ul><p>查看索引</p><ul><li><code>SHOW INDEX FROM 表名;</code></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 创建db9数据库</span>
<span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> db9<span class="token punctuation">;</span>

<span class="token comment">-- 使用db9数据库</span>
<span class="token keyword">USE</span> db9<span class="token punctuation">;</span>

<span class="token comment">-- 创建student表</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> student<span class="token punctuation">(</span>
	id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>
	NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	age <span class="token keyword">INT</span><span class="token punctuation">,</span>
	score <span class="token keyword">INT</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 添加数据</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> student <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">&#39;李四&#39;</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">95</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">&#39;王五&#39;</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">96</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">&#39;赵六&#39;</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">94</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">&#39;周七&#39;</span><span class="token punctuation">,</span><span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 为student表中的name列创建一个普通索引</span>
<span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> idx_name <span class="token keyword">ON</span> student<span class="token punctuation">(</span>NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 为student表中的age列创建一个唯一索引</span>
<span class="token keyword">CREATE</span> <span class="token keyword">UNIQUE</span> <span class="token keyword">INDEX</span> idx_age <span class="token keyword">ON</span> student<span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 查询索引（主键列自带主键索引）</span>
<span class="token keyword">SHOW</span> <span class="token keyword">INDEX</span> <span class="token keyword">FROM</span> student<span class="token punctuation">;</span>

<span class="token comment">-- 查询db4中的product表(外键列自带外键索引)</span>
<span class="token keyword">SHOW</span> <span class="token keyword">INDEX</span> <span class="token keyword">FROM</span> product<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4、添加和删除" tabindex="-1"><a class="header-anchor" href="#_4、添加和删除" aria-hidden="true">#</a> 4、添加和删除</h3><p><strong>添加索引</strong></p><ul><li><p>常规索引：<code>ALTER TABLE 表名 ADD INDEX 索引名称(列名);</code></p></li><li><p>主键索引：<code>ALTER TABLE 表名 ADD PRIMARY KEY(主键列名);</code></p></li><li><p>外键索引：<code>ALTER TABLE 表名 ADD CONSTRAINT 外键名 FOREIGN KEY (本表外键列名) REFERENCES 主表名(主键列名);</code></p></li><li><p>唯一索引：<code>ALTER TABLE 表名 ADD UNIQUE 索引名称(列名);</code></p></li><li><p>全文索引：<code>ALTER TABLE 表名 ADD FULLTEXT 索引名称(列名);</code></p></li></ul><p><strong>删除索引</strong></p><ul><li><code>DROP INDEX 索引名称 ON 表名;</code></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 为student表中score列添加唯一索引</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> student <span class="token keyword">ADD</span> <span class="token keyword">UNIQUE</span> idx_score<span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 查询student表的索引</span>
<span class="token keyword">SHOW</span> <span class="token keyword">INDEX</span> <span class="token keyword">FROM</span> student<span class="token punctuation">;</span>

<span class="token comment">-- 删除索引</span>
<span class="token keyword">DROP</span> <span class="token keyword">INDEX</span> idx_score <span class="token keyword">ON</span> student<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5、sql性能分析" tabindex="-1"><a class="header-anchor" href="#_5、sql性能分析" aria-hidden="true">#</a> 5、SQL性能分析</h3><p><strong>SQL执行频率</strong></p><p>MySQL客户端连接成功后，通过<code>show [session | global] status</code>命令可以提供服务器状态信息。通过以下指令，可以查看当前数据库的 INSERT、UPDATE、DELETE、SELECT的访问频次：</p><ul><li><p><code>SHOW GLOBAL STATUS LIKE &#39;Com_______&#39;;</code></p></li><li><p>模糊匹配，一个下划线代表一个字符(7个下划线查询结果如下)</p></li></ul><p><img src="http://images.hellocode.top/image-20230206152721108.png" alt="image-20230206152721108" loading="lazy"></p><p><strong>慢查询日志</strong></p><ul><li><p>慢查询日志记录了所有执行时间超过指定参数（long_query_time，单位：秒，默认10秒）的所有SQL语句的日志</p></li><li><p>MySQL的慢查询日志默认没有开启，需要在MySQL的配置文件（/etc/my.cnf）中配置如下信息：</p><p>查询慢查询日志是否开启：<code>show variables like &#39;slow_query_log&#39;;</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 开启MySQL慢日志查询开关</span>
<span class="token assign-left variable">slow_query_log</span><span class="token operator">=</span><span class="token number">1</span>
<span class="token comment"># 设置慢日志的时间为2s，SQL语句执行时间超过2秒，就会视为慢查询，记录慢查询日志</span>
<span class="token assign-left variable">long_query_time</span><span class="token operator">=</span><span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置完成之后，通过指令重新启动MySQL服务器进行测试，查看慢日志文件中记录的信息<code>/var/lib/mysql/主机名-slow.log</code></p></li></ul><p><strong>profile详情</strong></p><ul><li><code>show profiles</code> 能够在做SQL优化时帮助我们了解时间都耗费到哪里去了。</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">/*通过have_profiling参数，能够看到当前MySQL是否支持profile操作*/</span>
<span class="token keyword">select</span> @<span class="token variable">@have_profiling</span><span class="token punctuation">;</span>
<span class="token comment">/*通过profiling参数，能够看到当前MySQL是否开启操作*/</span>
<span class="token keyword">select</span> @<span class="token variable">@profiling</span><span class="token punctuation">;</span>
<span class="token comment">/*可以通过set语句在
session/global级别开启profiling：*/</span>
<span class="token keyword">set</span> profiling <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>开关已经打开了，接下来，我们所执行的SQL语句，都会被MySQL记录，并记录执行时间消耗到哪儿去了。 我们直接执行如下的SQL语句：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_user<span class="token punctuation">;</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_user <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_user <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">&#39;白起&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行一系列的业务SQL的操作，然后通过如下指令查看指令的执行耗时：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 查看每一条SQL的耗时基本情况</span>
<span class="token keyword">show</span> profiles<span class="token punctuation">;</span>
<span class="token comment">-- 查看指定query_id的SQL语句各个阶段的耗时情况</span>
<span class="token keyword">show</span> profile <span class="token keyword">for</span> query query_id<span class="token punctuation">;</span>
<span class="token comment">-- 查看指定query_id的SQL语句CPU的使用情况</span>
<span class="token keyword">show</span> profile cpu <span class="token keyword">for</span> query query_id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>explain</strong></p><p>explain或者desc命令获取 MySQL 如何执行 SELECT 语句的信息，包括在 SELECT 语句执行过程中表如何连接和连接的顺序。 语法:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 直接在select语句之前加上关键字 explain / desc</span>
<span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> 字段列表 <span class="token keyword">FROM</span> 表名 <span class="token keyword">WHERE</span> 条件 <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Explain 执行计划中各个字段的含义:</p><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td>id</td><td>select查询的序列号，表示查询中执行select子句或者是操作表的顺序 (id相同，执行顺序从上到下；id不同，值越大，越先执行)。</td></tr><tr><td>select_type</td><td>表示 SELECT 的类型，常见的取值有 SIMPLE（简单表，即不使用表连接 或者子查询）、PRIMARY（主查询，即外层的查询）、 UNION（UNION 中的第二个或者后面的查询语句）、 SUBQUERY（SELECT/WHERE之后包含了子查询）等</td></tr><tr><td>type</td><td>表示连接类型，性能由好到差的连接类型为NULL、system、const、 eq_ref、ref、range、 index、all 。</td></tr><tr><td>possible_key</td><td>显示可能应用在这张表上的索引，一个或多个。</td></tr><tr><td>key</td><td>实际使用的索引，如果为NULL，则没有使用索引。</td></tr><tr><td>key_len</td><td>表示索引中使用的字节数， 该值为索引字段最大可能长度，并非实际使用长 度，在不损失精确性的前提下， 长度越短越好 。</td></tr><tr><td>rows</td><td>MySQL认为必须要执行查询的行数，在innodb引擎的表中，是一个估计值， 可能并不总是准确的。</td></tr><tr><td>filtered</td><td>表示返回结果的行数占需读取行数的百分比， filtered 的值越大越好。</td></tr></tbody></table><h3 id="_6、索引使用" tabindex="-1"><a class="header-anchor" href="#_6、索引使用" aria-hidden="true">#</a> 6、索引使用</h3><h4 id="_6-1-验证索引效率" tabindex="-1"><a class="header-anchor" href="#_6-1-验证索引效率" aria-hidden="true">#</a> 6.1. 验证索引效率</h4><p>在讲解索引的使用原则之前，先通过一个简单的案例，来验证一下索引，看看是否能够通过索引来提升数据查询性能。在演示的时候，我们还是使用之前准备的一张表 tb_sku , 在这张表中准备了1000w的记录</p><p><img src="http://images.hellocode.top/3074738-20230130094124531-709584317.png" alt="image" loading="lazy"></p><p>这张表中id为主键，有主键索引，而其他字段是没有建立索引的。 我们先来查询其中的一条记录，看看里面的字段情况，执行如下SQL：<code>select * from tb_sku where id = 1\\G;</code></p><p><img src="http://images.hellocode.top/3074738-20230130094305046-76857382.png" alt="image" loading="lazy"></p><p>可以看到即使有1000w的数据,根据id进行数据查询,性能依然很快，因为主键id是有索引的。 那么接下来，我们再来根据 sn 字段进行查询，执行如下SQL：<code>SELECT * FROM tb_sku WHERE sn = &#39;100000003145001&#39;;</code></p><p><img src="http://images.hellocode.top/3074738-20230130094400840-1922128556.png" alt="image" loading="lazy"></p><p>我们可以看到根据sn字段进行查询，查询返回了一条数据，结果耗时 20.78sec，就是因为sn没有索引，而造成查询效率很低。 那么我们可以针对于sn字段，建立一个索引，建立了索引之后，我们再次根据sn进行查询，再来看一下查询耗时情况。创建索引：<code>create index idx_sku_sn on tb_sku(sn);</code></p><p><img src="http://images.hellocode.top/3074738-20230130094504942-1703910414.png" alt="image" loading="lazy"></p><p>然后再次执行相同的SQL语句，再次查看SQL的耗时。<code>SELECT * FROM tb_sku WHERE sn = &#39;100000003145001&#39;;</code></p><p><img src="http://images.hellocode.top/3074738-20230130094548738-1941078169.png" alt="image" loading="lazy"></p><p>我们明显会看到，sn字段建立了索引之后，查询性能大大提升。建立索引前后，查询耗时都不是一个数量级的。</p><h4 id="_6-2-最左前缀法则" tabindex="-1"><a class="header-anchor" href="#_6-2-最左前缀法则" aria-hidden="true">#</a> 6.2. 最左前缀法则</h4><p>如果索引了多列（联合索引），要遵守最左前缀法则。最左前缀法则指的是查询从索引的最左列开始，并且不跳过索引中的列。如果跳跃某一列，索引将会部分失效(后面的字段索引失效)。</p><p>以 tb_user 表为例，我们先来查看一下之前 tb_user 表所创建的索引。</p><p><img src="http://images.hellocode.top/3074738-20230130094702728-1038839387.png" alt="image" loading="lazy"></p><p>在 tb_user 表中，有一个联合索引，这个联合索引涉及到三个字段，顺序分别为：profession，age，status。 对于最左前缀法则指的是，查询时，最左变的列，也就是profession必须存在，否则索引全部失效。而且中间不能跳过某一列，否则该列后面的字段索引将失效。 接下来，我们来演示几组案例，看一下具体的执行计划：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_user <span class="token keyword">where</span> profession <span class="token operator">=</span> <span class="token string">&#39;软件工程&#39;</span> <span class="token operator">and</span> age <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">and</span> <span class="token keyword">status</span> <span class="token operator">=</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://images.hellocode.top/3074738-20230130094902569-590866884.png" alt="image" loading="lazy"></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_user <span class="token keyword">where</span> profession <span class="token operator">=</span> <span class="token string">&#39;软件工程&#39;</span> <span class="token operator">and</span> age <span class="token operator">=</span> <span class="token number">31</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://images.hellocode.top/3074738-20230130095007649-674600282.png" alt="image" loading="lazy"></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_user <span class="token keyword">where</span> profession <span class="token operator">=</span> <span class="token string">&#39;软件工程&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://images.hellocode.top/3074738-20230130095047654-1698244112.png" alt="image" loading="lazy"></p><p>以上的这三组测试中，我们发现只要联合索引最左边的字段 profession存在，索引就会生效，只不过索引的长度不同。 而且由以上三组测试，我们也可以推测出profession字段索引长度为47、age字段索引长度为2、status字段索引长度为5。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_user <span class="token keyword">where</span> age <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">and</span> <span class="token keyword">status</span> <span class="token operator">=</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://images.hellocode.top/3074738-20230130095224245-1714190879.png" alt="image" loading="lazy"></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_user <span class="token keyword">where</span> <span class="token keyword">status</span> <span class="token operator">=</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://images.hellocode.top/3074738-20230130095258419-416939138.png" alt="image" loading="lazy"></p><p>而通过上面的这两组测试，我们也可以看到索引并未生效，原因是因为不满足最左前缀法则，联合索引最左边的列profession不存在</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_user <span class="token keyword">where</span> profession <span class="token operator">=</span> <span class="token string">&#39;软件工程&#39;</span> <span class="token operator">and</span> <span class="token keyword">status</span> <span class="token operator">=</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://images.hellocode.top/image-20230206170101577.png" alt="image-20230206170101577" loading="lazy"></p><p>上述的SQL查询时，存在profession字段，最左边的列是存在的，索引满足最左前缀法则的基本条件。但是查询时，跳过了age这个列，所以后面的列索引是不会使用的，也就是索引部分生效，所以索引的长度就是47。</p><p><em>思考题：</em></p><p>当执行SQL语句: <code>explain select * from tb_user where age = 31 and status = &#39;0&#39; and profession = &#39;软件工程&#39;；</code>时，是否满足最左前缀法则，走不走上述的联合索引，索引长度？</p><p><img src="http://images.hellocode.top/3074738-20230130095548491-580900743.png" alt="image" loading="lazy"></p><p>可以看到，是完全满足最左前缀法则的，索引长度54，联合索引是生效的。</p><blockquote><p>注意 ： 最左前缀法则中指的最左边的列，是指在查询时，联合索引的最左边的字段(即是第一个字段)必须存在，与我们编写SQL时，条件编写的先后顺序无关。</p></blockquote><h4 id="_6-3-范围查询" tabindex="-1"><a class="header-anchor" href="#_6-3-范围查询" aria-hidden="true">#</a> 6.3. 范围查询</h4><p>联合索引中，出现范围查询(&gt;,&lt;)，范围查询右侧的列索引失效。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_user <span class="token keyword">where</span> profession <span class="token operator">=</span> <span class="token string">&#39;软件工程&#39;</span> <span class="token operator">and</span> age <span class="token operator">&gt;</span> <span class="token number">30</span> <span class="token operator">and</span> <span class="token keyword">status</span> <span class="token operator">=</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://images.hellocode.top/3074738-20230130095757863-1472854546.png" alt="image" loading="lazy"></p><p>当范围查询使用&gt; 或 &lt; 时，走联合索引了，但是索引的长度为49，就说明范围查询右边的status字段是没有走索引的。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_user <span class="token keyword">where</span> profession <span class="token operator">=</span> <span class="token string">&#39;软件工程&#39;</span> <span class="token operator">and</span> age <span class="token operator">&gt;=</span> <span class="token number">30</span> <span class="token operator">and</span> <span class="token keyword">status</span> <span class="token operator">=</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://images.hellocode.top/3074738-20230130095859859-1656148327.png" alt="image" loading="lazy"></p><p>当范围查询使用&gt;= 或 &lt;= 时，走联合索引了，但是索引的长度为54，就说明所有的字段都是走索引的。</p><p>所以，在业务允许的情况下，尽可能的使用类似于 &gt;= 或 &lt;= 这类的范围查询，而避免使用 &gt; 或 &lt; 。</p><h4 id="_6-4-索引失效情况" tabindex="-1"><a class="header-anchor" href="#_6-4-索引失效情况" aria-hidden="true">#</a> 6.4. 索引失效情况</h4><p><strong>索引列运算</strong></p><p>不要在索引列上进行运算操作， 索引将失效。</p><p>在tb_user表中，除了前面介绍的联合索引之外，还有一个索引，是phone字段的单列索引。</p><p><img src="http://images.hellocode.top/3074738-20230130100031580-823950412.png" alt="image" loading="lazy"></p><p>A. 当根据phone字段进行等值匹配查询时, 索引生效。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_user <span class="token keyword">where</span> phone <span class="token operator">=</span> <span class="token string">&#39;17799990015&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://images.hellocode.top/3074738-20230130100138172-227628425.png" alt="image" loading="lazy"></p><p>B. 当根据phone字段进行函数运算操作之后，索引失效。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_user <span class="token keyword">where</span> substring<span class="token punctuation">(</span>phone<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">&#39;15&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://images.hellocode.top/3074738-20230130100223455-130764810.png" alt="image" loading="lazy"></p><p><strong>字符串不加引号</strong></p><p>字符串类型字段使用时，不加引号，索引将失效。</p><p>接下来，我们通过两组示例，来看看对于字符串类型的字段，加单引号与不加单引号的区别：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_user <span class="token keyword">where</span> profession <span class="token operator">=</span> <span class="token string">&#39;软件工程&#39;</span> <span class="token operator">and</span> age <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">and</span> <span class="token keyword">status</span> <span class="token operator">=</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_user <span class="token keyword">where</span> profession <span class="token operator">=</span> <span class="token string">&#39;软件工程&#39;</span> <span class="token operator">and</span> age <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">and</span> <span class="token keyword">status</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://images.hellocode.top/3074738-20230130100343797-38364307.png" alt="image" loading="lazy"></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_user <span class="token keyword">where</span> phone <span class="token operator">=</span> <span class="token string">&#39;17799990015&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_user <span class="token keyword">where</span> phone <span class="token operator">=</span> <span class="token number">17799990015</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://images.hellocode.top/3074738-20230130100425280-1369031728.png" alt="image" loading="lazy"></p><p>经过上面两组示例，我们会明显的发现，如果字符串不加单引号，对于查询结果，没什么影响，但是数据库存在隐式类型转换，索引将失效。</p><p><strong>模糊查询</strong></p><p>如果仅仅是尾部模糊匹配，索引不会失效。如果是头部模糊匹配，索引失效。</p><p>接下来，我们来看一下这三条SQL语句的执行效果，查看一下其执行计划：</p><p>由于下面查询语句中，都是根据profession字段查询，符合最左前缀法则，联合索引是可以生效的，我们主要看一下，模糊查询时，%加在关键字之前，和加在关键字之后的影响。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_user <span class="token keyword">where</span> profession <span class="token operator">like</span> <span class="token string">&#39;软件%&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_user <span class="token keyword">where</span> profession <span class="token operator">like</span> <span class="token string">&#39;%工程&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_user <span class="token keyword">where</span> profession <span class="token operator">like</span> <span class="token string">&#39;%工%&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://images.hellocode.top/3074738-20230130100656179-227148339.png" alt="image" loading="lazy"></p><p>经过上述的测试，我们发现，在like模糊查询中，在关键字后面加%，索引可以生效。而如果在关键字前面加了%，索引将会失效。</p><p><strong>or连接条件</strong></p><p>用or分割开的条件， 如果or前的条件中的列有索引，而后面的列中没有索引，那么涉及的索引都不会被用到。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_user <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">or</span> age <span class="token operator">=</span> <span class="token number">23</span><span class="token punctuation">;</span>
<span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_user <span class="token keyword">where</span> phone <span class="token operator">=</span> <span class="token string">&#39;17799990017&#39;</span> <span class="token operator">or</span> age <span class="token operator">=</span> <span class="token number">23</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://images.hellocode.top/3074738-20230130100817373-769378694.png" alt="image" loading="lazy"></p><p>由于age没有索引，所以即使id、phone有索引，索引也会失效。所以需要针对于age也要建立索引。</p><p>然后，我们可以对age字段建立索引。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">index</span> idx_user_age <span class="token keyword">on</span> tb_user<span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://images.hellocode.top/3074738-20230130100914909-1612014701.png" alt="image" loading="lazy"></p><p>建立了索引之后，我们再次执行上述的SQL语句，看看前后执行计划的变化。</p><p><img src="http://images.hellocode.top/3074738-20230130100943807-1965965612.png" alt="image" loading="lazy"></p><p>最终，我们发现，当or连接的条件，左右两侧字段都有索引时，索引才会生效。</p><p><strong>数据分布影响</strong></p><p>如果MySQL评估使用索引比全表更慢，则不使用索引。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_user <span class="token keyword">where</span> phone <span class="token operator">&gt;=</span> <span class="token string">&#39;17799990005&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_user <span class="token keyword">where</span> phone <span class="token operator">&gt;=</span> <span class="token string">&#39;17799990015&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://images.hellocode.top/3074738-20230130101130206-126335872.png" alt="image" loading="lazy"></p><p>经过测试我们发现，相同的SQL语句，只是传入的字段值不同，最终的执行计划也完全不一样，这是为什么呢？</p><p>就是因为MySQL在查询时，会评估使用索引的效率与走全表扫描的效率，如果走全表扫描更快，则放弃索引，走全表扫描。 因为索引是用来索引少量数据的，如果通过索引查询返回大批量的数据，则还不如走全表扫描来的快，此时索引就会失效。</p><p>接下来，我们再来看看 is null 与 is not null 操作是否走索引。</p><p>执行如下两条语句 ：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_user <span class="token keyword">where</span> profession <span class="token operator">is</span> <span class="token boolean">null</span><span class="token punctuation">;</span>
<span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_user <span class="token keyword">where</span> profession <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://images.hellocode.top/3074738-20230130101305249-196758491.png" alt="image" loading="lazy"></p><p>接下来，我们做一个操作将profession字段值全部更新为null。</p><p><img src="http://images.hellocode.top/3074738-20230130101350516-1462431768.png" alt="image" loading="lazy"></p><p>然后，再次执行上述的两条SQL，查看SQL语句的执行计划。</p><p><img src="http://images.hellocode.top/3074738-20230130101417976-1423677702.png" alt="image" loading="lazy"></p><p>最终我们看到，一模一样的SQL语句，先后执行了两次，结果查询计划是不一样的，为什么会出现这种现象，这是和数据库的数据分布有关系。查询时MySQL会评估，走索引快，还是全表扫描快，如果全表扫描更快，则放弃索引走全表扫描。 因此，is null 、is not null是否走索引，得具体情况具体分析，并不是固定的</p><h4 id="_6-5-sql提示" tabindex="-1"><a class="header-anchor" href="#_6-5-sql提示" aria-hidden="true">#</a> 6.5. SQL提示</h4><p>A. 执行SQL : <code>explain select * from tb_user where profession = &#39;软件工程&#39;;</code></p><p><img src="http://images.hellocode.top/3074738-20230130102220898-1951861704.png" alt="image" loading="lazy"></p><p>查询走了联合索引。</p><p>B. 执行SQL，创建profession的单列索引：<code>create index idx_user_pro on tb_user(profession);</code></p><p><img src="http://images.hellocode.top/3074738-20230130102309768-182083348.png" alt="image" loading="lazy"></p><p>C. 创建单列索引后，再次执行A中的SQL语句，查看执行计划，看看到底走哪个索引。</p><p><img src="http://images.hellocode.top/3074738-20230130102345556-60294664.png" alt="image" loading="lazy"></p><p>测试结果，我们可以看到，possible_keys中 idx_user_pro_age_sta,idx_user_pro 这两个索引都可能用到，最终MySQL选择了idx_user_pro_age_sta索引。这是MySQL自动选择的结果。</p><p>那么，我们能不能在查询的时候，自己来指定使用哪个索引呢？ 答案是肯定的，此时就可以借助于MySQL的SQL提示来完成。 接下来，介绍一下SQL提示。</p><p>SQL提示，是优化数据库的一个重要手段，简单来说，就是在SQL语句中加入一些人为的提示来达到优化操作的目的。</p><p>1). use index ： 建议MySQL使用哪一个索引完成此次查询（仅仅是建议，mysql内部还会再次进行评估）。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_user <span class="token keyword">use</span> <span class="token keyword">index</span><span class="token punctuation">(</span>idx_user_pro<span class="token punctuation">)</span> <span class="token keyword">where</span> profession <span class="token operator">=</span> <span class="token string">&#39;软件工程&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2). ignore index ： 忽略指定的索引。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_user <span class="token keyword">ignore</span> <span class="token keyword">index</span><span class="token punctuation">(</span>idx_user_pro<span class="token punctuation">)</span> <span class="token keyword">where</span> profession <span class="token operator">=</span> <span class="token string">&#39;软件工程&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>3). force index ： 强制使用索引。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_user <span class="token keyword">force</span> <span class="token keyword">index</span><span class="token punctuation">(</span>idx_user_pro<span class="token punctuation">)</span> <span class="token keyword">where</span> profession <span class="token operator">=</span> <span class="token string">&#39;软件工程&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>示例演示：</p><p>A. use index</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_user <span class="token keyword">use</span> <span class="token keyword">index</span><span class="token punctuation">(</span>idx_user_pro<span class="token punctuation">)</span> <span class="token keyword">where</span> profession <span class="token operator">=</span> <span class="token string">&#39;软件工程&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://images.hellocode.top/3074738-20230130102640333-397214448.png" alt="image" loading="lazy"></p><p>B. ignore index</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_user <span class="token keyword">ignore</span> <span class="token keyword">index</span><span class="token punctuation">(</span>idx_user_pro<span class="token punctuation">)</span> <span class="token keyword">where</span> profession <span class="token operator">=</span> <span class="token string">&#39;软件工程&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://images.hellocode.top/3074738-20230130102715688-1852920760.png" alt="image" loading="lazy"></p><p>C. force index</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_user <span class="token keyword">force</span> <span class="token keyword">index</span><span class="token punctuation">(</span>idx_user_pro_age_sta<span class="token punctuation">)</span> <span class="token keyword">where</span> profession <span class="token operator">=</span> <span class="token string">&#39;软件工程&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://images.hellocode.top/3074738-20230130102801954-683024326.png" alt="image" loading="lazy"></p><h4 id="_6-6-覆盖索引" tabindex="-1"><a class="header-anchor" href="#_6-6-覆盖索引" aria-hidden="true">#</a> 6.6. 覆盖索引</h4><p>尽量使用覆盖索引，减少select *。 那么什么是覆盖索引呢？ 覆盖索引是指 查询使用了索引，并且需要返回的列，在该索引中已经全部能够找到 。</p><p>接下来，我们来看一组SQL的执行计划，看看执行计划的差别，然后再来具体做一个解析。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">explain</span> <span class="token keyword">select</span> id<span class="token punctuation">,</span> profession <span class="token keyword">from</span> tb_user <span class="token keyword">where</span> profession <span class="token operator">=</span> <span class="token string">&#39;软件工程&#39;</span> <span class="token operator">and</span> age <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">and</span> <span class="token keyword">status</span> <span class="token operator">=</span> <span class="token string">&#39;0&#39;</span> <span class="token punctuation">;</span>
<span class="token keyword">explain</span> <span class="token keyword">select</span> id<span class="token punctuation">,</span>profession<span class="token punctuation">,</span>age<span class="token punctuation">,</span> <span class="token keyword">status</span> <span class="token keyword">from</span> tb_user <span class="token keyword">where</span> profession <span class="token operator">=</span> <span class="token string">&#39;软件工程&#39;</span> <span class="token operator">and</span> age <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">and</span> <span class="token keyword">status</span> <span class="token operator">=</span> <span class="token string">&#39;0&#39;</span> <span class="token punctuation">;</span>
<span class="token keyword">explain</span> <span class="token keyword">select</span> id<span class="token punctuation">,</span>profession<span class="token punctuation">,</span>age<span class="token punctuation">,</span> <span class="token keyword">status</span><span class="token punctuation">,</span> name <span class="token keyword">from</span> tb_user <span class="token keyword">where</span> profession <span class="token operator">=</span> <span class="token string">&#39;软件工程&#39;</span> <span class="token operator">and</span> age <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">and</span> <span class="token keyword">status</span> <span class="token operator">=</span> <span class="token string">&#39;0&#39;</span> <span class="token punctuation">;</span>
<span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_user <span class="token keyword">where</span> profession <span class="token operator">=</span> <span class="token string">&#39;软件工程&#39;</span> <span class="token operator">and</span> age <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">and</span> <span class="token keyword">status</span> <span class="token operator">=</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述这几条SQL的执行结果为:</p><p><img src="http://images.hellocode.top/3074738-20230130104431907-1881542110.png" alt="image" loading="lazy"></p><p>从上述的执行计划我们可以看到，这四条SQL语句的执行计划前面所有的指标都是一样的，看不出来差异。但是此时，我们主要关注的是后面的Extra，前面两天SQL的结果为 Using where; Using Index ; 而后面两条SQL的结果为: Using index condition 。</p><table><thead><tr><th>Extra</th><th>含义</th></tr></thead><tbody><tr><td>Using where; Using Index</td><td>查找使用了索引，但是需要的数据都在索引列中能找到，所以不需要回表查询数据</td></tr><tr><td>Using index condition</td><td>查找使用了索引，但是需要回表查询数据</td></tr></tbody></table><p>因为，在tb_user表中有一个联合索引 idx_user_pro_age_sta，该索引关联了三个字段profession、age、status，而这个索引也是一个二级索引，所以叶子节点下面挂的是这一行的主键id。 所以当我们查询返回的数据在 id、profession、age、status 之中，则直接走二级索引直接返回数据了。 如果超出这个范围，就需要拿到主键id，再去扫描聚集索引，再获取额外的数据了，这个过程就是回表。 而我们如果一直使用select * 查询返回所有字段值，很容易就会造成回表查询（除非是根据主键查询，此时只会扫描聚集索引）。 为了大家更清楚的理解，什么是覆盖索引，什么是回表查询，我们一起再来看下面的这组SQL的执行过程。</p><p><img src="http://images.hellocode.top/3074738-20230130104726533-2091374110.png" alt="image" loading="lazy"></p><p>id是主键，是一个聚集索引。 name字段建立了普通索引，是一个二级索引（辅助索引）。</p><p><img src="http://images.hellocode.top/3074738-20230130104813792-1835796535.png" alt="image" loading="lazy"></p><p>根据id查询，直接走聚集索引查询，一次索引扫描，直接返回数据，性能高。</p><p>C. 执行SQL：<code>selet id,name from tb_user where name = &#39;Arm&#39;;</code></p><p><img src="http://images.hellocode.top/3074738-20230130104901628-2024949168.png" alt="image" loading="lazy"></p><p>虽然是根据name字段查询，查询二级索引，但是由于查询返回在字段为 id，name，在name的二级索引中，这两个值都是可以直接获取到的，因为覆盖索引，所以不需要回表查询，性能高。</p><p>D. 执行SQL：<code>selet id,name,gender from tb_user where name = &#39;Arm&#39;;</code></p><p><img src="http://images.hellocode.top/3074738-20230130105016066-1522738758.png" alt="image" loading="lazy"></p><p>由于在name的二级索引中，不包含gender，所以，需要两次索引扫描，也就是需要回表查询，性能相对较差一点。</p><p><strong>思考题：</strong></p><p>一张表, 有四个字段(id, username, password, status), 由于数据量大, 需要对以下SQL语句进行优化, 该如何进行才是最优方案:<code>select id,username,password from tb_user where username = &#39;guoguo&#39;;</code></p><p>答案: 针对于 username, password建立联合索引, sql为: <code>create index idx_user_name_pass on tb_user(username,password);</code> 这样可以避免上述的SQL语句，在查询的过程中，出现回表查询。</p><h4 id="_6-7-前缀索引" tabindex="-1"><a class="header-anchor" href="#_6-7-前缀索引" aria-hidden="true">#</a> 6.7. 前缀索引</h4><p>当字段类型为字符串（varchar，text，longtext等）时，有时候需要索引很长的字符串，这会让索引变得很大，查询时，浪费大量的磁盘IO， 影响查询效率。此时可以只将字符串的一部分前缀，建立索引，这样可以大大节约索引空间，从而提高索引效率。</p><p>1). 语法</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">index</span> idx_xxxx <span class="token keyword">on</span> table_name<span class="token punctuation">(</span><span class="token keyword">column</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>示例:</p><p>为tb_user表的email字段，建立长度为5的前缀索引。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">index</span> idx_email_5 <span class="token keyword">on</span> tb_user<span class="token punctuation">(</span>email<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://images.hellocode.top/3074738-20230130111311140-1530431454.png" alt="image" loading="lazy"></p><p>2). 前缀长度</p><p>可以根据索引的选择性来决定，而选择性是指不重复的索引值（基数）和数据表的记录总数的比值，索引选择性越高则查询效率越高， 唯一索引的选择性是1，这是最好的索引选择性，性能也是最好的。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> email<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> tb_user <span class="token punctuation">;</span>
<span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> substring<span class="token punctuation">(</span>email<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> tb_user <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>3). 前缀索引的查询流程</p><p><img src="http://images.hellocode.top/3074738-20230130111544762-623350428.png" alt="image" loading="lazy"></p><h4 id="_6-8-单列索引与联合索引" tabindex="-1"><a class="header-anchor" href="#_6-8-单列索引与联合索引" aria-hidden="true">#</a> 6.8. 单列索引与联合索引</h4><p>单列索引：即一个索引只包含单个列。</p><p>联合索引：即一个索引包含了多个列。</p><p>我们先来看看 tb_user 表中目前的索引情况:</p><p><img src="http://images.hellocode.top/3074738-20230130111635100-1490461820.png" alt="image" loading="lazy"></p><p>在查询出来的索引中，既有单列索引，又有联合索引。</p><p>接下来，我们来执行一条SQL语句，看看其执行计划：</p><p><img src="http://images.hellocode.top/3074738-20230130111709650-1427319331.png" alt="image" loading="lazy"></p><p>通过上述执行计划我们可以看出来，在and连接的两个字段 phone、name上都是有单列索引的，但是最终mysql只会选择一个索引，也就是说，只能走一个字段的索引，此时是会回表查询的。</p><p>紧接着，我们再来创建一个phone和name字段的联合索引来查询一下执行计划。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">unique</span> <span class="token keyword">index</span> idx_user_phone_name <span class="token keyword">on</span> tb_user<span class="token punctuation">(</span>phone<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://images.hellocode.top/3074738-20230130111816521-1392925635.png" alt="image" loading="lazy"></p><p>此时，查询时，就走了联合索引，而在联合索引中包含 phone、name的信息，在叶子节点下挂的是对应的主键id，所以查询是无需回表查询的。</p><p><em>在业务场景中，如果存在多个查询条件，考虑针对于查询字段建立索引时，建议建立联合索引，而非单列索引。</em></p><p>如果查询使用的是联合索引，具体的结构示意图如下：</p><p><img src="http://images.hellocode.top/3074738-20230130111917191-1469487942.png" alt="image" loading="lazy"></p><h3 id="_7、设计原则" tabindex="-1"><a class="header-anchor" href="#_7、设计原则" aria-hidden="true">#</a> 7、设计原则</h3><ol><li>对查询频次较高，且数据量比较大的表建立索引</li><li>针对于常作为查询条件（where）、排序（order by）、分组（group by）操作的字段建立索引</li><li>尽量选择区分度高的列作为索引，尽量建立唯一索引，区分度越高，使用索引的效率越高</li><li>如果是字符串类型的字段，字段的长度较长，可以针对于字段的特点，建立前缀索引</li><li>尽量使用联合索引，减少单列索引，查询时，联合索引很多时候可以覆盖索引，节省存储空间，避免回表，提高查询效率</li><li>要控制索引的数量，索引并不是多多益善，索引越多，维护索引结构的代价也就越大，会影响增删改的效率</li><li>如果索引列不能存储NULL值，请在创建表时使用NOT NULL约束它。当优化器知道每列是否包含NULL值时，它可以更好地确定哪个索引最有效地用于查询</li></ol><h2 id="七、sql优化" tabindex="-1"><a class="header-anchor" href="#七、sql优化" aria-hidden="true">#</a> 七、SQL优化</h2><h3 id="_1、插入数据" tabindex="-1"><a class="header-anchor" href="#_1、插入数据" aria-hidden="true">#</a> 1、插入数据</h3><h4 id="_1-1-insert" tabindex="-1"><a class="header-anchor" href="#_1-1-insert" aria-hidden="true">#</a> 1.1. insert</h4><p>如果我们需要一次性往数据库表中插入多条记录，可以从以下三个方面进行优化</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">insert</span> <span class="token keyword">into</span> tb_test <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&#39;tom&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> tb_test <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&#39;cat&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> tb_test <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">&#39;jerry&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>优化方案一：批量插入数据</li></ol><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">insert</span> <span class="token keyword">into</span> tb_test <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&#39;Tom&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&#39;Cat&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">&#39;Jerry&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>优化方案二：手动控制事务</li></ol><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">start</span> <span class="token keyword">transaction</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> tb_test <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&#39;Tom&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&#39;Cat&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">&#39;Jerry&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> tb_test <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">&#39;Tom&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">&#39;Cat&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">&#39;Jerry&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> tb_test <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">&#39;Tom&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">&#39;Cat&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token string">&#39;Jerry&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">commit</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>优化方案三：主键顺序插入，性能要高于乱序插入</li></ol><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>主键乱序插入 : <span class="token number">8</span> <span class="token number">1</span> <span class="token number">9</span> <span class="token number">21</span> <span class="token number">88</span> <span class="token number">2</span> <span class="token number">4</span> <span class="token number">15</span> <span class="token number">89</span> <span class="token number">5</span> <span class="token number">7</span> <span class="token number">3</span>
主键顺序插入 : <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span> <span class="token number">15</span> <span class="token number">21</span> <span class="token number">88</span> <span class="token number">89</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-2-大批量插入数据" tabindex="-1"><a class="header-anchor" href="#_1-2-大批量插入数据" aria-hidden="true">#</a> 1.2. 大批量插入数据</h4><p>如果一次性需要插入大批量数据(比如: 几百万的记录)，使用insert语句插入性能较低，此时可以使用MySQL数据库提供的load指令进行插入。操作如下：</p><p><img src="http://images.hellocode.top/3074738-20230130153107941-196066956.png" alt="image" loading="lazy"></p><p>可以执行如下指令，将数据脚本文件中的数据加载到表结构中：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 客户端连接服务端时，加上参数 -–local-infile</span>
mysql –<span class="token operator">-</span><span class="token keyword">local</span><span class="token operator">-</span><span class="token keyword">infile</span> <span class="token operator">-</span>u root <span class="token operator">-</span>p
<span class="token comment">-- 设置全局参数local_infile为1，开启从本地加载文件导入数据的开关</span>
<span class="token keyword">set</span> <span class="token keyword">global</span> local_infile <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token comment">-- 执行load指令将准备好的数据，加载到表结构中</span>
<span class="token keyword">load</span> <span class="token keyword">data</span> <span class="token keyword">local</span> <span class="token keyword">infile</span> <span class="token string">&#39;/root/sql1.log&#39;</span> <span class="token keyword">into</span> <span class="token keyword">table</span> tb_user <span class="token keyword">fields</span> <span class="token keyword">terminated</span> <span class="token keyword">by</span> <span class="token string">&#39;,&#39;</span> <span class="token keyword">lines</span> <span class="token keyword">terminated</span> <span class="token keyword">by</span> <span class="token string">&#39;\\n&#39;</span> <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>在load时，主键顺序插入性能高于乱序插入</p></blockquote><h3 id="_2、主键优化" tabindex="-1"><a class="header-anchor" href="#_2、主键优化" aria-hidden="true">#</a> 2、主键优化</h3><h4 id="_2-1-数据组织方式" tabindex="-1"><a class="header-anchor" href="#_2-1-数据组织方式" aria-hidden="true">#</a> 2.1. 数据组织方式</h4><p>在InnoDB存储引擎中，表数据都是根据主键顺序组织存放的，这种存储方式的表称为<em>索引组织表</em>(index organized table IOT)</p><p><img src="http://images.hellocode.top/3074738-20230130153346730-1355966370.png" alt="image" loading="lazy"></p><p>行数据，都是存储在聚集索引的叶子节点上的。而我们之前也讲解过InnoDB的逻辑结构图：</p><p><img src="http://images.hellocode.top/3074738-20230130153424340-1145273795.png" alt="image" loading="lazy"></p><p>在InnoDB引擎中，数据行是记录在逻辑结构 page 页中的，而每一个页的大小是固定的，默认16K。那也就意味着， 一个页中所存储的行也是有限的，如果插入的数据行row在该页存储不小，将会存储到下一个页中，页与页之间会通过指针连接</p><h4 id="_2-2-页分裂" tabindex="-1"><a class="header-anchor" href="#_2-2-页分裂" aria-hidden="true">#</a> 2.2. 页分裂</h4><p>页可以为空，也可以填充一半，也可以填充100%。每个页包含了2-N行数据(如果一行数据过大，会行溢出)，根据主键排列</p><p>A. 主键顺序插入效果</p><p>①. 从磁盘中申请页， 主键顺序插入</p><p><img src="http://images.hellocode.top/3074738-20230130153626630-1222875507.png" alt="image" loading="lazy"></p><p>②. 第一个页没有满，继续往第一页插入</p><p><img src="http://images.hellocode.top/3074738-20230130153704666-2019246553.png" alt="image" loading="lazy"></p><p>③. 当第一个也写满之后，再写入第二个页，页与页之间会通过指针连接</p><p><img src="http://images.hellocode.top/3074738-20230130153734291-1422125529.png" alt="image" loading="lazy"></p><p>④. 当第二页写满了，再往第三页写入</p><p><img src="http://images.hellocode.top/3074738-20230130153806055-820402511.png" alt="image" loading="lazy"></p><p>B. 主键乱序插入效果</p><p>①. 加入1#,2#页都已经写满了，存放了如图所示的数据</p><p><img src="http://images.hellocode.top/3074738-20230130153842993-2089083012.png" alt="image" loading="lazy"></p><p>②. 此时再插入id为50的记录，我们来看看会发生什么现象</p><p>会再次开启一个页，写入新的页中吗？</p><p><img src="http://images.hellocode.top/3074738-20230130153914377-702257093.png" alt="image" loading="lazy"></p><p>不会。因为，索引结构的叶子节点是有顺序的。按照顺序，应该存储在47之后。</p><p><img src="http://images.hellocode.top/3074738-20230130153950337-247847286.png" alt="image" loading="lazy"></p><p>但是47所在的1#页，已经写满了，存储不了50对应的数据了。 那么此时会开辟一个新的页 3#。</p><p><img src="http://images.hellocode.top/3074738-20230130154016243-999632006.png" alt="image" loading="lazy"></p><p>但是并不会直接将50存入3#页，而是会将1#页后一半的数据，移动到3#页，然后在3#页，插入50。</p><p><img src="http://images.hellocode.top/3074738-20230130154047676-558907289.png" alt="image" loading="lazy"></p><p>移动数据，并插入id为50的数据之后，那么此时，这三个页之间的数据顺序是有问题的。 1#的下一个页，应该是3#， 3#的下一个页是2#。 所以，此时，需要重新设置链表指针。</p><p><img src="http://images.hellocode.top/3074738-20230130154125054-1644831849.png" alt="image" loading="lazy"></p><p>上述的这种现象，称之为 &quot;页分裂&quot;，是比较耗费性能的操作。</p><h4 id="_2-3-页合并" tabindex="-1"><a class="header-anchor" href="#_2-3-页合并" aria-hidden="true">#</a> 2.3. 页合并</h4><p>目前表中已有数据的索引结构(叶子节点)如下：</p><p><img src="http://images.hellocode.top/3074738-20230130154255155-1076048903.png" alt="image" loading="lazy"></p><p>当我们对已有数据进行删除时，具体的效果如下:</p><p>当删除一行记录时，实际上记录并没有被物理删除，只是记录被标记（flaged）为删除并且它的空间变得允许被其他记录声明使用。</p><p><img src="http://images.hellocode.top/3074738-20230130154335658-1062274244.png" alt="image" loading="lazy"></p><p>当我们继续删除2#的数据记录</p><p><img src="http://images.hellocode.top/3074738-20230130154402238-1237954978.png" alt="image" loading="lazy"></p><p>当页中删除的记录达到 <em>MERGE_THRESHOLD</em>（默认为页的50%），InnoDB会开始寻找最靠近的页（前或后）看看是否可以将两个页合并以优化空间使用</p><p><img src="http://images.hellocode.top/3074738-20230130154442558-64715392.png" alt="image" loading="lazy"></p><p>删除数据，并将页合并之后，再次插入新的数据21，则直接插入3#页</p><p><img src="http://images.hellocode.top/3074738-20230130154511471-1668789993.png" alt="image" loading="lazy"></p><p>这个里面所发生的合并页的这个现象，就称之为 &quot;页合并&quot;</p><blockquote><p>MERGE_THRESHOLD：合并页的阈值，可以自己设置，在创建表或者创建索引时指定，默认50%</p></blockquote><h4 id="_2-4-索引设计原则" tabindex="-1"><a class="header-anchor" href="#_2-4-索引设计原则" aria-hidden="true">#</a> 2.4. 索引设计原则</h4><ul><li>满足业务需求的情况下，尽量降低主键的长度</li><li>插入数据时，尽量选择顺序插入，选择使用AUTO_INCREMENT自增主键</li><li>尽量不要使用UUID做主键或者是其他自然主键，如身份证号</li><li>业务操作时，避免对主键的修改</li></ul><h3 id="_3、order-by优化" tabindex="-1"><a class="header-anchor" href="#_3、order-by优化" aria-hidden="true">#</a> 3、order by优化</h3><p>MySQL的排序，有两种方式：</p><ul><li>Using filesort : 通过表的索引或全表扫描，读取满足条件的数据行，然后在排序缓冲区sort buffer中完成排序操作，所有不是通过索引直接返回排序结果的排序都叫 FileSort 排序</li><li>Using index : 通过有序索引顺序扫描直接返回有序数据，这种情况即为 using index，不需要额外排序，操作效率高。</li></ul><p>对于以上的两种排序方式，Using index的性能高，而Using filesort的性能低，我们在优化排序操作时，尽量要优化为 Using index</p><p>接下来，我们来做一个测试：</p><p>A. 数据准备</p><p>把之前测试时，为tb_user表所建立的部分索引直接删除掉</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">drop</span> <span class="token keyword">index</span> idx_user_phone <span class="token keyword">on</span> tb_user<span class="token punctuation">;</span>
<span class="token keyword">drop</span> <span class="token keyword">index</span> idx_user_phone_name <span class="token keyword">on</span> tb_user<span class="token punctuation">;</span>
<span class="token keyword">drop</span> <span class="token keyword">index</span> idx_user_name <span class="token keyword">on</span> tb_user<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://images.hellocode.top/3074738-20230130155339386-1417301960.png" alt="image" loading="lazy"></p><p>B. 执行排序SQL</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">explain</span> <span class="token keyword">select</span> id<span class="token punctuation">,</span>age<span class="token punctuation">,</span>phone <span class="token keyword">from</span> tb_user <span class="token keyword">order</span> <span class="token keyword">by</span> age <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://images.hellocode.top/3074738-20230130155426364-217096094.png" alt="image" loading="lazy"></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">explain</span> <span class="token keyword">select</span> id<span class="token punctuation">,</span>age<span class="token punctuation">,</span>phone <span class="token keyword">from</span> tb_user <span class="token keyword">order</span> <span class="token keyword">by</span> age<span class="token punctuation">,</span> phone <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://images.hellocode.top/3074738-20230130155500049-493072458.png" alt="image" loading="lazy"></p><p>由于 age, phone 都没有索引，所以此时再排序时，出现Using filesort， 排序性能较低。</p><p>C. 创建索引</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 创建索引</span>
<span class="token keyword">create</span> <span class="token keyword">index</span> idx_user_age_phone_aa <span class="token keyword">on</span> tb_user<span class="token punctuation">(</span>age<span class="token punctuation">,</span>phone<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>D. 创建索引后，根据age, phone进行升序排序</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">explain</span> <span class="token keyword">select</span> id<span class="token punctuation">,</span>age<span class="token punctuation">,</span>phone <span class="token keyword">from</span> tb_user <span class="token keyword">order</span> <span class="token keyword">by</span> age<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://images.hellocode.top/3074738-20230130155834864-1884063365.png" alt="image" loading="lazy"></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">explain</span> <span class="token keyword">select</span> id<span class="token punctuation">,</span>age<span class="token punctuation">,</span>phone <span class="token keyword">from</span> tb_user <span class="token keyword">order</span> <span class="token keyword">by</span> age <span class="token punctuation">,</span> phone<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://images.hellocode.top/3074738-20230130155921535-1509415947.png" alt="image" loading="lazy"></p><p>建立索引之后，再次进行排序查询，就由原来的Using filesort， 变为了 Using index，性能就是比较高的了。</p><p>E. 创建索引后，根据age, phone进行降序排序</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">explain</span> <span class="token keyword">select</span> id<span class="token punctuation">,</span>age<span class="token punctuation">,</span>phone <span class="token keyword">from</span> tb_user <span class="token keyword">order</span> <span class="token keyword">by</span> age <span class="token keyword">desc</span> <span class="token punctuation">,</span> phone <span class="token keyword">desc</span> <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://images.hellocode.top/3074738-20230130160024306-472005556.png" alt="image" loading="lazy"></p><p>也出现 Using index， 但是此时Extra中出现了 Backward index scan，这个代表反向扫描索引，因为在MySQL中我们创建的索引，默认索引的叶子节点是从小到大排序的，而此时我们查询排序时，是从大到小，所以，在扫描时，就是反向扫描，就会出现Backward index scan。</p><p>在MySQL8版本中，支持降序索引，我们也可以创建降序索引</p><p>F. 根据phone，age进行升序排序，phone在前，age在后</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">explain</span> <span class="token keyword">select</span> id<span class="token punctuation">,</span>age<span class="token punctuation">,</span>phone <span class="token keyword">from</span> tb_user <span class="token keyword">order</span> <span class="token keyword">by</span> phone <span class="token punctuation">,</span> age<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://images.hellocode.top/3074738-20230130160140712-419411900.png" alt="image" loading="lazy"></p><p>排序时,也需要满足最左前缀法则,否则也会出现 filesort。因为在创建索引的时候， age是第一个字段，phone是第二个字段，所以排序时，也就该按照这个顺序来，否则就会出现 Using filesort</p><p>F. 根据age, phone进行降序一个升序，一个降序</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">explain</span> <span class="token keyword">select</span> id<span class="token punctuation">,</span>age<span class="token punctuation">,</span>phone <span class="token keyword">from</span> tb_user <span class="token keyword">order</span> <span class="token keyword">by</span> age <span class="token keyword">asc</span> <span class="token punctuation">,</span> phone <span class="token keyword">desc</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://images.hellocode.top/3074738-20230130160305146-583978772.png" alt="image" loading="lazy"></p><p>因为创建索引时，如果未指定顺序，默认都是按照升序排序的，而查询时，一个升序，一个降序，此时就会出现Using filesort</p><p><img src="http://images.hellocode.top/3074738-20230130160339843-2092985799.png" alt="image" loading="lazy"></p><p>为了解决上述的问题，我们可以创建一个索引，这个联合索引中 age 升序排序，phone 倒序排序</p><p>G. 创建联合索引(age 升序排序，phone 倒序排序)</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">index</span> idx_user_age_phone_ad <span class="token keyword">on</span> tb_user<span class="token punctuation">(</span>age <span class="token keyword">asc</span> <span class="token punctuation">,</span>phone <span class="token keyword">desc</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://images.hellocode.top/3074738-20230130160433333-1462965181.png" alt="image" loading="lazy"></p><p>H. 然后再次执行如下SQL</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">explain</span> <span class="token keyword">select</span> id<span class="token punctuation">,</span>age<span class="token punctuation">,</span>phone <span class="token keyword">from</span> tb_user <span class="token keyword">order</span> <span class="token keyword">by</span> age <span class="token keyword">asc</span> <span class="token punctuation">,</span> phone <span class="token keyword">desc</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://images.hellocode.top/3074738-20230130160511985-1769073978.png" alt="image" loading="lazy"></p><p>升序/降序联合索引结构图示:</p><p><img src="http://images.hellocode.top/3074738-20230130160545148-1962358987.png" alt="image" loading="lazy"><img src="http://images.hellocode.top/3074738-20230130160616202-614599259.png" alt="image" loading="lazy"></p><p>由上述的测试,我们得出order by优化原则:</p><ul><li>根据排序字段建立合适的索引，多字段排序时，也遵循最左前缀法则</li><li>尽量使用覆盖索引</li><li>多字段排序, 一个升序一个降序，此时需要注意联合索引在创建时的规则（ASC/DESC）</li><li>如果不可避免的出现filesort，大数据量排序时，可以适当增大排序缓冲区大小 sort_buffer_size(默认256k)</li></ul><h3 id="_4、group-by优化" tabindex="-1"><a class="header-anchor" href="#_4、group-by优化" aria-hidden="true">#</a> 4、group by优化</h3><p>在没有索引的情况下，执行如下SQL，查询执行计划：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">explain</span> <span class="token keyword">select</span> profession <span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> tb_user <span class="token keyword">group</span> <span class="token keyword">by</span> profession<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://images.hellocode.top/3074738-20230131084912946-867239132.png" alt="image" loading="lazy"></p><p>然后，我们在针对于 profession ， age， status 创建一个联合索引</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">index</span> idx_user_pro_age_sta <span class="token keyword">on</span> tb_user<span class="token punctuation">(</span>profession <span class="token punctuation">,</span> age <span class="token punctuation">,</span> <span class="token keyword">status</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>紧接着，再执行前面相同的SQL查看执行计划</p><p><img src="http://images.hellocode.top/3074738-20230131085014242-2076898587.png" alt="image" loading="lazy"></p><p>再执行如下的分组查询SQL，查看执行计划：</p><p><img src="http://images.hellocode.top/3074738-20230131085053352-251153808.png" alt="image" loading="lazy"></p><p>我们发现，如果仅仅根据age分组，就会出现 Using temporary ；而如果是 根据profession,age两个字段同时分组，则不会出现 Using temporary。原因是因为对于分组操作，在联合索引中，也是符合最左前缀法则的</p><p>所以，在分组操作中，我们需要通过以下两点进行优化，以提升性能：</p><ul><li>在分组操作时，可以通过索引来提高效率</li><li>分组操作时，索引的使用也是满足最左前缀法则的</li></ul><h3 id="_5、limit优化" tabindex="-1"><a class="header-anchor" href="#_5、limit优化" aria-hidden="true">#</a> 5、limit优化</h3><p>在数据量比较大时，如果进行limit分页查询，在查询时，越往后，分页查询效率越低</p><p>我们一起来看看执行limit分页查询耗时对比：</p><p><img src="http://images.hellocode.top/3074738-20230131085316313-1890692756.png" alt="image" loading="lazy"></p><p>通过测试我们会看到，越往后，分页查询效率越低，这就是分页查询的问题所在</p><p>因为，当在进行分页查询时，如果执行 <code>limit 2000000,10</code> ，此时需要MySQL排序前2000010 记录，仅仅返回 2000000 - 2000010 的记录，其他记录丢弃，查询排序的代价非常大</p><p>优化思路: 一般分页查询时，通过创建 覆盖索引 能够比较好地提高性能，可以通过覆盖索引加子查询形式进行优化</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_sku t <span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">select</span> id <span class="token keyword">from</span> tb_sku <span class="token keyword">order</span> <span class="token keyword">by</span> id <span class="token keyword">limit</span> <span class="token number">2000000</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span> a <span class="token keyword">where</span> t<span class="token punctuation">.</span>id <span class="token operator">=</span> a<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_6、count优化" tabindex="-1"><a class="header-anchor" href="#_6、count优化" aria-hidden="true">#</a> 6、count优化</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> tb_user<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在之前的测试中，我们发现，如果数据量很大，在执行count操作时，是非常耗时的</p><ul><li><p>MyISAM 引擎把一个表的总行数存在了磁盘上，因此执行 count(*) 的时候会直接返回这个数，效率很高； 但是如果是带条件的count，MyISAM也慢</p></li><li><p>InnoDB 引擎就麻烦了，它执行 count(*) 的时候，需要把数据一行一行地从引擎里面读出来，然后累积计数</p><p>如果说要大幅度提升InnoDB表的count效率，主要的优化思路：自己计数(可以借助于redis这样的数据库进行,但是如果是带条件的count又比较麻烦了)</p></li></ul><p><strong>count用法</strong></p><p>count() 是一个聚合函数，对于返回的结果集，一行行地判断，如果 count 函数的参数不是NULL，累计值就加 1，否则不加，最后返回累计值</p><p>用法：count（*）、count（主键）、count（字段）、count（数字）</p><table><thead><tr><th>count用 法</th><th>含义</th></tr></thead><tbody><tr><td>count(主键)</td><td>InnoDB 引擎会遍历整张表，把每一行的主键id 值都取出来，返回给服务层。 服务层拿到主键后，直接按行进行累加(主键不可能为null)</td></tr><tr><td>count(字段)</td><td>没有not null 约束 : InnoDB 引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，服务层判断是否为null，不为null，计数累加。 有not null 约束：InnoDB 引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，直接按行进行累加。</td></tr><tr><td>count(数字)</td><td>InnoDB 引擎遍历整张表，但不取值。服务层对于返回的每一行，放一个数字“1” 进去，直接按行进行累加。</td></tr><tr><td>count(*)</td><td>InnoDB引擎并不会把全部字段取出来，而是专门做了优化，不取值，服务层直接按行进行累加。</td></tr></tbody></table><blockquote><p><em>按照效率排序的话，count(字段) &lt; count(主键 id) &lt; count(1) ≈ count(*)，所以尽量使用 count(*)。</em></p></blockquote><h3 id="_7、update优化" tabindex="-1"><a class="header-anchor" href="#_7、update优化" aria-hidden="true">#</a> 7、update优化</h3><p>我们主要需要注意一下update语句执行时的注意事项。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">update</span> course <span class="token keyword">set</span> name <span class="token operator">=</span> <span class="token string">&#39;javaEE&#39;</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当我们在执行删除的SQL语句时，会锁定id为1这一行的数据，然后事务提交之后，行锁释放</p><p>但是当我们在执行如下SQL时</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">update</span> course <span class="token keyword">set</span> name <span class="token operator">=</span> <span class="token string">&#39;SpringBoot&#39;</span> <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">&#39;PHP&#39;</span> <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><em>当我们开启多个事务，在执行上述的SQL时，我们发现行锁升级为了表锁。 导致该update语句的性能大大降低</em></p><p><em>InnoDB的行锁是针对索引加的锁，不是针对记录加的锁 ,并且该索引不能失效，否则会从行锁升级为表锁</em></p><h2 id="八、视图" tabindex="-1"><a class="header-anchor" href="#八、视图" aria-hidden="true">#</a> 八、视图</h2><ul><li>视图：是一种虚拟存在的数据表，这个数据表并不在数据库中实际存在</li></ul><p>作用</p><ul><li>简单：将一些较为复杂的查询语句的结果，封装到一个虚拟表中，后期再有相同需求时，直接查询该虚拟表即可</li><li>安全：数据库可以授权，但不能授权到数据库特定行和特定的列上。通过视图用户只能查询和修改他们所能见到的数据</li><li>数据独立：视图可帮助用户屏蔽真实表结构变化带来的影响</li></ul><h3 id="_1、数据准备" tabindex="-1"><a class="header-anchor" href="#_1、数据准备" aria-hidden="true">#</a> 1、数据准备</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 创建db5数据库</span>
<span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> db5<span class="token punctuation">;</span>

<span class="token comment">-- 使用db5数据库</span>
<span class="token keyword">USE</span> db5<span class="token punctuation">;</span>

<span class="token comment">-- 创建country表</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> country<span class="token punctuation">(</span>
    id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token comment">-- 国家id</span>
    NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>            <span class="token comment">-- 国家名称</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 添加数据</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> country <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">&#39;中国&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">&#39;美国&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">&#39;俄罗斯&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 创建city表</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> city<span class="token punctuation">(</span>
    id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token comment">-- 城市id</span>
    NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>           <span class="token comment">-- 城市名称</span>
    cid <span class="token keyword">INT</span><span class="token punctuation">,</span>                <span class="token comment">-- 外键列</span>
    <span class="token keyword">CONSTRAINT</span> cc_fk1 <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>cid<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> country<span class="token punctuation">(</span>id<span class="token punctuation">)</span>  <span class="token comment">-- 添加外键约束</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 添加数据</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> city <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">&#39;北京&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">&#39;上海&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">&#39;纽约&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">&#39;莫斯科&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、创建和查询" tabindex="-1"><a class="header-anchor" href="#_2、创建和查询" aria-hidden="true">#</a> 2、创建和查询</h3><ul><li>创建视图语法 <code>CREATE [OR REPLACE] VIEW 视图名称 [(列表列名)] AS 查询语句 [WITH CHECK OPTION];</code></li><li>查询视图语法 <code>SELECT * FROM 视图名称;</code></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 创建city_country视图，保存城市和国家的信息（使用指定列名）</span>
<span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> city_country <span class="token punctuation">(</span>city_id<span class="token punctuation">,</span> city_name<span class="token punctuation">,</span> country_name<span class="token punctuation">)</span> <span class="token keyword">AS</span>
<span class="token keyword">SELECT</span>
    c1<span class="token punctuation">.</span>id<span class="token punctuation">,</span>
    c1<span class="token punctuation">.</span>name<span class="token punctuation">,</span>
    c2<span class="token punctuation">.</span>name
<span class="token keyword">FROM</span>
    city c1<span class="token punctuation">,</span>
    country c2
<span class="token keyword">WHERE</span>
    c1<span class="token punctuation">.</span>cid<span class="token operator">=</span>c2<span class="token punctuation">.</span>id<span class="token punctuation">;</span>

<span class="token comment">-- 查询视图</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> city_country<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、修改和删除" tabindex="-1"><a class="header-anchor" href="#_3、修改和删除" aria-hidden="true">#</a> 3、修改和删除</h3><ul><li>修改视图数据语法 <code>UPDATE 视图名称 SET 列名=值 WHERE 条件;</code></li><li>修改视图结构语法 <code>ALTER VIEW 视图名称 (列名列表) AS 查询语句;</code>或者<code>CREATE OR REPLACE VIEW 视图名称 (列名列表) AS 查询语句</code></li><li>删除视图语法 <code>DROP VIEW [IF EXISTS] 视图名称;</code></li></ul><blockquote><p>注意：修改视图数据后，原表数据也会随之修改</p></blockquote><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> city_country<span class="token punctuation">;</span>
<span class="token comment">-- 修改视图数据，将北京修改为深圳</span>
<span class="token keyword">UPDATE</span> city_country <span class="token keyword">SET</span> city_name<span class="token operator">=</span><span class="token string">&#39;深圳&#39;</span> <span class="token keyword">WHERE</span> city_name<span class="token operator">=</span><span class="token string">&#39;北京&#39;</span><span class="token punctuation">;</span>

<span class="token comment">-- 将视图中的country_name修改为name</span>
<span class="token keyword">ALTER</span> <span class="token keyword">VIEW</span> city_country <span class="token punctuation">(</span>city_id<span class="token punctuation">,</span> city_name<span class="token punctuation">,</span> NAME<span class="token punctuation">)</span> <span class="token keyword">AS</span>
<span class="token keyword">SELECT</span>
    c1<span class="token punctuation">.</span>id<span class="token punctuation">,</span>
    c1<span class="token punctuation">.</span>name<span class="token punctuation">,</span>
    c2<span class="token punctuation">.</span>name
<span class="token keyword">FROM</span>
    city c1<span class="token punctuation">,</span>
    country c2
<span class="token keyword">WHERE</span>
    c1<span class="token punctuation">.</span>cid<span class="token operator">=</span>c2<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
    
<span class="token comment">-- 删除视图</span>
<span class="token keyword">DROP</span> <span class="token keyword">VIEW</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> city_country<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>视图的更新</strong></p><p>要使视图可更新，视图中的行与基础表中的行之间必须存在一对一的关系。如果视图包含以下任何一项，则该视图不可更新：</p><ol><li>聚合函数或窗口函数（<code>SUM()</code>、<code>MIN()</code>、<code>MAX()</code>、<code>COUNT()</code>等）</li><li>DISTINCT</li><li>GROUP BY</li><li>HAVING</li><li>UNION 或者 UNION ALL</li></ol><h3 id="_4、视图的检查选项" tabindex="-1"><a class="header-anchor" href="#_4、视图的检查选项" aria-hidden="true">#</a> 4、视图的检查选项</h3><p>当使用<code>WITH CHECK OPTION</code>子句创建视图时，MySQL会通过视图检查正在更新的每个行，例如 插入、更新、删除，以使其符合视图的定义。MySQL允许基于另一个视图创建视图，它还会检查依赖视图中的规则以保持一致性。为了确定检查的范围，MySQL提供了两个选项：CASCADED 和 LOCAL ，默认值为 CASCADED</p><p><strong>CASCADED</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- case1</span>
<span class="token comment">-- 创建一个基于students表的视图</span>
<span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span> <span class="token keyword">view</span> v1 <span class="token keyword">as</span> <span class="token keyword">select</span> id<span class="token punctuation">,</span>name <span class="token keyword">from</span> students <span class="token keyword">where</span> id<span class="token operator">&lt;=</span><span class="token number">20</span><span class="token punctuation">;</span>
<span class="token comment">-- 由于没有检查选项，所以插入id&gt;20的数据也会插入成功</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> v1 <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token string">&#39;john&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">#插入成功</span>

<span class="token comment">-- case2</span>
<span class="token comment">-- 创建一个基于v1的视图，并添加cascaded检查选项</span>
<span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span> <span class="token keyword">view</span> v2 <span class="token keyword">as</span> <span class="token keyword">select</span> id<span class="token punctuation">,</span>name <span class="token keyword">from</span> v1 <span class="token keyword">where</span> id<span class="token operator">&gt;</span><span class="token number">10</span> <span class="token keyword">with</span> <span class="token keyword">cascaded</span> <span class="token keyword">check</span> <span class="token keyword">option</span><span class="token punctuation">;</span>

<span class="token comment">-- 添加检查选项后，再插入数据，MySQL就会判断插入数据是否满足条件，</span>
<span class="token comment">-- 由于此视图是基于v1的，所以现在可以插入的id值为 10&lt;id&lt;=20。</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> v2 <span class="token keyword">values</span>（<span class="token number">22</span>，<span class="token string">&#39;lucy&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">-- 插入失败</span>

<span class="token comment">-- case3</span>
<span class="token comment">-- 创建一个基于v2的视图</span>
<span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span> v3 <span class="token keyword">as</span> <span class="token keyword">select</span> id<span class="token punctuation">,</span>name <span class="token keyword">from</span> v2 <span class="token keyword">where</span> id<span class="token operator">&lt;=</span><span class="token number">15</span><span class="token punctuation">;</span>

<span class="token comment">-- 由于v3没有添加检查选项，但v3是基于v2的，所以现在可以插入的id值依然为 10&lt;id&lt;=20。</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> v3 <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">&#39;Tom&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">-- 插入成功</span>

<span class="token keyword">insert</span> <span class="token keyword">into</span> v3 <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token string">&#39;kobe&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">-- 插入失败</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们操作当前视图时，cascaded检查选项是，如果当前视图有检查选项，则插入数据要满足包括当前视图条件以及满足当前视图所依赖的视图的条件。如果当前视图没有检查选项，则插入数据要满足当时视图所依赖视图有检查选项及其依赖的视图的条件。</p><p><strong>LOCAL</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- case1</span>
<span class="token comment">-- 创建一个基于students表的视图</span>
<span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span> <span class="token keyword">view</span> v1 <span class="token keyword">as</span> <span class="token keyword">select</span> id<span class="token punctuation">,</span>name <span class="token keyword">from</span> students <span class="token keyword">where</span> id<span class="token operator">&lt;=</span><span class="token number">20</span><span class="token punctuation">;</span>

<span class="token keyword">insert</span> <span class="token keyword">into</span> v1 <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token string">&#39;john&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">-- 插入成功</span>

<span class="token comment">-- case2</span>
<span class="token comment">-- 创建一个基于v1的视图，并添加local检查选项</span>
<span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span> <span class="token keyword">view</span> v2 <span class="token keyword">as</span> <span class="token keyword">select</span> id<span class="token punctuation">,</span>name <span class="token keyword">from</span> v1 <span class="token keyword">where</span> id<span class="token operator">&gt;</span><span class="token number">10</span> <span class="token keyword">with</span> <span class="token keyword">local</span> <span class="token keyword">check</span> <span class="token keyword">option</span><span class="token punctuation">;</span>

<span class="token comment">-- 添加检查选项后，再插入数据，MySQL就会判断插入数据是否满足条件，</span>
<span class="token comment">-- 由于此视图是基于v1的，v1没有检查选项，所以现在可以插入的id值为 id&gt;10。</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> v2 <span class="token keyword">values</span>（<span class="token number">22</span>，<span class="token string">&#39;lucy&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">-- 插入成功</span>

<span class="token comment">-- case3</span>
<span class="token comment">-- 创建一个基于v2的视图</span>
<span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span> v3 <span class="token keyword">as</span> <span class="token keyword">select</span> id<span class="token punctuation">,</span>name <span class="token keyword">from</span> v2 <span class="token keyword">where</span> id<span class="token operator">&lt;=</span><span class="token number">15</span><span class="token punctuation">;</span>

<span class="token comment">-- 由于v3没有添加检查选项，但v3是基于v2的，所以现在可以插入的id值依然为 id&gt;10。</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> v3 <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">&#39;Tom&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">-- 插入成功</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们在操作当前视图时，local检查选项是递归的查找当前视图所依赖的视图是否有检查选项，如果有，则检查；如果没有，就不做检查</p><h3 id="_5、案例" tabindex="-1"><a class="header-anchor" href="#_5、案例" aria-hidden="true">#</a> 5、案例</h3><ol><li>为了保证数据库表的安全性，开发人员在操作<code>tb_user</code>表时，只能看到用户的基本字段，屏蔽手机号和邮箱两个字段</li><li>查询每个学生所选修的课程（三张表联查），这个功能在很多的业务中都有使用到，为了简化操作，定义一个视图</li></ol><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">view</span> tb_user_view <span class="token keyword">as</span> <span class="token keyword">select</span> id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>profession<span class="token punctuation">,</span>age<span class="token punctuation">,</span>gender<span class="token punctuation">,</span><span class="token keyword">status</span><span class="token punctuation">,</span>createtime <span class="token keyword">from</span> tb_user<span class="token punctuation">;</span>

<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_user_view<span class="token punctuation">;</span>



<span class="token keyword">create</span> <span class="token keyword">view</span> tb_stu_course_view <span class="token keyword">as</span> <span class="token keyword">select</span> s<span class="token punctuation">.</span>name student_name <span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token keyword">no</span> student_no <span class="token punctuation">,</span>c<span class="token punctuation">.</span>name course_name <span class="token keyword">from</span> student s<span class="token punctuation">,</span> student_course sc <span class="token punctuation">,</span> course c <span class="token keyword">where</span> s<span class="token punctuation">.</span>id <span class="token operator">=</span>sc<span class="token punctuation">.</span>studentid <span class="token operator">and</span> sc<span class="token punctuation">.</span>courseid <span class="token operator">=</span> c<span class="token punctuation">.</span>id<span class="token punctuation">;</span>

<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_stu_course_view
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="九、存储过程和函数" tabindex="-1"><a class="header-anchor" href="#九、存储过程和函数" aria-hidden="true">#</a> 九、存储过程和函数</h2><ul><li>存储过程和函数是事先经过编译并存储在数据库中的一段SQL语句的集合</li><li>存储过程和函数的好处 <ul><li>提高代码的复用性</li><li>减少数据在数据库和应用服务器之间的传输，提高效率</li><li>减少代码层面的业务处理</li></ul></li><li>存储过程和函数的区别 <ul><li>存储函数必须有返回值</li><li>存储过程可以没有返回值</li></ul></li></ul><h3 id="_1、创建和调用" tabindex="-1"><a class="header-anchor" href="#_1、创建和调用" aria-hidden="true">#</a> 1、创建和调用</h3><ul><li><p>创建存储过程</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 修改结束分隔符(一般在可视化编辑器中不需要这个操作， 在命令行需要)</span>
<span class="token keyword">DELIMITER</span> $

<span class="token comment">-- 创建存储过程</span>
<span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> 存储过程名称<span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span>
<span class="token keyword">BEGIN</span>
    <span class="token keyword">SQL</span> 语句列表<span class="token punctuation">;</span>
<span class="token keyword">END</span>$

<span class="token comment">-- 修改结束分隔符</span>
<span class="token keyword">DELIMITER</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>调用存储过程 <code>CALL 存储过程名称(实际参数);</code></p></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 数据准备</span>

<span class="token comment">-- 创建db6数据库</span>
<span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> db6<span class="token punctuation">;</span>

<span class="token comment">-- 使用db6数据库</span>
<span class="token keyword">USE</span> db6<span class="token punctuation">;</span>

<span class="token comment">-- 创建学生表</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> student<span class="token punctuation">(</span>
    id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token comment">-- 学生id</span>
    NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>           <span class="token comment">-- 学生姓名</span>
    age <span class="token keyword">INT</span><span class="token punctuation">,</span>                <span class="token comment">-- 学生年龄</span>
    gender <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token comment">-- 学生性别</span>
    score <span class="token keyword">INT</span>               <span class="token comment">-- 学生成绩</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 添加数据</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> student <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">&#39;男&#39;</span><span class="token punctuation">,</span> <span class="token number">95</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">&#39;李四&#39;</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token string">&#39;男&#39;</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
<span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">&#39;王五&#39;</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">&#39;女&#39;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">&#39;赵六&#39;</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token string">&#39;女&#39;</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">-- 按照性别进行分组，查询每组学生的总成绩。按照总成绩的升序排序</span>
<span class="token keyword">SELECT</span> gender<span class="token punctuation">,</span><span class="token function">SUM</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> getsum <span class="token keyword">FROM</span> student <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> gender <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> getsum <span class="token keyword">ASC</span><span class="token punctuation">;</span>
<span class="token comment">-- 创建stu_group() 存储过程，封装 分组查询总成绩，并按照总成绩升序排序的功能</span>
<span class="token keyword">DELIMITER</span> $

<span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> stu_group<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">BEGIN</span>
    <span class="token keyword">SELECT</span> gender<span class="token punctuation">,</span><span class="token function">SUM</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> getsum <span class="token keyword">FROM</span> student <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> gender <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> getsum <span class="token keyword">ASC</span><span class="token punctuation">;</span>
<span class="token keyword">END</span>$

<span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span>

<span class="token comment">-- 调用存储过程</span>
<span class="token keyword">CALL</span> stu_group<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、查看和删除" tabindex="-1"><a class="header-anchor" href="#_2、查看和删除" aria-hidden="true">#</a> 2、查看和删除</h3><ul><li>查看指定数据库的存储过程及状态信息： <code>SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE ROUTINE_SCHEMA=&#39;数据库名称&#39;;</code></li><li>查询某个存储过程的定义：<code>SHOW CREATE PROCEDURE 存储过程名称</code></li><li>删除存储过程 <code>DROP PROCEDURE [IF EXISTS] 存储过程名称;</code></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 查看db1数据库中所有的存储过程</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> INFORMATION_SCHEMA<span class="token punctuation">.</span>ROUTINES <span class="token keyword">WHERE</span> ROUTINE_SCHEMA<span class="token operator">=</span><span class="token string">&#39;db1&#39;</span><span class="token punctuation">;</span>

<span class="token comment">-- 删除存储过程</span>
<span class="token keyword">DROP</span> <span class="token keyword">PROCEDURE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> stu_group<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、变量" tabindex="-1"><a class="header-anchor" href="#_3、变量" aria-hidden="true">#</a> 3、变量</h3><p><strong>系统变量</strong></p><ul><li><p>系统变量：MySQL服务器提供，不是用户定义的，属于服务器层面。分为全局变量（GLOBAL）、会话变量(SESSION)</p></li><li><p>查看系统变量</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 查看所有系统变量</span>
<span class="token keyword">SHOW</span> <span class="token punctuation">[</span><span class="token keyword">SESSION</span> <span class="token operator">|</span> <span class="token keyword">GLOBAL</span><span class="token punctuation">]</span> VARIABLES<span class="token punctuation">;</span>
<span class="token comment">-- 可以通过LIKE模糊匹配方式查找变量</span>
<span class="token keyword">SHOW</span> <span class="token punctuation">[</span><span class="token keyword">SESSION</span> <span class="token operator">|</span> <span class="token keyword">GLOBAL</span><span class="token punctuation">]</span> VARIABLES <span class="token operator">LIKE</span> <span class="token string">&#39;......&#39;</span><span class="token punctuation">;</span>
<span class="token comment">-- 查看指定变量的值</span>
<span class="token keyword">SELECT</span> @@<span class="token punctuation">[</span><span class="token keyword">SESSION</span><span class="token punctuation">.</span> <span class="token operator">|</span> <span class="token keyword">GLOBAL</span><span class="token punctuation">.</span><span class="token punctuation">]</span> 系统变量名<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>设置系统变量</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SET</span> <span class="token punctuation">[</span><span class="token keyword">SESSION</span> <span class="token operator">|</span> <span class="token keyword">GLOBAL</span><span class="token punctuation">]</span> 系统变量名<span class="token operator">=</span>值<span class="token punctuation">;</span>
<span class="token keyword">SET</span> @@<span class="token punctuation">[</span><span class="token keyword">SESSION</span> <span class="token operator">|</span> <span class="token keyword">GLOBAL</span><span class="token punctuation">]</span> 系统变量名<span class="token operator">=</span>值<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><blockquote><p>如果没有指定SESSION/GLOBAL，默认是SESSION，会话变量</p><p>MySQL服务重新启动之后，所设置的全局参数会失效，要想不失效，可以在<code>/etc/my.cnf</code>中配置</p></blockquote><p><strong>用户定义变量</strong></p><ul><li>用户定义变量是用户根据需要自定义的变量，用户变量不用提前声明，在用的时候直接<code>@变量名</code>使用就可以。其作用域为当前连接</li><li>变量赋值方式一 <code>SET @变量名=变量值[,@变量名=变量值,...];</code>或者<code>SET @变量名:=变量值,[@变量名:=变量值,...];</code></li><li>变量赋值方式二 <code>SELECT 列名 INTO @变量名 FROM 表名 [WHERE 条件];</code>或者<code>SELECT @变量名:=变量值,[@变量名:=变量值,...];</code></li><li>使用变量：<code>SELECT @变量名[,@变量名...];</code></li></ul><blockquote><p>用户定义的变量无需对其进行声明或初始化，只不过获取到的值为NULL</p></blockquote><p><strong>局部变量</strong></p><ul><li><p>局部变量是根据需要定义在局部生效的变量，访问之前，需要DECLARE声明。可以用作存储过程内的局部变量和输入参数，局部变量的范围是在其内声明的 BEGIN...END 块</p></li><li><p>定义变量： <code>DECLARE 变量名 变量类型 [DEFAULT 默认值];</code>（变量类型就是数据库字段类型）</p></li><li><p>赋值</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SET</span> 变量名<span class="token operator">=</span>值<span class="token punctuation">;</span>
<span class="token keyword">SET</span> 变量名:<span class="token operator">=</span>值<span class="token punctuation">;</span>
<span class="token keyword">SELECT</span> 字段名 <span class="token keyword">INTO</span> 变量名 <span class="token keyword">FROM</span> 表名 <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使用变量：<code>SELECT 变量名;</code></p></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 定义一个int类型变量，并赋默认值为10</span>
<span class="token keyword">DELIMITER</span> $

<span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> pro_test1<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">BEGIN</span>
    <span class="token comment">-- 定义变量</span>
    <span class="token keyword">DECLARE</span> num <span class="token keyword">INT</span> <span class="token keyword">DEFAULT</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token comment">-- 使用变量</span>
    <span class="token keyword">SELECT</span> num<span class="token punctuation">;</span>
<span class="token keyword">END</span>$

<span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span>

<span class="token comment">-- 调用pro_test1存储过程</span>
<span class="token keyword">CALL</span> pro_test1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">/*
    变量赋值
*/</span>

<span class="token comment">-- 定义一个varchar类型变量并赋值</span>
<span class="token keyword">DELIMITER</span> $

<span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> pro_test2<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">BEGIN</span>
    <span class="token comment">-- 定义变量</span>
    <span class="token keyword">DECLARE</span> NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">-- 为变量赋值</span>
    <span class="token keyword">SET</span> NAME <span class="token operator">=</span> <span class="token string">&#39;存储过程&#39;</span><span class="token punctuation">;</span>
    <span class="token comment">-- 使用变量</span>
    <span class="token keyword">SELECT</span> NAME<span class="token punctuation">;</span>
<span class="token keyword">END</span>$

<span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span>

<span class="token comment">-- 调用pro_test2存储过程</span>
<span class="token keyword">CALL</span> pro_test2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">-- 定义两个int类型的变量，用于存储男女同学的总分数</span>
<span class="token keyword">DELIMITER</span> $

<span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> pro_test3<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">BEGIN</span>
    <span class="token comment">-- 定义两个变量</span>
    <span class="token keyword">DECLARE</span> men<span class="token punctuation">,</span>women <span class="token keyword">INT</span><span class="token punctuation">;</span>
    <span class="token comment">-- 为变量赋值</span>
    <span class="token keyword">SELECT</span> <span class="token function">SUM</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token keyword">INTO</span> men <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> gender <span class="token operator">=</span> <span class="token string">&#39;男&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">SELECT</span> <span class="token function">SUM</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token keyword">INTO</span> women <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> gender <span class="token operator">=</span> <span class="token string">&#39;女&#39;</span><span class="token punctuation">;</span>
    <span class="token comment">-- 使用变量</span>
    <span class="token keyword">SELECT</span> men<span class="token punctuation">,</span>women<span class="token punctuation">;</span>
<span class="token keyword">END</span>$

<span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span>

<span class="token comment">-- 调用pro_test3</span>
<span class="token keyword">CALL</span> pro_test3<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4、if语句" tabindex="-1"><a class="header-anchor" href="#_4、if语句" aria-hidden="true">#</a> 4、if语句</h3><p>if语句标准语法</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">IF</span> 判断条件<span class="token number">1</span> <span class="token keyword">THEN</span> 执行的<span class="token keyword">sql</span>语句<span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span><span class="token keyword">ELSEIF</span> 判断条件<span class="token number">2</span> <span class="token keyword">THEN</span> 执行的<span class="token keyword">sql</span>语句<span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">]</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">[</span><span class="token keyword">ELSE</span> 执行的<span class="token keyword">sql</span>语句n<span class="token punctuation">;</span><span class="token punctuation">]</span>
<span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">/*
    定义一个int类型的变量，用于存储班级总成绩
    定义一个varchar变量，用于存储分数描述
    根据总成绩判断：
        380分以上  学习优秀
        320~380     学习不错
        320以下       学习一般
*/</span>

<span class="token keyword">DELIMITER</span> $

<span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> pro_test4<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">BEGIN</span>
    <span class="token comment">-- 定义变量</span>
    <span class="token keyword">DECLARE</span> total <span class="token keyword">INT</span><span class="token punctuation">;</span>
    <span class="token keyword">DECLARE</span> info <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">-- 查询班级总成绩为total赋值</span>
    <span class="token keyword">SELECT</span> <span class="token function">SUM</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token keyword">INTO</span> total <span class="token keyword">FROM</span> student<span class="token punctuation">;</span>
    <span class="token comment">-- 判断</span>
    <span class="token keyword">IF</span> total <span class="token operator">&gt;=</span> <span class="token number">380</span> <span class="token keyword">THEN</span>
        <span class="token keyword">SET</span> info <span class="token operator">=</span> <span class="token string">&#39;学习优秀&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">ELSEIF</span> total <span class="token operator">BETWEEN</span> <span class="token number">320</span> <span class="token operator">AND</span> <span class="token number">380</span> <span class="token keyword">THEN</span> 
        <span class="token keyword">SET</span> info <span class="token operator">=</span> <span class="token string">&#39;学习不错&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">ELSE</span>
        <span class="token keyword">SET</span> info <span class="token operator">=</span> <span class="token string">&#39;学习一般&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span>
    <span class="token comment">-- 使用变量</span>
    <span class="token keyword">SELECT</span> total<span class="token punctuation">,</span>info<span class="token punctuation">;</span>
<span class="token keyword">END</span>$

<span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span>

<span class="token comment">-- 调用pro_test4</span>
<span class="token keyword">CALL</span> pro_test4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5、参数传递" tabindex="-1"><a class="header-anchor" href="#_5、参数传递" aria-hidden="true">#</a> 5、参数传递</h3><p>存储过程的参数和返回值</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> 存储过程名称<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">IN</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token keyword">OUT</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token keyword">INOUT</span><span class="token punctuation">]</span> 参数名 数据类型<span class="token punctuation">)</span>
<span class="token keyword">BEGIN</span>
    <span class="token keyword">SQL</span>语句列表<span class="token punctuation">;</span>
<span class="token keyword">END</span>$
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>IN：代表输入参数，需要由调用者传递实际数据（默认）</p></li><li><p>OUT：代表输出参数，该参数可以作为返回值</p></li><li><p>INOUT：代表既可以作为输入参数，也可以作为输出参数</p></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">/*
    输入总成绩变量，代表学生总成绩
    输出分数描述变量，代表学生总成绩的描述信息
    根据总成绩判断
        380分及以上 学习优秀
        320~380     学习不错
        320分及以下 学习一般
*/</span>

<span class="token keyword">DELIMITER</span> $

<span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> pro_test5<span class="token punctuation">(</span><span class="token operator">IN</span> total <span class="token keyword">INT</span><span class="token punctuation">,</span><span class="token keyword">OUT</span> info <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">BEGIN</span>
    <span class="token comment">-- 对总成绩判断</span>
    <span class="token keyword">IF</span> total <span class="token operator">&gt;=</span> <span class="token number">380</span> <span class="token keyword">THEN</span>
        <span class="token keyword">SET</span> info <span class="token operator">=</span> <span class="token string">&#39;学习优秀&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">ELSEIF</span> total <span class="token operator">BETWEEN</span> <span class="token number">320</span> <span class="token operator">AND</span> <span class="token number">380</span> <span class="token keyword">THEN</span>
        <span class="token keyword">SET</span> info <span class="token operator">=</span> <span class="token string">&#39;学习不错&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">ELSE</span>
        <span class="token keyword">SET</span> INFO <span class="token operator">=</span> <span class="token string">&#39;学习一般&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span>
<span class="token keyword">END</span>$

<span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span>

<span class="token comment">-- 调用存储过程</span>
<span class="token keyword">CALL</span> pro_test5<span class="token punctuation">(</span><span class="token number">383</span><span class="token punctuation">,</span> <span class="token variable">@info</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">CALL</span> pro_test5<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">SUM</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token keyword">FROM</span> student<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">@info</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">SELECT</span> <span class="token variable">@info</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6、case语句" tabindex="-1"><a class="header-anchor" href="#_6、case语句" aria-hidden="true">#</a> 6、case语句</h3><p><strong>语法一</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CASE</span> case_value
	<span class="token keyword">WHEN</span> when_value1 <span class="token keyword">THEN</span> statement_list1
	<span class="token punctuation">[</span><span class="token keyword">WHEN</span> when_value2 <span class="token keyword">THEN</span> statement_list2<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
	<span class="token punctuation">[</span><span class="token keyword">ELSE</span> statement_list<span class="token punctuation">]</span>
<span class="token keyword">END</span> <span class="token keyword">CASE</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>语法二</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CASE</span>
	<span class="token keyword">WHEN</span> search_condition1 <span class="token keyword">THEN</span> statement_list1
	<span class="token punctuation">[</span><span class="token keyword">WHEN</span> search_condition2 <span class="token keyword">THEN</span> statement_list2<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
	<span class="token punctuation">[</span><span class="token keyword">ELSE</span> statement_list<span class="token punctuation">]</span>
<span class="token keyword">END</span> <span class="token keyword">CASE</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7、循环" tabindex="-1"><a class="header-anchor" href="#_7、循环" aria-hidden="true">#</a> 7、循环</h3><h4 id="_7-1-while循环" tabindex="-1"><a class="header-anchor" href="#_7-1-while循环" aria-hidden="true">#</a> 7.1. while循环</h4><p>while 循环语法</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>初始化语句<span class="token punctuation">;</span>
<span class="token keyword">WHILE</span> 条件判断语句 <span class="token keyword">DO</span>
    循环体语句<span class="token punctuation">;</span>
    条件控制语句<span class="token punctuation">;</span>
<span class="token keyword">END</span> <span class="token keyword">WHILE</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 计算1~100之间的偶数和</span>

<span class="token keyword">DELIMITER</span> $

<span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> pro_test6<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">BEGIN</span>
    <span class="token comment">-- 定义求和变量</span>
    <span class="token keyword">DECLARE</span> result <span class="token keyword">INT</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">-- 定义初始化变量</span>
    <span class="token keyword">DECLARE</span> num <span class="token keyword">INT</span> <span class="token keyword">DEFAULT</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">-- while 循环</span>
    <span class="token keyword">WHILE</span> num <span class="token operator">&lt;=</span> <span class="token number">100</span> <span class="token keyword">DO</span>
        <span class="token keyword">IF</span> num <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token keyword">THEN</span>
            <span class="token keyword">SET</span> result <span class="token operator">=</span> result <span class="token operator">+</span> num<span class="token punctuation">;</span>
        <span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span>
        
        <span class="token keyword">SET</span> num <span class="token operator">=</span> num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">END</span> <span class="token keyword">WHILE</span><span class="token punctuation">;</span>
    <span class="token comment">-- 查询求和结果</span>
    <span class="token keyword">SELECT</span> result<span class="token punctuation">;</span>
<span class="token keyword">END</span>$

<span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span>

<span class="token comment">-- 调用存储过程</span>
<span class="token keyword">CALL</span> pro_test6<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-2-repeat循环" tabindex="-1"><a class="header-anchor" href="#_7-2-repeat循环" aria-hidden="true">#</a> 7.2. repeat循环</h4><p>repeat是有条件的循环控制语句，当满足条件的时候退出循环。具体语法为：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 先执行一次逻辑，然后判断逻辑是否满足，如果满足则退出。如果不满足，则继续下一次循环</span>
<span class="token keyword">REPEAT</span>
	<span class="token keyword">SQL</span>逻辑<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
	UNTIL 条件
<span class="token keyword">END</span> <span class="token keyword">REPEAT</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-3-loop循环" tabindex="-1"><a class="header-anchor" href="#_7-3-loop循环" aria-hidden="true">#</a> 7.3. loop循环</h4><p>LOOP 实现简单的循环，如果不在SQL逻辑中增加退出循环的条件，可以用其来实现简单的死循环。LOOP可以配合以下两个语句使用：</p><ul><li>LEAVE：配合循环使用，退出循环</li><li>ITERATE：必须用在循环中，作用是跳过当前循环剩下的语句，直接进入下一次循环</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token punctuation">[</span>begin_label:<span class="token punctuation">]</span><span class="token keyword">LOOP</span>
	<span class="token keyword">SQL</span>逻辑<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">END</span> <span class="token keyword">LOOP</span> <span class="token punctuation">[</span>end_label<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 退出指定标记的循环体</span>
<span class="token keyword">LEAVE</span> label<span class="token punctuation">;</span>
<span class="token comment">-- 直接进入下一次循环</span>
<span class="token keyword">ITERATE</span> label<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8、游标cursor" tabindex="-1"><a class="header-anchor" href="#_8、游标cursor" aria-hidden="true">#</a> 8、游标cursor</h3><p>游标（CURSOR）是用来存储查询结果集的数据类型，在存储过程和函数中可以使用游标对结果集进行循环的处理。游标的使用包括游标的声明、OPEN、FETCH 和 CLOSE，其语法分别如下：</p><ul><li>声明游标：<code>DECLARE 游标名称 CURSOR FOR 查询语句;</code></li><li>打开游标：<code>OPEN 游标名称;</code></li><li>获取游标记录：<code>FETCH 游标名称 INTO 变量[,变量];</code></li><li>关闭游标：<code>CLOSE 游标名称;</code></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">delimiter</span> $$
<span class="token keyword">create</span> <span class="token keyword">procedure</span> proc20_cursor<span class="token punctuation">(</span><span class="token operator">in</span> in_dname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">begin</span>
 <span class="token comment">-- 定义局部变量</span>
 <span class="token keyword">declare</span> var_empno <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">declare</span> var_ename <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">declare</span> var_sal  <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
 <span class="token comment">-- 声明游标</span>
 <span class="token keyword">declare</span> my_cursor <span class="token keyword">cursor</span> <span class="token keyword">for</span>
  <span class="token keyword">select</span> empno <span class="token punctuation">,</span> ename<span class="token punctuation">,</span> sal 
    <span class="token keyword">from</span>  dept a <span class="token punctuation">,</span>emp b
    <span class="token keyword">where</span> a<span class="token punctuation">.</span>deptno <span class="token operator">=</span> b<span class="token punctuation">.</span>deptno <span class="token operator">and</span> a<span class="token punctuation">.</span>dname <span class="token operator">=</span> in_dname<span class="token punctuation">;</span>
    
    <span class="token comment">-- 打开游标</span>
  <span class="token keyword">open</span> my_cursor<span class="token punctuation">;</span>
  <span class="token comment">-- 通过游标获取每一行数据</span>
  label:<span class="token keyword">loop</span>
        <span class="token keyword">fetch</span> my_cursor <span class="token keyword">into</span> var_empno<span class="token punctuation">,</span> var_ename<span class="token punctuation">,</span> var_sal<span class="token punctuation">;</span>
        <span class="token keyword">select</span> var_empno<span class="token punctuation">,</span> var_ename<span class="token punctuation">,</span> var_sal<span class="token punctuation">;</span>
    <span class="token keyword">end</span> <span class="token keyword">loop</span> label<span class="token punctuation">;</span>
    
    <span class="token comment">-- 关闭游标</span>
    <span class="token keyword">close</span> my_cursor<span class="token punctuation">;</span>
<span class="token keyword">end</span>
 
 <span class="token comment">-- 调用存储过程</span>
 <span class="token keyword">call</span> proc20_cursor<span class="token punctuation">(</span><span class="token string">&#39;销售部&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>游标和循环使用，特别是loop，一般可以不加条件也可以取完值</p></li><li><p>我们发现，这个可以运行成功，但是却出现了异常的警告，虽然不影响效果实现，作为精益求精的MySQL，怎么可以允许了，于是我们就创造了句柄</p></li><li><p>MySql存储过程也提供了对异常处理的功能：通过定义HANDLER（handler）来完成异常声明的实现</p></li></ul><blockquote><p>注意：变量需要定义在游标上面</p></blockquote><h4 id="_8-1-条件处理程序handler" tabindex="-1"><a class="header-anchor" href="#_8-1-条件处理程序handler" aria-hidden="true">#</a> 8.1. 条件处理程序handler</h4><p>条件处理程序（Handler）可以用来定义在流程控制结构执行过程中遇到问题时相应的处理步骤。具体语法为：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DECLARE</span> handler_action <span class="token keyword">HANDLER</span>
    <span class="token keyword">FOR</span> condition_value <span class="token punctuation">[</span><span class="token punctuation">,</span> condition_value<span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    statement<span class="token punctuation">;</span>
 
handler_action
    <span class="token keyword">CONTINUE</span>：继续执行当前程序
    <span class="token keyword">EXIT</span>：终止执行当前程序
 
condition_value
    SQLSTATE sqlstate_value：状态码，如<span class="token number">02000</span>
    SQLWARNING：所有以<span class="token number">01</span>开头的SQLSTATE代码的简写
    <span class="token operator">NOT</span> FOUND：所有以<span class="token number">02</span>开头的SQLSTATE代码的简写
    SQLEXCEPTION：所有没有被SQLWARNING 或 <span class="token operator">NOT</span> FOUND 捕获的SQLSTATE 代码的简写
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">drop</span> <span class="token keyword">procedure</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> proc21_cursor_handler<span class="token punctuation">;</span>
<span class="token comment">-- 需求：输入一个部门名，查询该部门员工的编号、名字、薪资 ，将查询的结果集添加游标</span>
<span class="token keyword">delimiter</span> $$
<span class="token keyword">create</span> <span class="token keyword">procedure</span> proc20_cursor<span class="token punctuation">(</span><span class="token operator">in</span> in_dname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">begin</span>
  <span class="token comment">-- 定义局部变量</span>
    <span class="token keyword">declare</span> var_empno <span class="token keyword">int</span><span class="token punctuation">;</span>
    <span class="token keyword">declare</span> var_ename <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">declare</span> var_sal <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">declare</span> flag <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">-- ---------------------</span>
    
    <span class="token comment">-- 声明游标</span>
    <span class="token keyword">declare</span> my_cursor <span class="token keyword">cursor</span> <span class="token keyword">for</span>
        <span class="token keyword">select</span> empno<span class="token punctuation">,</span>ename<span class="token punctuation">,</span>sal
        <span class="token keyword">from</span> dept a<span class="token punctuation">,</span> emp b
        <span class="token keyword">where</span> a<span class="token punctuation">.</span>deptno <span class="token operator">=</span> b<span class="token punctuation">.</span>deptno <span class="token operator">and</span> a<span class="token punctuation">.</span>dname <span class="token operator">=</span> in_dname<span class="token punctuation">;</span>
    
    <span class="token comment">-- 定义句柄，当数据未发现时将标记位设置为0</span>
    <span class="token keyword">declare</span> <span class="token keyword">continue</span> <span class="token keyword">handler</span> <span class="token keyword">for</span> <span class="token operator">NOT</span> FOUND <span class="token keyword">set</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   
    <span class="token comment">-- 打开游标</span>
    <span class="token keyword">open</span> my_cursor<span class="token punctuation">;</span>
    <span class="token comment">-- 通过游标获取值</span>
    label:<span class="token keyword">loop</span>
        <span class="token keyword">fetch</span> my_cursor <span class="token keyword">into</span> var_empno<span class="token punctuation">,</span> var_ename<span class="token punctuation">,</span>var_sal<span class="token punctuation">;</span>
        <span class="token comment">-- 判断标志位</span>
        <span class="token keyword">if</span> flag <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">then</span>
            <span class="token keyword">select</span> var_empno<span class="token punctuation">,</span> var_ename<span class="token punctuation">,</span>var_sal<span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            <span class="token keyword">leave</span> label<span class="token punctuation">;</span>
        <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>
    <span class="token keyword">end</span> <span class="token keyword">loop</span> label<span class="token punctuation">;</span>
    
    <span class="token comment">-- 关闭游标</span>
    <span class="token keyword">close</span> my_cursor<span class="token punctuation">;</span>
<span class="token keyword">end</span> $$<span class="token punctuation">;</span>
 
<span class="token keyword">delimiter</span> <span class="token punctuation">;</span>
<span class="token keyword">call</span> proc21_cursor_handler<span class="token punctuation">(</span><span class="token string">&#39;销售部&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9、存储函数" tabindex="-1"><a class="header-anchor" href="#_9、存储函数" aria-hidden="true">#</a> 9、存储函数</h3><ul><li><p>存储函数和存储过程是非常相似的，区别在于存储函数必须有返回值</p></li><li><p>存储函数的参数只能是 IN 类型的</p></li><li><p>创建存储函数</p></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">FUNCTION</span> 函数名称<span class="token punctuation">(</span><span class="token punctuation">[</span>参数列表<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">RETURNS</span> 返回值类型 <span class="token punctuation">[</span>characteristic <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>
<span class="token keyword">BEGIN</span>
        <span class="token keyword">SQL</span>语句列表<span class="token punctuation">;</span>
        <span class="token keyword">RETURN</span> 结果<span class="token punctuation">;</span>
<span class="token keyword">END</span> $

<span class="token comment">-- characteristic说明：</span>
<span class="token comment">-- DETERMINISTIC:相同的输入参数总是产生相同的结果</span>
<span class="token comment">-- NO SQL：不包含SQL语句</span>
<span class="token comment">-- READS SQL DATA：包含读取数据的语句，但不包含写入数据的语句</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>调用存储函数 <code>SELECT 函数名称(实际参数);</code></p></li><li><p>删除函数 <code>DROP FUNCTION 函数名称;</code></p></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 定义存储函数，获取学生表中成绩大于95分的学生数量</span>
<span class="token keyword">DELIMITER</span> $

<span class="token keyword">CREATE</span> <span class="token keyword">FUNCTION</span> fun_test<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">RETURNS</span> <span class="token keyword">INT</span>
<span class="token keyword">BEGIN</span>
    <span class="token comment">-- 定义变量</span>
    <span class="token keyword">DECLARE</span> s_count <span class="token keyword">INT</span><span class="token punctuation">;</span>
    <span class="token comment">-- 查询数量并赋值</span>
    <span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">INTO</span> s_count <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> score <span class="token operator">&gt;</span> <span class="token number">95</span><span class="token punctuation">;</span>
    <span class="token comment">-- 返回</span>
    <span class="token keyword">RETURN</span> s_count<span class="token punctuation">;</span>
<span class="token keyword">END</span>$

<span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span>

<span class="token comment">-- 调用函数</span>
<span class="token keyword">SELECT</span> fun_test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 删除函数</span>
<span class="token keyword">DROP</span> <span class="token keyword">FUNCTION</span> fun_test<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="十、触发器" tabindex="-1"><a class="header-anchor" href="#十、触发器" aria-hidden="true">#</a> 十、触发器</h2><ul><li>触发器是与表有关的数据库对象，可以在insert、update、delete 之前或之后触发并执行触发器中定义的SQL语句</li><li>这种特性可以协助应用系统在数据库端确保数据的完整性、日志记录、数据校验等操作</li><li>可以使用别名 <code>NEW</code> 或者 <code>OLD</code>来引用触发器中发生变化的内容记录</li><li>现在触发器还只支持行级触发，不支持语句级触发（比如一条插入语句，插入5行记录，就触发5次，就是行级，触发1次就是语句级）</li></ul><p>触发器分类</p><table><thead><tr><th style="text-align:left;">触发器类型</th><th style="text-align:left;">OLD</th><th style="text-align:left;">NEW</th></tr></thead><tbody><tr><td style="text-align:left;">INSERT 型触发器</td><td style="text-align:left;">无（因为插入前无数据）</td><td style="text-align:left;">NEW表示将要或者已经新增的数据</td></tr><tr><td style="text-align:left;">UPDATE 型触发器</td><td style="text-align:left;">OLD表示修改之前的数据</td><td style="text-align:left;">NEW表示将要或已经修改后的数据</td></tr><tr><td style="text-align:left;">DELETE 型触发器</td><td style="text-align:left;">OLD表示将要或者已经删除的数据</td><td style="text-align:left;">无（因为删除后状态无数据）</td></tr></tbody></table><h3 id="_1、触发器的操作" tabindex="-1"><a class="header-anchor" href="#_1、触发器的操作" aria-hidden="true">#</a> 1、触发器的操作</h3><p>创建触发器</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DELIMITER</span> $

<span class="token keyword">CREATE</span> <span class="token keyword">TRIGGER</span> 触发器名称
BEFORE<span class="token operator">|</span><span class="token keyword">AFTER</span> <span class="token keyword">INSERT</span><span class="token operator">|</span><span class="token keyword">UPDATE</span><span class="token operator">|</span><span class="token keyword">DELETE</span>
<span class="token keyword">ON</span> 表名
<span class="token keyword">FOR EACH ROW</span>		<span class="token comment">-- 行级触发器</span>
<span class="token keyword">BEGIN</span>
    触发器要执行的功能
<span class="token keyword">END</span>$

<span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>数据准备</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 创建db7数据库</span>
<span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> db7<span class="token punctuation">;</span>

<span class="token comment">-- 使用db7数据库</span>
<span class="token keyword">USE</span> db7<span class="token punctuation">;</span>

<span class="token comment">-- 创建账户表account</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> account<span class="token punctuation">(</span>
    id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token comment">-- 账户id</span>
    NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>           <span class="token comment">-- 姓名</span>
    money <span class="token keyword">DOUBLE</span>                <span class="token comment">-- 余额</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 添加数据</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> account <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">&#39;李四&#39;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 创建日志表account_log</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> account_log<span class="token punctuation">(</span>
    id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token comment">-- 日志id</span>
    operation <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token comment">-- 操作类型 (insert update delete)</span>
    operation_time <span class="token keyword">DATETIME</span><span class="token punctuation">,</span>        <span class="token comment">-- 操作时间</span>
    operation_id <span class="token keyword">INT</span><span class="token punctuation">,</span>           <span class="token comment">-- 操作表的id</span>
    operation_param <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>        <span class="token comment">-- 操作参数</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>INSERT 型触发器</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 创建insert型触发器，用于对account表新增数据进行日志的记录</span>
<span class="token keyword">DELIMITER</span> $

<span class="token keyword">CREATE</span> <span class="token keyword">TRIGGER</span> account_insert
<span class="token keyword">AFTER</span> <span class="token keyword">INSERT</span>
<span class="token keyword">ON</span> account
<span class="token keyword">FOR EACH ROW</span>
<span class="token keyword">BEGIN</span>
    <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> account_log <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">&#39;INSERT&#39;</span><span class="token punctuation">,</span> <span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> new<span class="token punctuation">.</span>id<span class="token punctuation">,</span> CONCAT<span class="token punctuation">(</span><span class="token string">&#39;插入后{id=&#39;</span><span class="token punctuation">,</span>new<span class="token punctuation">.</span>id<span class="token punctuation">,</span><span class="token string">&#39;,name=&#39;</span><span class="token punctuation">,</span>new<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token string">&#39;,money=&#39;</span><span class="token punctuation">,</span>new<span class="token punctuation">.</span>money<span class="token punctuation">,</span><span class="token string">&#39;}&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">END</span>$

<span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span>

<span class="token comment">-- 向account表添加一条数据</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> account <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">&#39;王五&#39;</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 查询account表</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> account<span class="token punctuation">;</span>

<span class="token comment">-- 查询account_log表</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> account_log<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>UPDATE 型触发器</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 创建update型触发器，用于对account表修改数据进行日志记录</span>
<span class="token keyword">DELIMITER</span> $

<span class="token keyword">CREATE</span> <span class="token keyword">TRIGGER</span> account_update
<span class="token keyword">AFTER</span> <span class="token keyword">UPDATE</span>
<span class="token keyword">ON</span> account
<span class="token keyword">FOR EACH ROW</span>
<span class="token keyword">BEGIN</span>
    <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> account_log <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">&#39;UPDATE&#39;</span><span class="token punctuation">,</span> <span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> new<span class="token punctuation">.</span>id<span class="token punctuation">,</span> CONCAT<span class="token punctuation">(</span><span class="token string">&#39;更新前{id=&#39;</span><span class="token punctuation">,</span>old<span class="token punctuation">.</span>id<span class="token punctuation">,</span><span class="token string">&#39;,name=&#39;</span><span class="token punctuation">,</span>old<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token string">&#39;,money=&#39;</span><span class="token punctuation">,</span>old<span class="token punctuation">.</span>money<span class="token punctuation">,</span><span class="token string">&#39;}&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;更新后{id=&#39;</span><span class="token punctuation">,</span>new<span class="token punctuation">.</span>id<span class="token punctuation">,</span><span class="token string">&#39;,name=&#39;</span><span class="token punctuation">,</span>new<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token string">&#39;,money=&#39;</span><span class="token punctuation">,</span>new<span class="token punctuation">.</span>money<span class="token punctuation">,</span><span class="token string">&#39;}&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">END</span>$

<span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span>

<span class="token comment">-- 修改account表中李四的金额为2000</span>
<span class="token keyword">UPDATE</span> account <span class="token keyword">SET</span> money <span class="token operator">=</span> <span class="token number">2000</span> <span class="token keyword">WHERE</span> NAME <span class="token operator">=</span> <span class="token string">&#39;李四&#39;</span><span class="token punctuation">;</span>

<span class="token comment">-- 查询account表</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> account<span class="token punctuation">;</span>

<span class="token comment">-- 查询account_log表</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> account_log<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>DELETE 型触发器</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 创建delete型触发器，用于对account表删除的数据进行日志的记录</span>
<span class="token keyword">DELIMITER</span> $

<span class="token keyword">CREATE</span> <span class="token keyword">TRIGGER</span> account_delete
<span class="token keyword">AFTER</span> <span class="token keyword">DELETE</span>
<span class="token keyword">ON</span> account
<span class="token keyword">FOR EACH ROW</span>
<span class="token keyword">BEGIN</span>
    <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> account_log <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">&#39;DELETE&#39;</span><span class="token punctuation">,</span> <span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> old<span class="token punctuation">.</span>id<span class="token punctuation">,</span> CONCAT<span class="token punctuation">(</span><span class="token string">&#39;删除前{id=&#39;</span><span class="token punctuation">,</span>old<span class="token punctuation">.</span>id<span class="token punctuation">,</span><span class="token string">&#39;,name=&#39;</span><span class="token punctuation">,</span>old<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token string">&#39;,money=&#39;</span><span class="token punctuation">,</span>old<span class="token punctuation">.</span>money<span class="token punctuation">,</span><span class="token string">&#39;}&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">END</span>$

<span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span>

<span class="token comment">-- 删除account表中王五</span>
<span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> account <span class="token keyword">WHERE</span> NAME <span class="token operator">=</span> <span class="token string">&#39;王五&#39;</span><span class="token punctuation">;</span>

<span class="token comment">-- 查询account表</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> account<span class="token punctuation">;</span>

<span class="token comment">-- 查询account_log表</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> account_log<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、查看和删除-1" tabindex="-1"><a class="header-anchor" href="#_2、查看和删除-1" aria-hidden="true">#</a> 2、查看和删除</h3><ul><li>查看触发器 <code>SHOW TRIGGERS;</code></li><li>删除触发器 <code>DROP TRIGGER 触发器名称;</code></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 查看触发器</span>
<span class="token keyword">SHOW</span> TRIGGERS<span class="token punctuation">;</span>

<span class="token comment">-- 删除account_delete触发器</span>
<span class="token keyword">DROP</span> <span class="token keyword">TRIGGER</span> account_delete<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="十一、锁" tabindex="-1"><a class="header-anchor" href="#十一、锁" aria-hidden="true">#</a> 十一、锁</h2><p>锁是计算机协调多个进程或线程并发访问某一资源的机制。在数据库中，除传统的计算资源（CPU、RAM、I/O）的争用以外，数据也是一种供许多用户共享的资源。如何保证数据并发访问的一致性、有效性是所有数据库必须解决的一个问题，锁冲突也是影响数据库并发访问性能的一个重要因素。从这个角度来说，锁对数据库而言显得尤其重要，也更加复杂</p><ul><li><p>锁机制：数据库为了保证数据的一致性，在共享的资源被并发访问时变得安全所设计的一种规则</p></li><li><p>锁机制类似多线程中的同步，作用就是可以保证数据的一致性和安全性</p></li><li><p>按操作分类</p><ul><li>共享锁：也叫读锁。针对同一份数据，多个事务读取操作可以同时加锁而不相互影响，但是不能修改数据</li><li>排他锁：也叫写锁。当前的操作没有完成前，会阻断其他操作的读取和写入</li></ul></li><li><p>按粒度分类</p><ul><li>全局锁：锁定数据库中的所有表</li><li>表级锁：会锁定整张表。开销小，加锁快。锁定粒度大，发生锁冲突概率高，并发度低。不会出现死锁情况</li><li>行级锁：会锁定当前行。开销大，加锁慢。锁定粒度小，发生锁冲突概率低，并发度高。会出现死锁情况</li></ul></li><li><p>按使用方式分类</p><ul><li>悲观锁：每次查询数据时都认为别人会修改，很悲观，所以查询时加锁</li><li>乐观锁：每次查询时都认为别人不会修改，很乐观，但是更新时会判断一下在此期间别人有没有去更新这个数据</li></ul></li><li><p>不同存储引擎支持的锁</p><table><thead><tr><th>存储引擎</th><th>表锁</th><th>行锁</th></tr></thead><tbody><tr><td>InnoDB</td><td>支持</td><td>支持</td></tr><tr><td>MyISAM</td><td>支持</td><td>不支持</td></tr><tr><td>MEMORY</td><td>支持</td><td>不支持</td></tr></tbody></table></li></ul><blockquote><p><em>注意：</em> 在下面所有的锁的操作中，只提到了修改操作，但是增删都是和修改一样的</p></blockquote><h3 id="_1、全局锁" tabindex="-1"><a class="header-anchor" href="#_1、全局锁" aria-hidden="true">#</a> 1、全局锁</h3><p>全局锁就是对整个数据库实例加锁，加锁后整个实例就处于只读状态，后续的DML的写语句，DDL语句，已经更新操作的事务提交语句都将被阻塞</p><ul><li>其典型的使用场景是做全库的逻辑备份，对所有的表进行锁定，从而获取一致性视图，保证数据的完整性</li></ul><p><img src="http://images.hellocode.top/1b54e835e3944281bb97a4eabbb0c1cd.png" alt="" loading="lazy"></p><ul><li>在进行数据备份时，先备份了tb_stock库存表。</li><li>然后接下来，在业务系统中，执行了下单操作，扣减库存，生成订单（更新tb_stock表，插入tb_order表）。</li><li>然后再执行备份 tb_order表的逻辑。</li><li>业务中执行插入订单日志操作。</li><li>最后，又备份了tb_orderlog表。</li><li>此时备份出来的数据，是存在问题的。因为备份出来的数据，tb_stock表与tb_order表的数据不一致(有最新操作的订单信息,但是库存数没减)。</li></ul><p>那如何来规避这种问题呢? 此时就可以借助于MySQL的全局锁来解决</p><p><img src="http://images.hellocode.top/02e28cd5c6c5414e9c4ef6fa0f2a5e67.png" alt="在这里插入图片描述" loading="lazy"></p><p>对数据库进行进行逻辑备份之前，先对整个数据库加上全局锁，一旦加了全局锁之后，其他的DDL、DML全部都处于阻塞状态，但是可以执行DQL语句，也就是处于只读状态，而数据备份就是查询操作。那么数据在进行逻辑备份的过程中，数据库中的数据就是不会发生变化的，这样就保证了数据的一致性和完整性</p><p><strong>语法</strong></p><ul><li>加全局锁：<code>flush tables with read lock;</code></li><li>释放锁：<code>unlock tables;</code></li></ul><p><strong>特点</strong></p><p>数据库中加全局锁，是一个比较重的操作，存在以下问题：</p><ol><li>如果在主库上备份，那么在备份期间都不能执行更新，业务基本上就得停摆</li><li>如果在从库上备份，那么在备份期间从库不能执行主库同步过来的二进制日志（binlog），会导致主从延迟</li></ol><p>在 InnoDB 引擎中，我们可以在备份时加上参数 <code>--single-transaction</code> 参数来完成不加锁的一致性数据备份</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysqldump --single-transaction <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-p123456</span> hellocode<span class="token operator">&gt;</span>hellocode.sql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2、表级锁" tabindex="-1"><a class="header-anchor" href="#_2、表级锁" aria-hidden="true">#</a> 2、表级锁</h3><p>表级锁，每次操作锁住整张表。锁定粒度大，发生锁冲突的概率最高，并发度最低。应用在MyISAM、InnoDB、BDB等存储引擎中</p><p>对于表级锁，主要分为以下三类：</p><p><strong>1. 表锁</strong></p><ol><li>表共享读锁（read lock）：不会阻塞读，但是会阻塞其他客户端的写操作（加锁客户端也不可写，只能读）</li><li>表独占写锁（write lock）：加锁客户端既能读，也能写（其他客户端既不能读，也不能写，会阻塞）</li></ol><p><em>语法</em></p><ul><li>加锁：<code>lock tables 表名... read/write</code></li><li>释放锁：<code>unlock tables</code> 或者 客户端断开连接</li></ul><blockquote><p>读锁不会阻塞其他客户端的读，但是会阻塞写。写锁既会阻塞其他客户端的读，又会阻塞其他客户端的写</p></blockquote><p><strong>2. 元数据锁（meta data lock，MDL）</strong></p><p>MDL加锁过程是系统自动控制，无需显示使用，在访问一张表的时候会自动加上。MDL锁主要作用是维护表元数据的数据一致性，在表上有活动事务的时候，不可以对元数据进行写入操作。为了避免DML 与 DDL冲突，保证读写的正确性</p><p>在MySQL 5.5中引入了MDL，当对一张表进行增删改查的时候，加MDL读锁（共享）；当对表结构进行变更操作的时候，加MDL写锁（排他）</p><p><img src="http://images.hellocode.top/8037ac7de9a143cb8fa4ccff13fd889f.png" alt="在这里插入图片描述" loading="lazy"></p><ul><li><p>开启事务A，查询表1（默认增加MDL读锁），正常执行；</p></li><li><p>开启事务B，更新表1某条数据（默认增加MDL写锁），正常执行；</p></li><li><p>但是此时事务A和事务B都不能进行修改表结构</p></li></ul><p>查看元数据锁</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> object_type<span class="token punctuation">,</span>object_schema<span class="token punctuation">,</span>object_name<span class="token punctuation">,</span>lock_type<span class="token punctuation">,</span>lock_duration <span class="token keyword">from</span> performance_schema<span class="token punctuation">.</span>metadata_locks<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>3. 意向锁</strong></p><p>为了避免DML在执行时，加的行锁与表锁的冲突，在InnoDB中引入了意向锁，使得表锁不用检查每行数据是否加锁，使用意向锁来减少表锁的检查。</p><ul><li>假如没有意向锁，客户端一对表加了行锁后，客户端二如何给表加表锁呢，来通过示意图简单分析一下：</li><li>首先客户端一，开启一个事务，然后执行DML操作，在执行DML语句时，会对涉及到的行加行锁。</li><li>当客户端二，想对这张表加表锁时，会检查当前表是否有对应的行锁，如果没有，则添加表锁，此时就会从第一行数据，检查到最后一行数据，效率较低。</li></ul><p><img src="http://images.hellocode.top/2dadfe42381549e89bacbaef5d78fd12.png" alt="在这里插入图片描述" loading="lazy"></p><ul><li>有了意向锁之后 :</li><li>客户端一，在执行DML操作时，会对涉及的行加行锁，同时也会对该表加上意向锁。</li><li>而其他客户端，在对这张表加表锁的时候，会根据该表上所加的意向锁来判定是否可以成功加表锁，而不用逐行判断行锁情况了</li></ul><p><img src="http://images.hellocode.top/d379026eb0214d709a13cb0ed679e565.png" alt="在这里插入图片描述" loading="lazy"></p><p><em>分类</em></p><ul><li>意向共享锁(IS): 由语句select … lock in share mode添加 。 与表锁共享锁(read)兼容，与表锁排他锁(write)互斥。</li><li>意向排他锁(IX): 由insert、update、delete、select…for update添加 。与表锁共享锁(read)及排他锁(write)都互斥，意向锁之间不会互斥</li></ul><p>可以通过以下SQL，查看意向锁及行锁的加锁情况：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> object_schema<span class="token punctuation">,</span>object_name<span class="token punctuation">,</span>index_name<span class="token punctuation">,</span>lock_type<span class="token punctuation">,</span>lock_mode<span class="token punctuation">,</span>lock_data <span class="token keyword">from</span> performance_schema<span class="token punctuation">.</span>data_locks<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3、行级锁" tabindex="-1"><a class="header-anchor" href="#_3、行级锁" aria-hidden="true">#</a> 3、行级锁</h3><blockquote><p>行级锁，每次操作锁住对应的行数据。锁定粒度最小，发生锁冲突的概率最低，并发度最高。应用在InnoDB存储引擎中</p></blockquote><p>InnoDB 的数据是基于索引组织的，行锁是通过对索引上的索引项加锁来实现的，而不是对记录加的锁。对于行级锁，主要分为以下三类：</p><ol><li><p>行锁（Record Lock）：锁定单个行记录的锁，防止其他事务对此进行update 和 delete。在RC、RR隔离级别下都支持</p><p><img src="http://images.hellocode.top/bdcf63f5d51144f28d66ffe8ab6f068b.png" alt="在这里插入图片描述" loading="lazy"></p></li><li><p>间隙锁（Gap Lock）：锁定索引记录间隙（不含该记录），确保所有记录间隙不变，防止其他事务在这个间隙进行insert。产生幻读。在RR隔离级别下都支持</p><p><img src="http://images.hellocode.top/d17909366a1d4659a02f2fd682d8506f.png" alt="在这里插入图片描述" loading="lazy"></p></li><li><p>临键锁（Next-Key Lock）：行锁和间隙锁组合，同时锁住数据，并锁住数据前面的间隙Gap。在RR隔离级别下支持</p><p><img src="http://images.hellocode.top/aa563fd9071140839e55ff38852461bf.png" alt="在这里插入图片描述" loading="lazy"></p></li></ol><p><em>InnoDB实现了以下两种类型的行锁：</em></p><ol><li>共享锁（S）：允许一个事务去读一行，阻止其他事务获得相同数据集的排它锁</li><li>排他锁（X）：允许获取排他锁的事务更新数据，阻止其他事务获得相同数据集的共享锁和排他锁</li></ol><p><img src="http://images.hellocode.top/74c86a4940cb405b82e90b6290928df1.png" alt="两种行锁的" loading="lazy"></p><p><strong>加锁过程</strong></p><p><img src="http://images.hellocode.top/917b599056c74d1e8e8302a1f3deb4b1.png" alt="在这里插入图片描述" loading="lazy"></p><p>默认情况下，InnoDB在 REPEATABLE READ事务隔离级别运行，InnoDB使用临键锁进行搜索和索引扫描，以防止幻读。</p><ol><li>针对唯一索引进行检索时，对已存在的记录进行等值匹配时，将会自动优化为行锁</li><li>InnoDB的行锁是针对于索引加的锁，不通过索引条件检索数据，那么InnoDB将对表中的所有记录加锁，此时 <em>就会升级为表锁</em></li><li>索引上的等值查询(唯一索引)，给不存在的记录加锁时, 优化为间隙锁 。</li><li>索引上的等值查询(非唯一普通索引)，向右遍历时最后一个值不满足查询需求时，临键锁退化为间隙锁。</li><li>索引上的范围查询(唯一索引)，会访问到不满足条件的第一个值为止</li></ol><blockquote><p>注意：间隙锁唯一目的是防止其他事务插入间隙。间隙锁可以共存，一个事务采用的间隙锁不会组织另一个事务在同一间隙上采用间隙锁</p></blockquote><p>可以通过以下SQL，查看意向锁和行锁的加锁情况：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> object_schema<span class="token punctuation">,</span>object_name<span class="token punctuation">,</span>index_name<span class="token punctuation">,</span>lock_type<span class="token punctuation">,</span>lock_mode<span class="token punctuation">,</span>lock_data <span class="token keyword">from</span> performance_schema<span class="token punctuation">.</span>data_locks<span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4、innodb共享锁" tabindex="-1"><a class="header-anchor" href="#_4、innodb共享锁" aria-hidden="true">#</a> 4、InnoDB共享锁</h3><p>共享锁特点</p><ul><li><p>数据可以被多个事务查询，但是不能修改</p></li><li><p>InnoDB引擎默认加的是行锁，如果不采用带索引的列加锁时加的就是表锁</p></li></ul><p>创建共享锁格式</p><ul><li><code>SELECT语句 LOCK IN SHARE MODE;</code></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">/*
	数据准备
*/</span>

<span class="token comment">-- 创建db10数据库</span>
<span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> db10<span class="token punctuation">;</span>

<span class="token comment">-- 使用db10数据库</span>
<span class="token keyword">USE</span> db10<span class="token punctuation">;</span>

<span class="token comment">-- 创建student表</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> student<span class="token punctuation">(</span>
	id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>
	NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	age <span class="token keyword">INT</span><span class="token punctuation">,</span>
	score <span class="token keyword">INT</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 添加数据</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> student <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">&#39;李四&#39;</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">95</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">&#39;王五&#39;</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">&#39;赵六&#39;</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">/*
	窗口1
*/</span>

<span class="token comment">-- 开启事务</span>
<span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span><span class="token punctuation">;</span>

<span class="token comment">-- 查询id为1的数据，并加入共享锁</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">LOCK</span> <span class="token operator">IN</span> <span class="token keyword">SHARE</span> <span class="token keyword">MODE</span><span class="token punctuation">;</span>

<span class="token comment">-- 查询分数为99的数据，并加入共享锁</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> score <span class="token operator">=</span> <span class="token number">99</span> <span class="token keyword">LOCK</span> <span class="token operator">IN</span> <span class="token keyword">SHARE</span> <span class="token keyword">MODE</span><span class="token punctuation">;</span>

<span class="token comment">-- 提交事务</span>
<span class="token keyword">COMMIT</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">/*
	窗口2
*/</span>

<span class="token comment">-- 开启事务</span>
<span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span><span class="token punctuation">;</span>

<span class="token comment">-- 查询id为1的数据（普通查询没有问题）</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token comment">-- 查询id为1的数据，也加入共享锁(共享锁和共享锁之间相互兼容)</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">LOCK</span> <span class="token operator">IN</span> <span class="token keyword">SHARE</span> <span class="token keyword">MODE</span><span class="token punctuation">;</span>

<span class="token comment">-- 修改id为1的数据，姓名改为张三三(修改失败，出现锁的情况，只有在窗口一提交事务之后才能修改成功)</span>
<span class="token keyword">UPDATE</span> student <span class="token keyword">SET</span> NAME <span class="token operator">=</span> <span class="token string">&#39;张三三&#39;</span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token comment">-- 修改id为2的数据，将姓名修改为李四四(修改成功，InnoDB引擎默认加的是行锁)</span>
<span class="token keyword">UPDATE</span> student <span class="token keyword">SET</span> NAME <span class="token operator">=</span> <span class="token string">&#39;李四四&#39;</span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>

<span class="token comment">-- 修改id为3的数据，姓名改为王五五(修改失败，锁，InnoDB如果不采用带索引的列加锁时加的就是表锁)</span>
<span class="token keyword">UPDATE</span> student <span class="token keyword">SET</span> NAME <span class="token operator">=</span> <span class="token string">&#39;王五五&#39;</span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>

<span class="token comment">-- 提交事务(窗口2没提交事务时修改的内容在窗口1中不能查询到)</span>
<span class="token keyword">COMMIT</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5、innodb排他锁" tabindex="-1"><a class="header-anchor" href="#_5、innodb排他锁" aria-hidden="true">#</a> 5、InnoDB排他锁</h3><p>排他锁特点</p><ul><li>加锁的数据，不能被其他事务加锁查询或修改（普通查询可以）</li><li>锁和锁之间不能共存</li></ul><p>创建排他锁的格式</p><ul><li><code>SELECT语句 FOR UPDATE;</code></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">/*
	窗口1
*/</span>

<span class="token comment">-- 开启事务</span>
<span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span><span class="token punctuation">;</span>

<span class="token comment">-- 查询id为1的数据，并加入排他锁</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">FOR</span> <span class="token keyword">UPDATE</span><span class="token punctuation">;</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> score <span class="token operator">=</span> <span class="token number">99</span> <span class="token keyword">FOR</span> <span class="token keyword">UPDATE</span><span class="token punctuation">;</span>
<span class="token comment">-- 提交事务</span>
<span class="token keyword">COMMIT</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">/*
	窗口2
*/</span>

<span class="token comment">-- 开启事务</span>
<span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span><span class="token punctuation">;</span>

<span class="token comment">-- 查询id为1的数据(成功，普通查询没问题)</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> id <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>

<span class="token comment">-- 查询id为1的数据，并加入共享锁(失败，排他锁和共享锁不兼容)</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">LOCK</span> <span class="token operator">IN</span> <span class="token keyword">SHARE</span> <span class="token keyword">MODE</span><span class="token punctuation">;</span>

<span class="token comment">-- 查询id为1的数据，并加入排他锁(失败，排他锁和排他锁也不兼容)</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> id <span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">FOR</span> <span class="token keyword">UPDATE</span><span class="token punctuation">;</span>

<span class="token comment">-- 修改id为1的数据，姓名改为张三(失败，会出现锁的情况，只有窗口1提交事务后才能修改)</span>
<span class="token keyword">UPDATE</span> student <span class="token keyword">SET</span> NAME <span class="token operator">=</span> <span class="token string">&#39;张三&#39;</span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token comment">-- 提交事务</span>
<span class="token keyword">COMMIT</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6、myisam-读锁" tabindex="-1"><a class="header-anchor" href="#_6、myisam-读锁" aria-hidden="true">#</a> 6、MyISAM 读锁</h3><p>读锁特点</p><ul><li>所有连接只能查询数据，不能修改</li><li>MyISAM存储引擎只能添加表锁，且不支持事务</li></ul><p>读锁语法格式</p><ul><li>加锁：<code>LOCK TABLE 表名 READ;</code></li><li>解锁：<code>UNLOCK TABLES;</code></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 创建product表</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> product<span class="token punctuation">(</span>
	id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>
	NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	price <span class="token keyword">INT</span>
<span class="token punctuation">)</span><span class="token keyword">ENGINE</span> <span class="token operator">=</span> MYISAM<span class="token punctuation">;</span>

<span class="token comment">-- 添加数据</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> product <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">&#39;华为手机&#39;</span><span class="token punctuation">,</span> <span class="token number">4999</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">&#39;小米手机&#39;</span><span class="token punctuation">,</span> <span class="token number">2999</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">&#39;苹果&#39;</span><span class="token punctuation">,</span> <span class="token number">8999</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">&#39;中兴&#39;</span><span class="token punctuation">,</span> <span class="token number">1999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">/*
	窗口1
*/</span>

<span class="token comment">-- 为product表添加读锁</span>
<span class="token keyword">LOCK</span> <span class="token keyword">TABLE</span> product <span class="token keyword">READ</span><span class="token punctuation">;</span>

<span class="token comment">-- 查询id为1的数据</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> product <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token comment">-- 修改id为1的数据，金额改为4999(失败，读锁中所有连接只能读取数据不能修改数据)</span>
<span class="token keyword">UPDATE</span> product <span class="token keyword">SET</span> price <span class="token operator">=</span> <span class="token number">4999</span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token comment">-- 解锁</span>
<span class="token keyword">UNLOCK</span> <span class="token keyword">TABLES</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">/*
	窗口2
*/</span>

<span class="token comment">-- 查询id为1的数据</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> product <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token comment">-- 修改id为1的数据，金额改为5999(失败，读锁中所有连接只能读取数据不能修改数据)</span>
<span class="token keyword">UPDATE</span> product <span class="token keyword">SET</span> price <span class="token operator">=</span> <span class="token number">5999</span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7、myisam-写锁" tabindex="-1"><a class="header-anchor" href="#_7、myisam-写锁" aria-hidden="true">#</a> 7、MyISAM 写锁</h3><p>写锁特点</p><ul><li>其他连接不能查询和修改数据（当前连接下可以查询和修改）</li></ul><p>写锁语法格式</p><ul><li>加锁：<code>LOCK TABLE 表名 WRITE;</code></li><li>解锁：<code>UNLOCK TABLES;</code></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">/*
	窗口1
*/</span>

<span class="token comment">-- 为product表添加写锁</span>
<span class="token keyword">LOCK</span> <span class="token keyword">TABLE</span> product <span class="token keyword">WRITE</span><span class="token punctuation">;</span>

<span class="token comment">-- 查询(没有问题)</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> product<span class="token punctuation">;</span>

<span class="token comment">-- 修改(没有问题)</span>
<span class="token keyword">UPDATE</span> product <span class="token keyword">SET</span> price <span class="token operator">=</span> <span class="token number">1999</span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>

<span class="token comment">-- 解锁</span>
<span class="token keyword">UNLOCK</span> <span class="token keyword">TABLES</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">/*
	窗口2
*/</span>

<span class="token comment">-- 查询(失败，出现锁，只有窗口1解锁后才能成功)</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> product<span class="token punctuation">;</span>

<span class="token comment">-- 修改(失败，出现锁，只有窗口1解锁后才能成功)</span>
<span class="token keyword">UPDATE</span> product <span class="token keyword">SET</span> price <span class="token operator">=</span> <span class="token number">2999</span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8、悲观锁和乐观锁" tabindex="-1"><a class="header-anchor" href="#_8、悲观锁和乐观锁" aria-hidden="true">#</a> 8、悲观锁和乐观锁</h3><p>悲观锁</p><ul><li>就是很悲观，它对于数据被外界修改的操作持保守态度，认为数据随时会修改</li><li>整个数据处理中需要将数据加锁。悲观锁一般都是依靠关系型数据库提供的锁机制</li><li>我们之前所学习的锁机制都是悲观锁</li></ul><p>乐观锁</p><ul><li>就是很乐观，每次自己操作数据的时候认为没有人会来修改它，所以不去加锁</li><li>但是在更新的时候会去判断在此期间数据有没有被修改</li><li>需要用户自己去实现，不会发生并发抢占资源，只有在提交操作的时候检查是否违反数据完整性</li></ul><p><strong>乐观锁实现方式</strong>（了解）</p><p>方式一</p><ul><li>给数据表中添加一个version列，每次更新后都将这个列的值加1</li><li>读取数据时，将版本号读取出来，再执行更新的时候，比较版本号</li><li>如果相同则执行更新，如果不同，说明此条数据已经发生了变化</li><li>用户自行根据这个通知来决定怎么处理，比如重新开始一遍，或者放弃本次更新</li></ul><p>方式二</p><ul><li>和版本号方式基本一样，给数据表加入一个列，名称无所谓，数据类型是 timestamp</li><li>每次更新后都将最新时间插入到此列</li><li>读取数据时，将时间读取出来，在执行更新的时候，比较时间</li><li>如果相同则更新，如果不相同，说明此条数据已经发生了变化</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 创建city表</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> city<span class="token punctuation">(</span>
	id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>
	NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	VERSION <span class="token keyword">INT</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 添加数据</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> city <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">&#39;北京&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">&#39;上海&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">&#39;广州&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">&#39;深圳&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 将北京修改为北京市</span>
<span class="token comment">-- 1. 将北京的版本号读取出来</span>
<span class="token keyword">SELECT</span> VERSION <span class="token keyword">FROM</span> city <span class="token keyword">WHERE</span> NAME <span class="token operator">=</span> <span class="token string">&#39;北京&#39;</span><span class="token punctuation">;</span>		<span class="token comment">-- 1</span>
<span class="token comment">-- 2. 修改北京为北京市，版本号+1，并对比版本号是否相同</span>
<span class="token keyword">UPDATE</span> city <span class="token keyword">SET</span> NAME <span class="token operator">=</span> <span class="token string">&#39;北京市&#39;</span><span class="token punctuation">,</span> VERSION <span class="token operator">=</span> VERSION <span class="token operator">+</span> <span class="token number">1</span> <span class="token keyword">WHERE</span> NAME <span class="token operator">=</span> <span class="token string">&#39;北京&#39;</span> <span class="token operator">AND</span> VERSION <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="十二、innodb引擎" tabindex="-1"><a class="header-anchor" href="#十二、innodb引擎" aria-hidden="true">#</a> 十二、InnoDB引擎</h2><h3 id="_1、逻辑存储结构" tabindex="-1"><a class="header-anchor" href="#_1、逻辑存储结构" aria-hidden="true">#</a> 1、逻辑存储结构</h3><p><img src="http://images.hellocode.top/ee904c6679644c3c8a03bebba542f21b.png" alt="在这里插入图片描述" loading="lazy"></p><ul><li><p>表空间（ibd文件），一个MySQL实例可以对应多个表空间，用于存储记录、索引等数据</p></li><li><p>段，分为数据段（Leaf node segment）、索引段（Non-leaf node segment）、回滚段（Rollback segment），InnoDB是索引组织表，数据段就是B+树的叶子节点，索引段即为B+树的非叶子节点。段用来管理多个Extent（区）</p></li><li><p>区，表空间的单元结构，每个区的大小为1M。 默认情况下， InnoDB存储引擎页大小为16K， 即一个区中一共有64个连续的页</p></li><li><p>页，是InnoDB 存储引擎磁盘管理的最小单元，每个页的大小默认为 16KB。为了保证页的连续性，InnoDB 存储引擎每次从磁盘申请 4-5 个区</p></li><li><p>行，InnoDB 存储引擎数据是按行进行存放的</p><p>在行中，默认有两个隐藏字段：</p><ul><li>Trx_id：每次对某条记录进行改动时，都会把对应的事务id赋值给trx_id隐藏列。</li><li>Roll_pointer：每次对某条引记录进行改动时，都会把旧的版本写入到undo日志中，然后这个隐藏列就相当于一个指针，可以通过它来找到该记录修改前的信息。</li></ul></li></ul><h3 id="_2、架构" tabindex="-1"><a class="header-anchor" href="#_2、架构" aria-hidden="true">#</a> 2、架构</h3><p>MySQL5.5 版本开始，默认使用InnoDB存储引擎，它擅长事务处理，具有崩溃恢复特性，在日常开发中使用非常广泛。下面是InnoDB架构图，左侧为内存结构，右侧为磁盘结构。</p><p><img src="http://images.hellocode.top/059a4cdc73e49bb27e615ba15271e31a.webp" alt="img" loading="lazy"></p><h4 id="_2-1-内存结构" tabindex="-1"><a class="header-anchor" href="#_2-1-内存结构" aria-hidden="true">#</a> 2.1. 内存结构</h4><p><img src="http://images.hellocode.top/882b68b48c16b46c235babb6ac214d3f.webp" alt="img" loading="lazy"></p><p><strong>Buffer Pool</strong></p><ul><li><p>InnoDB存储引擎基于磁盘文件存储，访问物理硬盘和在内存中进行访问，速度相差很大，为了尽可能弥补这两者之间的I/O效率的差值，就需要把经常使用的数据加载到缓冲池中，避免每次访问都进行磁盘I/O。</p></li><li><p>在InnoDB的缓冲池中不仅缓存了索引页和数据页，还包含了undo页、插入缓存、自适应哈希索引以及InnoDB的锁信息等等。</p></li><li><p>缓冲池 Buffer Pool，是主内存中的一个区域，里面可以缓存磁盘上经常操作的真实数据，在执行增 删改查操作时，先操作缓冲池中的数据（若缓冲池没有数据，则从磁盘加载并缓存），然后再以一定频 率刷新到磁盘，从而减少磁盘IO，加快处理速度。</p></li></ul><p>缓冲池以Page页为单位，底层采用链表数据结构管理Page。根据状态，将Page分为三种类型：</p><ul><li>free page：空闲page，未被使用。</li><li>clean page：被使用page，数据没有被修改过。</li><li>dirty page：脏页，被使用page，数据被修改过，也中数据与磁盘的数据产生了不一致。</li></ul><p><strong>Change Buffer</strong></p><p>Change Buffer，更改缓冲区（针对于非唯一二级索引页），在执行DML语句时，如果这些数据Page没有在Buffer Pool中，不会直接操作磁盘，而会将数据变更存在更改缓冲区 Change Buffer中，在未来数据被读取时，再将数据合并恢复到Buffer Pool中，再将合并后的数据刷新到磁盘中。</p><p>Change Buffer的意义是什么呢?</p><p>先来看一幅图，这个是二级索引的结构图：</p><p><img src="http://images.hellocode.top/5ef50ced70d01940d43485d82cbb1535.webp" alt="img" loading="lazy"></p><p>与聚集索引不同，二级索引通常是非唯一的，并且以相对随机的顺序插入二级索引。同样，删除和更新可能会影响索引树中不相邻的二级索引页，如果每一次都操作磁盘，会造成大量的磁盘IO。有了ChangeBuffer之后，我们可以在缓冲池中进行合并处理，减少磁盘IO。</p><p><strong>Adaptive Hash Index</strong></p><p>自适应hash索引，用于优化对Buffer Pool数据的查询。MySQL的innoDB引擎中虽然没有直接支持hash索引，但是给我们提供了一个功能就是这个自适应hash索引。因为前面我们讲到过，hash索引在进行等值匹配时，一般性能是要高于B+树的，因为hash索引一般只需要一次IO即可，而B+树，可能需要几次匹配，所以hash索引的效率要高，但是hash索引又不适合做范围查询、模糊匹配等。</p><p>InnoDB存储引擎会监控对表上各索引页的查询，如果观察到在特定的条件下hash索引可以提升速度，则建立hash索引，称之为自适应hash索引。</p><p><em>自适应哈希索引，无需人工干预，是系统根据情况自动完成</em></p><p>参数： <code>adaptive_hash_index</code>（控制是否开启自适应哈希）</p><p><strong>Log Buffer</strong></p><p>Log Buffer：日志缓冲区，用来保存要写入到磁盘中的log日志数据（redo log 、undo log），默认大小为 16MB，日志缓冲区的日志会定期刷新到磁盘中。如果需要更新、插入或删除许多行的事务，增加日志缓冲区的大小可以节省磁盘 I/O。</p><p>参数:</p><p>innodb_log_buffer_size：缓冲区大小</p><p>innodb_flush_log_at_trx_commit：日志刷新到磁盘时机，取值主要包含以下三个：</p><ul><li><p><code>1</code>:日志在每次事务提交时写入并刷新到磁盘，默认值。</p></li><li><p><code>0</code>:每秒将日志写入并刷新到磁盘一次。</p></li><li><p><code>2</code>:日志在每次事务提交后写入，并每秒刷新到磁盘一次。</p></li></ul><h4 id="_2-2-磁盘结构" tabindex="-1"><a class="header-anchor" href="#_2-2-磁盘结构" aria-hidden="true">#</a> 2.2. 磁盘结构</h4><p><img src="http://images.hellocode.top/ndtrvef2bkfgi_a01a0804394f465c84f8ca9feda44291.png" alt="92ba0822ed0b46e1ae72df8a17d3a45b.png" loading="lazy"></p><p><strong>System Tablespace</strong></p><p>系统表空间是更改缓冲区的存储区域。如果表是在系统表空间而不是每个表文件或通用表空间中创建的，它也可能包含表和索引数据。(在MySQL5.x版本中还包含InnoDB数据字典、undolog等)</p><p>参数：innodb_data_file_path</p><p><img src="http://images.hellocode.top/ndtrvef2bkfgi_f72426d0f6074951ac70a34852bc692b.png" alt="d79b274929334152a6d38be91e2d1be3.png" loading="lazy"></p><p>系统表空间，默认的文件名叫 ibdata1</p><p><strong>File-Per-Table Tablespaces</strong></p><p>如果开启了innodb_file_per_table开关 ，则每个表的文件表空间包含单个InnoDB表的数据和索引 ，并存储在文件系统上的单个数据文件中。</p><p>开关参数：innodb_file_per_table ，该参数默认开启。</p><p><img src="http://images.hellocode.top/ndtrvef2bkfgi_33b22b9ff3cc419db767d10ab995484d.png" alt="dfc80ca9d8004e6c9ddc00e8448ffc6a.png" loading="lazy"></p><p>那也就是说，我们没创建一个表，都会产生一个表空间文件，如图：</p><p><img src="http://images.hellocode.top/ndtrvef2bkfgi_776c943e45f149559ca92c7ca1706ca6.png" alt="e8beda27b2f643a380f9b38a7f7d8a2a.png" loading="lazy"></p><p><strong>General Tablespaces</strong></p><p>通用表空间，需要通过 CREATE TABLESPACE 语法创建通用表空间，在创建表时，可以指定该表空间。</p><ol><li>创建表空间</li></ol><p><code>CREATE TABLESPACE ts_name ADD DATAFILE &#39;file_name&#39; ENGINE = engine_name;</code></p><p><img src="http://images.hellocode.top/ndtrvef2bkfgi_b97afb780d52494c8769cfc2e6d68591.png" alt="f91d8a108d0c413eb930b624a9967d37.png" loading="lazy"></p><ol start="2"><li>创建表时指定表空间</li></ol><p><code>CREATE TABLE xxx ... TABLESPACE ts_name</code></p><p><img src="http://images.hellocode.top/ndtrvef2bkfgi_18b302a0a89c4dbcaca9d24266673a71.png" alt="0a2653c851af460fa595bd959398a8f1.png" loading="lazy"></p><p><strong>Undo Tablespaces</strong></p><p>撤销表空间，MySQL实例在初始化时会自动创建两个默认的undo表空间（初始大小16M），用于存储undo log日志。</p><p><strong>Temporary Tablespaces</strong></p><p>InnoDB 使用会话临时表空间和全局临时表空间。存储用户创建的临时表等数据。</p><p><strong>Doublewrite Buffer Files</strong></p><p>双写缓冲区，innoDB引擎将数据页从Buffer Pool刷新到磁盘前，先将数据页写入双写缓冲区文件中，便于系统异常时恢复数据。</p><p><img src="http://images.hellocode.top/ndtrvef2bkfgi_078001a379df48a29f88919b54db2130.png" alt="2d65d23f6d4748949b924e4057485923.png" loading="lazy"></p><p><strong>Redo Log</strong></p><p>重做日志，是用来实现事务的持久性。该日志文件由两部分组成：重做日志缓冲（redo log buffer）以及重做日志文件（redo log）,前者是在内存中，后者在磁盘中。当事务提交之后会把所有修改信息都会存到该日志中, 用于在刷新脏页到磁盘时,发生错误时, 进行数据恢复使用</p><p>以循环方式写入重做日志文件，涉及两个文件：</p><p><img src="http://images.hellocode.top/ndtrvef2bkfgi_64a342e5aaa143578368e6d3a62a0944.png" alt="6de278e6d6694ce5bb08e7e842b7e74b.png" loading="lazy"></p><p>前面介绍了InnoDB的内存结构，以及磁盘结构，那么内存中我们所更新的数据，又是如何到磁盘中的？ 此时，就涉及到一组后台线程，接下来，介绍一些InnoDB中涉及到的后台线程。</p><p><img src="http://images.hellocode.top/ndtrvef2bkfgi_923c1151047d4cc28119145860c51c80.png" alt="8ec4f2997fb246878c34ecd6d122b7c6.png" loading="lazy"></p><h4 id="_2-3-后台线程" tabindex="-1"><a class="header-anchor" href="#_2-3-后台线程" aria-hidden="true">#</a> 2.3. 后台线程</h4><p><img src="http://images.hellocode.top/ndtrvef2bkfgi_a98f91867f804a7c8d22f378a9444240.png" alt="12c3b7f3f8814309a195c64f051d4445.png" loading="lazy"></p><p>在InnoDB的后台线程中，分为4类，分别是：Master Thread 、IO Thread、Purge Thread、 Page Cleaner Thread。</p><ol><li><p>Master Thread</p><p>核心后台线程，负责调度其他线程，还负责将缓冲池中的数据异步刷新到磁盘中, 保持数据的一致性， 还包括脏页的刷新、合并插入缓存、undo页的回收</p></li><li><p>IO Thread</p><p>在InnoDB存储引擎中大量使用了AIO来处理IO请求, 这样可以极大地提高数据库的性能，而IO Thread主要负责这些IO请求的回调</p></li></ol><p><img src="http://images.hellocode.top/ndtrvef2bkfgi_26cc3e31938d4dd88ba08b5cac7c0d9f.png" alt="image.png" loading="lazy"></p><p>可以通过以下的这条指令，查看到InnoDB的状态信息，其中就包含IO Thread信息</p><p><code>show engine innodb status \\G;</code></p><p><img src="http://images.hellocode.top/ndtrvef2bkfgi_0b533e1ec0084147b32fbbdba76f6e33.png" alt="0a2653c851af460fa595bd959398a8f1.png" loading="lazy"></p><ol start="3"><li><p>Purge Thread</p><p>主要用于回收事务已经提交了的undo log，在事务提交之后，undo log可能不用了，就用它来回收。</p></li><li><p>Page Cleaner Thread</p><p>协助 Master Thread 刷新脏页到磁盘的线程，它可以减轻 Master Thread 的工作压力，减少阻塞。</p></li></ol><h3 id="_3、事务原理" tabindex="-1"><a class="header-anchor" href="#_3、事务原理" aria-hidden="true">#</a> 3、事务原理</h3><h4 id="_3-1-概述" tabindex="-1"><a class="header-anchor" href="#_3-1-概述" aria-hidden="true">#</a> 3.1. 概述</h4><p>事务是一组操作的集合，它是一个不可分割的工作单位，事务会把所有的操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。</p><p>特性</p><ul><li><p>原子性（Atomicity）：事务是不可分割的最小操作单元，要么全部成功，要么全部失败。</p></li><li><p>一致性（Consistency）：事务完成时，必须使所有的数据都保持一致状态。</p></li><li><p>隔离性（Isolation）：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行。</p></li><li><p>持久性（Durability）：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的。</p></li></ul><p>实际上，我们研究事务的原理，就是研究MySQL的InnoDB引擎是如何保证事务的这四大特性的。</p><p>而对于这四大特性，实际上分为两个部分。 其中的原子性、一致性、持久化，实际上是由InnoDB中的两份日志来保证的，一份是redo log日志，一份是undo log日志。 而持久性是通过数据库的锁， 加上MVCC来保证的。</p><p><img src="http://images.hellocode.top/939a7c1272dd53ec4f12d91aff798222.webp" alt="img" loading="lazy"></p><h4 id="_3-2-redo-log" tabindex="-1"><a class="header-anchor" href="#_3-2-redo-log" aria-hidden="true">#</a> 3.2. redo log</h4><ul><li><p>重做日志，记录的是事务提交时数据页的物理修改，是用来实现事务的持久性。</p></li><li><p>该日志文件由两部分组成：重做日志缓冲（redo log buffer）以及重做日志文件（redo log file）,前者是在内存中，后者在磁盘中。当事务提交之后会把所有修改信息都存到该日志文件中, 用于在刷新脏页到磁盘,发生错误时, 进行数据恢复使用。</p></li></ul><p><strong>没有redolog，可能会存在什么问题的？</strong></p><p>在InnoDB引擎中的内存结构中，主要的内存区域就是缓冲池，在缓冲池中缓存了很多的数据页。 当我们在一个事务中，执行多个增删改的操作时，InnoDB引擎会先操作缓冲池中的数据，如果缓冲区没有对应的数据，会通过后台线程将磁盘中的数据加载出来，存放在缓冲区中，然后将缓冲池中的数据修改，修改后的数据页我们称为脏页。而脏页则会在一定的时机，通过后台线程刷新到磁盘中，从而保证缓冲区与磁盘的数据一致。而缓冲区的脏页数据并不是实时刷新的，而是一段时间之后 将缓冲区的数据刷新到磁盘中，假如刷新到磁盘的过程出错了，而提示给用户事务提交成功，而数据却没有持久化下来，这就出现问题了，没有保证事务的持久性。</p><p><img src="http://images.hellocode.top/e3c2b556f98e4050d4cdf4d59d0ef41d.webp" alt="img" loading="lazy"></p><p>如何解决上述的问题呢？ 在InnoDB中提供了一份日志 redo log，接下来我们再来分析一 下，通过redolog如何解决这个问题</p><p><img src="http://images.hellocode.top/4ced26c49777080a0323fba3a7ebcc1c.webp" alt="img" loading="lazy"></p><p>有了redolog之后，当对缓冲区的数据进行增删改之后，会首先将操作的数据页的变化，记录在redo log buffer中。在事务提交时，会将redo log buffer中的数据刷新到redo log磁盘文件中。 过一段时间之后，如果刷新缓冲区的脏页到磁盘时，发生错误，此时就可以借助于redo log进行数据恢复，这样就保证了事务的持久性。 而如果脏页成功刷新到磁盘或者涉及到的数据已经落盘，此 时redolog就没有作用了，就可以删除了，所以存在的两个redolog文件是循环写的。</p><p><strong>为什么每一次提交事务，要刷新redo log 到磁盘中呢，而不是直接将buffer pool中的脏页刷新到磁盘呢 ?</strong></p><p>因为在业务操作中，我们操作数据一般都是随机读写磁盘的，而不是顺序读写磁盘。 而redo log在 往磁盘文件中写入数据，由于是日志文件，所以都是顺序写的。顺序写的效率，要远大于随机写。 这种先写日志的方式，称之为 WAL（Write-Ahead Logging）</p><h4 id="_3-3-undo-log" tabindex="-1"><a class="header-anchor" href="#_3-3-undo-log" aria-hidden="true">#</a> 3.3. undo log</h4><blockquote><p>回滚日志，用于记录数据被修改前的信息 , 作用包含两个 : 提供回滚(保证事务的原子性) 和 MVCC(多版本并发控制)</p></blockquote><p>undo log和redo log记录物理日志不一样，它是逻辑日志。可以认为当delete一条记录时，undo log中会记录一条对应的insert记录，反之亦然，当update一条记录时，它记录一条对应相反的 update记录。当执行rollback时，就可以从undo log中的逻辑记录读取到相应的内容并进行回滚。</p><ul><li><p>Undo log销毁：undo log在事务执行时产生，事务提交时，并不会立即删除undo log，因为这些日志可能还用于MVCC</p></li><li><p>Undo log存储：undo log采用段的方式进行管理和记录，存放在前面介绍的 rollback segment 回滚段中，内部包含1024个undo log segment</p></li></ul><h3 id="_4、mvcc" tabindex="-1"><a class="header-anchor" href="#_4、mvcc" aria-hidden="true">#</a> 4、MVCC</h3><h4 id="_4-1-基本概念" tabindex="-1"><a class="header-anchor" href="#_4-1-基本概念" aria-hidden="true">#</a> 4.1. 基本概念</h4><p><strong>当前读</strong></p><p>读取的是记录的最新版本，读取时还要保证其他并发事务不能修改当前记录，会对读取的记录进行加锁。对于我们日常的操作，如：<code>select ... lock in share mode</code>(共享锁)，<code>select ...for update</code>、<code>update</code>、<code>insert</code>、<code>delete</code>(排他锁)都是一种当前读</p><p><img src="http://images.hellocode.top/d1eedca2b639c552f9aba23445b8508a.webp" alt="img" loading="lazy"></p><p>在测试中我们可以看到，即使是在默认的RR隔离级别下，事务A中依然可以读取到事务B最新提交的内容，因为在查询语句后面加上了 <code>lock in share mode</code> 共享锁，此时是当前读操作。当然，当我们加排他锁的时候，也是当前读操作</p><p><strong>快照读</strong></p><p>简单的select（不加锁）就是快照读，快照读，读取的是记录数据的可见版本，有可能是历史数据，不加锁，是非阻塞读。</p><ul><li>Read Committed：每次select，都生成一个快照读。</li><li>Repeatable Read：开启事务后第一个select语句才是快照读的地方。</li><li>Serializable：快照读会退化为当前读。</li></ul><p><img src="http://images.hellocode.top/add3a04aa0ebcf9e48ac42d375649187.webp" alt="img" loading="lazy"></p><p>在测试中,我们看到即使事务B提交了数据,事务A中也查询不到。 原因就是因为普通的select是快照读，而在当前默认的RR隔离级别下，开启事务后第一个select语句才是快照读的地方，后面执行相同的select语句都是从快照中获取数据，可能不是当前的最新数据，这样也就保证了可重复读</p><p><strong>MVCC</strong></p><p>全称 Multi-Version Concurrency Control，多版本并发控制。指维护一个数据的多个版本，使得读写操作没有冲突，快照读为MySQL实现MVCC提供了一个非阻塞读功能。MVCC的具体实现，还需要依赖于数据库记录中的三个隐式字段、undo log日志、readView。</p><h4 id="_4-2-隐藏字段" tabindex="-1"><a class="header-anchor" href="#_4-2-隐藏字段" aria-hidden="true">#</a> 4.2. 隐藏字段</h4><p><strong>介绍</strong></p><p><img src="http://images.hellocode.top/7708e0b1f02b50a51c4a0e54b29f10f6.webp" alt="img" loading="lazy"></p><p>当我们创建了上面的这张表，我们在查看表结构的时候，就可以显式的看到这三个字段。 实际上除了这三个字段以外，InnoDB还会自动的给我们添加三个隐藏字段及其含义分别是：</p><table><thead><tr><th style="text-align:left;">隐藏字段</th><th style="text-align:left;">含义</th></tr></thead><tbody><tr><td style="text-align:left;">DB_TRX_ID</td><td style="text-align:left;">最近修改事务ID，记录插入这条记录或最后一次修改该记录的事务ID。</td></tr><tr><td style="text-align:left;">DB_ROLL_PTR</td><td style="text-align:left;">回滚指针，指向这条记录的上一个版本，用于配合undo log，指向上一个版本。</td></tr><tr><td style="text-align:left;">DB_ROW_ID</td><td style="text-align:left;">隐藏主键，如果表结构没有指定主键，将会生成该隐藏字段。</td></tr></tbody></table><p>而上述的前两个字段是肯定会添加的， 是否添加最后一个字段DB_ROW_ID，得看当前表有没有主键，如果有主键，则不会添加该隐藏字段。</p><p><strong>测试</strong></p><p><em>查看有主键的表 stu</em></p><p>进入服务器中的 /var/lib/mysql/MySQL_Advanced/ , 查看stu的表结构信息, 通过如下指令:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ibd2sdi stu.ibd
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看到的表结构信息中，有一栏 columns，在其中我们会看到处理我们建表时指定的字段以外，还有额外的两个字段 分别是：DB_TRX_ID 、 DB_ROLL_PTR ，因为该表有主键，所以没有DB_ROW_ID隐藏字段</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>            <span class="token punctuation">{</span>
                <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;DB_TRX_ID&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
                <span class="token property">&quot;is_nullable&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                <span class="token property">&quot;is_zerofill&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                <span class="token property">&quot;is_unsigned&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                <span class="token property">&quot;is_auto_increment&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                <span class="token property">&quot;is_virtual&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                <span class="token property">&quot;hidden&quot;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
                <span class="token property">&quot;ordinal_position&quot;</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>
                <span class="token property">&quot;char_length&quot;</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>
                <span class="token property">&quot;numeric_precision&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
                <span class="token property">&quot;numeric_scale&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
                <span class="token property">&quot;numeric_scale_null&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
                <span class="token property">&quot;datetime_precision&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
                <span class="token property">&quot;datetime_precision_null&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
                <span class="token property">&quot;has_no_default&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                <span class="token property">&quot;default_value_null&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
                <span class="token property">&quot;srs_id_null&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
                <span class="token property">&quot;srs_id&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
                <span class="token property">&quot;default_value&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;default_value_utf8_null&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
                <span class="token property">&quot;default_value_utf8&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;default_option&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;update_option&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;comment&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;generation_expression&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;generation_expression_utf8&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;options&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;se_private_data&quot;</span><span class="token operator">:</span> <span class="token string">&quot;table_id=1074;&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;engine_attribute&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;secondary_engine_attribute&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;column_key&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
                <span class="token property">&quot;column_type_utf8&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;elements&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                <span class="token property">&quot;collation_id&quot;</span><span class="token operator">:</span> <span class="token number">63</span><span class="token punctuation">,</span>
                <span class="token property">&quot;is_explicit_collation&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span>
                <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;DB_ROLL_PTR&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token number">9</span><span class="token punctuation">,</span>
                <span class="token property">&quot;is_nullable&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                <span class="token property">&quot;is_zerofill&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                <span class="token property">&quot;is_unsigned&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                <span class="token property">&quot;is_auto_increment&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                <span class="token property">&quot;is_virtual&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                <span class="token property">&quot;hidden&quot;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
                <span class="token property">&quot;ordinal_position&quot;</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
                <span class="token property">&quot;char_length&quot;</span><span class="token operator">:</span> <span class="token number">7</span><span class="token punctuation">,</span>
                <span class="token property">&quot;numeric_precision&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
                <span class="token property">&quot;numeric_scale&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
                <span class="token property">&quot;numeric_scale_null&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
                <span class="token property">&quot;datetime_precision&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
                <span class="token property">&quot;datetime_precision_null&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
                <span class="token property">&quot;has_no_default&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                <span class="token property">&quot;default_value_null&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
                <span class="token property">&quot;srs_id_null&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
                <span class="token property">&quot;srs_id&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
                <span class="token property">&quot;default_value&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;default_value_utf8_null&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
                <span class="token property">&quot;default_value_utf8&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;default_option&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;update_option&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;comment&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;generation_expression&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;generation_expression_utf8&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;options&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;se_private_data&quot;</span><span class="token operator">:</span> <span class="token string">&quot;table_id=1074;&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;engine_attribute&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;secondary_engine_attribute&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;column_key&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
                <span class="token property">&quot;column_type_utf8&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;elements&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                <span class="token property">&quot;collation_id&quot;</span><span class="token operator">:</span> <span class="token number">63</span><span class="token punctuation">,</span>
                <span class="token property">&quot;is_explicit_collation&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span>
            <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>查看没有主键的表 employee</em></p><p>建表语句：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> employee <span class="token punctuation">(</span>id <span class="token keyword">int</span> <span class="token punctuation">,</span> name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此时，我们再通过以下指令来查看表结构及其其中的字段信息：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ibd2sdi employee.ibd
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看到的表结构信息中，有一栏 columns，在其中我们会看到处理我们建表时指定的字段以外，还有额外的三个字段 分别是：DB_TRX_ID 、 DB_ROLL_PTR 、DB_ROW_ID，因为employee表是没有指定主键的。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>            <span class="token punctuation">{</span>
                <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;DB_ROW_ID&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
                <span class="token property">&quot;is_nullable&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                <span class="token property">&quot;is_zerofill&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                <span class="token property">&quot;is_unsigned&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                <span class="token property">&quot;is_auto_increment&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                <span class="token property">&quot;is_virtual&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                <span class="token property">&quot;hidden&quot;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
                <span class="token property">&quot;ordinal_position&quot;</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
                <span class="token property">&quot;char_length&quot;</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>
                <span class="token property">&quot;numeric_precision&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
                <span class="token property">&quot;numeric_scale&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
                <span class="token property">&quot;numeric_scale_null&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
                <span class="token property">&quot;datetime_precision&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
                <span class="token property">&quot;datetime_precision_null&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
                <span class="token property">&quot;has_no_default&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                <span class="token property">&quot;default_value_null&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
                <span class="token property">&quot;srs_id_null&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
                <span class="token property">&quot;srs_id&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
                <span class="token property">&quot;default_value&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;default_value_utf8_null&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
                <span class="token property">&quot;default_value_utf8&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;default_option&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;update_option&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;comment&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;generation_expression&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;generation_expression_utf8&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;options&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;se_private_data&quot;</span><span class="token operator">:</span> <span class="token string">&quot;table_id=1076;&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;engine_attribute&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;secondary_engine_attribute&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;column_key&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
                <span class="token property">&quot;column_type_utf8&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;elements&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                <span class="token property">&quot;collation_id&quot;</span><span class="token operator">:</span> <span class="token number">63</span><span class="token punctuation">,</span>
                <span class="token property">&quot;is_explicit_collation&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span>
                <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;DB_TRX_ID&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
                <span class="token property">&quot;is_nullable&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                <span class="token property">&quot;is_zerofill&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                <span class="token property">&quot;is_unsigned&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                <span class="token property">&quot;is_auto_increment&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                <span class="token property">&quot;is_virtual&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                <span class="token property">&quot;hidden&quot;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
                <span class="token property">&quot;ordinal_position&quot;</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>
                <span class="token property">&quot;char_length&quot;</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>
                <span class="token property">&quot;numeric_precision&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
                <span class="token property">&quot;numeric_scale&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
                <span class="token property">&quot;numeric_scale_null&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
                <span class="token property">&quot;datetime_precision&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
                <span class="token property">&quot;datetime_precision_null&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
                <span class="token property">&quot;has_no_default&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                <span class="token property">&quot;default_value_null&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
                <span class="token property">&quot;srs_id_null&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
                <span class="token property">&quot;srs_id&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
                <span class="token property">&quot;default_value&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;default_value_utf8_null&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
                <span class="token property">&quot;default_value_utf8&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;default_option&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;update_option&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;comment&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;generation_expression&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;generation_expression_utf8&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;options&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;se_private_data&quot;</span><span class="token operator">:</span> <span class="token string">&quot;table_id=1076;&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;engine_attribute&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;secondary_engine_attribute&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;column_key&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
                <span class="token property">&quot;column_type_utf8&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;elements&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                <span class="token property">&quot;collation_id&quot;</span><span class="token operator">:</span> <span class="token number">63</span><span class="token punctuation">,</span>
                <span class="token property">&quot;is_explicit_collation&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span>
                <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;DB_ROLL_PTR&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token number">9</span><span class="token punctuation">,</span>
                <span class="token property">&quot;is_nullable&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                <span class="token property">&quot;is_zerofill&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                <span class="token property">&quot;is_unsigned&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                <span class="token property">&quot;is_auto_increment&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                <span class="token property">&quot;is_virtual&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                <span class="token property">&quot;hidden&quot;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
                <span class="token property">&quot;ordinal_position&quot;</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
                <span class="token property">&quot;char_length&quot;</span><span class="token operator">:</span> <span class="token number">7</span><span class="token punctuation">,</span>
                <span class="token property">&quot;numeric_precision&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
                <span class="token property">&quot;numeric_scale&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
                <span class="token property">&quot;numeric_scale_null&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
                <span class="token property">&quot;datetime_precision&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
                <span class="token property">&quot;datetime_precision_null&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
                <span class="token property">&quot;has_no_default&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                <span class="token property">&quot;default_value_null&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
                <span class="token property">&quot;srs_id_null&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
                <span class="token property">&quot;srs_id&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
                <span class="token property">&quot;default_value&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;default_value_utf8_null&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
                <span class="token property">&quot;default_value_utf8&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;default_option&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;update_option&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;comment&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;generation_expression&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;generation_expression_utf8&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;options&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;se_private_data&quot;</span><span class="token operator">:</span> <span class="token string">&quot;table_id=1076;&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;engine_attribute&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;secondary_engine_attribute&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;column_key&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
                <span class="token property">&quot;column_type_utf8&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;elements&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                <span class="token property">&quot;collation_id&quot;</span><span class="token operator">:</span> <span class="token number">63</span><span class="token punctuation">,</span>
                <span class="token property">&quot;is_explicit_collation&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-3-undo-log版本链" tabindex="-1"><a class="header-anchor" href="#_4-3-undo-log版本链" aria-hidden="true">#</a> 4.3. undo log版本链</h4><ul><li><p>回滚日志，在insert、update、delete的时候产生的便于数据回滚的日志。</p></li><li><p>当insert的时候，产生的undo log日志只在回滚时需要，在事务提交后，可被立即删除。</p></li><li><p>而update、delete的时候，产生的undo log日志不仅在回滚时需要，在快照读时也需要，不会立即被删除。</p></li></ul><p>有一张表原始数据为：</p><p><img src="http://images.hellocode.top/e3e469e8f1cfc76306d25b2ca22d7b5b.webp" alt="img" loading="lazy"></p><blockquote><p><code>DB_TRX_ID</code> : 代表最近修改事务ID，记录插入这条记录或最后一次修改该记录的事务ID，是自增的</p><p><code>DB_ROLL_PTR</code>： 由于这条数据是才插入的，没有被更新过，所以该字段值为null</p></blockquote><p>然后，有四个并发事务同时在访问这张表</p><p>A. 第一步</p><p><img src="http://images.hellocode.top/155aaf8efd9eff7937aec6211f482479.webp" alt="img" loading="lazy"></p><p>当事务2执行第一条修改语句时，会记录undo log日志，记录数据变更之前的样子; 然后更新记录，并且记录本次操作的事务ID，回滚指针，回滚指针用来指定如果发生回滚，回滚到哪一个版本</p><p><img src="http://images.hellocode.top/e1aa6163b8abd39b0f4057ade590fcaa.webp" alt="img" loading="lazy"></p><p>B.第二步</p><p><img src="http://images.hellocode.top/00fe5f87ab12feeb5548825df662b0cd.webp" alt="img" loading="lazy"></p><p>当事务3执行第一条修改语句时，也会记录undo log日志，记录数据变更之前的样子; 然后更新记录，并且记录本次操作的事务ID，回滚指针，回滚指针用来指定如果发生回滚，回滚到哪一个版本</p><p><img src="http://images.hellocode.top/409012fc41f4dc56c7f6a65eab588514.webp" alt="img" loading="lazy"></p><p>C. 第三步</p><p><img src="http://images.hellocode.top/eb84a95ffa35d21922d9dcf90c88ed36.webp" alt="img" loading="lazy"></p><p>当事务4执行第一条修改语句时，也会记录undo log日志，记录数据变更之前的样子; 然后更新记录，并且记录本次操作的事务ID，回滚指针，回滚指针用来指定如果发生回滚，回滚到哪一个版本</p><p><img src="http://images.hellocode.top/3ea3ba508350cc5fbc5f97560419c9b4.webp" alt="img" loading="lazy"></p><blockquote><p>最终我们发现，不同事务或相同事务对同一条记录进行修改，会导致该记录的undolog生成一条记录版本链表，链表的头部是最新的旧记录，链表尾部是最早的旧记录</p></blockquote><h4 id="_4-4-readview" tabindex="-1"><a class="header-anchor" href="#_4-4-readview" aria-hidden="true">#</a> 4.4. readview</h4><p>ReadView（读视图）是 快照读 SQL执行时MVCC提取数据的依据，记录并维护系统当前活跃的事务（未提交的）id。</p><p>ReadView中包含了四个核心字段：</p><table><thead><tr><th style="text-align:left;">字段</th><th style="text-align:left;">含义</th></tr></thead><tbody><tr><td style="text-align:left;">m_ids</td><td style="text-align:left;">当前活跃的事务ID集合</td></tr><tr><td style="text-align:left;">min_trx_id</td><td style="text-align:left;">最小活跃事务ID</td></tr><tr><td style="text-align:left;">max_trx_id</td><td style="text-align:left;">预分配事务ID，当前最大事务ID+1（因为事务ID是自增的）</td></tr><tr><td style="text-align:left;">creator_trx_id</td><td style="text-align:left;">ReadView创建者的事务ID</td></tr></tbody></table><p>而在readview中就规定了版本链数据的访问规则：</p><ul><li><code>trx_id</code> 代表当前undolog版本链对应事务ID。</li></ul><table><thead><tr><th style="text-align:left;">条件</th><th style="text-align:left;">是否可以访问</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">trx_id == creator_trx_id</td><td style="text-align:left;">可以访问该版本</td><td style="text-align:left;">成立，说明数据是当前这个事务更改的。</td></tr><tr><td style="text-align:left;">trx_id &lt; min_trx_id</td><td style="text-align:left;">可以访问该版本</td><td style="text-align:left;">成立，说明数据已经提交了。</td></tr><tr><td style="text-align:left;">trx_id &gt; max_trx_id</td><td style="text-align:left;">不可以访问该版本</td><td style="text-align:left;">成立，说明该事务是在ReadView生成后才开启。</td></tr><tr><td style="text-align:left;">min_trx_id &lt;= trx_id &lt;= max_trx_id</td><td style="text-align:left;">如果trx_id不在m_ids中，是可以访问该版本的</td><td style="text-align:left;">成立，说明数据已经提交。</td></tr></tbody></table><p>不同的隔离级别，生成ReadView的时机不同：</p><ul><li>READ COMMITTED ：在事务中每一次执行快照读时生成ReadView。</li><li>REPEATABLE READ：仅在事务中第一次执行快照读时生成ReadView，后续复用该ReadView。</li></ul><p><strong>原理分析（RC级别）</strong></p><p>RC隔离级别下，在事务中<em>每一次</em>执行快照读时生成ReadView。</p><p>我们就来分析事务5中，两次快照读读取数据，是如何获取数据的?</p><p>在事务5中，查询了两次id为30的记录，由于隔离级别为Read Committed，所以每一次进行快照读都会生成一个ReadView，那么两次生成的ReadView如下。</p><p><img src="http://images.hellocode.top/b1a8ad2aacb2c193336a250ab0832303.webp" alt="img" loading="lazy"></p><p>那么这两次快照读在获取数据时，就需要根据所生成的ReadView以及ReadView的版本链访问规则，到undolog版本链中匹配数据，最终决定此次快照读返回的数据。</p><p>A. 先来看第一次快照读具体的读取过程：</p><p><img src="http://images.hellocode.top/55001a176b54ea69e192c2da8ca04065.webp" alt="img" loading="lazy"></p><p>在进行匹配时，会从undo log的版本链，从上到下进行挨个匹配：</p><ul><li>先匹配</li></ul><p><img src="http://images.hellocode.top/25a658c7c0c00a80549e7c9cbdcfd42e.webp" alt="img" loading="lazy"></p><p>这条记录，这条记录对应的trx_id为4，也就是将4带入右侧的匹配规则中。 ①不满足 ②不满足 ③不满足 ④也不满足 ，都不满足，则继续匹配undo log版本链的下一条。</p><ul><li>再匹配第二条</li></ul><p><img src="http://images.hellocode.top/e97fd975a25d41eecd0b5b19eed4c7f9.webp" alt="img" loading="lazy"></p><p>这条记录对应的trx_id为3，也就是将3带入右侧的匹配规则中。①不满足 ②不满足 ③不满足 ④也不满足 ，都不满足，则继续匹配undo log版本链的下一条。</p><ul><li>再匹配第三条</li></ul><p><img src="http://images.hellocode.top/e51ec6e232f1a39ccab163bc29481f90.webp" alt="img" loading="lazy"></p><p>这条记录对应的trx_id为2，也就是将2带入右侧的匹配规则中。①不满足 ②满足 终止匹配，此次快照读，返回的数据就是版本链中记录的这条数据。</p><p>B. 再来看第二次快照读具体的读取过程:</p><p><img src="http://images.hellocode.top/c06d01831bda547b871d9eaf8f76e839.webp" alt="img" loading="lazy"></p><p>在进行匹配时，会从undo log的版本链，从上到下进行挨个匹配：</p><ul><li>先匹配</li></ul><p><img src="http://images.hellocode.top/71a495e8b1f51cabf1acf110f796ffc8.webp" alt="img" loading="lazy"></p><p>这条记录，这条记录对应的trx_id为4，也就是将4带入右侧的匹配规则中。 ①不满足 ②不满足 ③不满足 ④也不满足 ，都不满足，则继续匹配undo log版本链的下一条。</p><ul><li>再匹配第二条</li></ul><p><img src="http://images.hellocode.top/666109098c2b4bc08d6ac6e7aa0fd157.webp" alt="img" loading="lazy"></p><p>这条记录对应的trx_id为3，也就是将3带入右侧的匹配规则中。①不满足 ②满足 。终止匹配，此次快照读，返回的数据就是版本链中记录的这条数据。</p><p><strong>原理分析（RR级别）</strong></p><p>RR隔离级别下，仅在事务中第一次执行快照读时生成ReadView，后续复用该ReadView。 而RR 是可重复读，在一个事务中，执行两次相同的select语句，查询到的结果是一样的。</p><p>那MySQL是如何做到可重复读的呢? 我们简单分析一下就知道了</p><p><img src="http://images.hellocode.top/9291e07b9874508cec6b5d281bff70fd.webp" alt="img" loading="lazy"></p><p>我们看到，在RR隔离级别下，只是在事务中<em>第一次</em>快照读时生成ReadView，后续都是复用该ReadView，那么既然ReadView都一样， ReadView的版本链匹配规则也一样， 那么最终快照读返回的结果也是一样的。</p><p>所以呢，MVCC的实现原理就是通过 InnoDB表的隐藏字段、UndoLog 版本链、ReadView来实现的。而MVCC + 锁，则实现了事务的隔离性。 而一致性则是由redolog 与 undolog保证</p><p><img src="http://images.hellocode.top/711ab7835498d388cf7d09881fe5ebdb.webp" alt="img" loading="lazy"></p><h2 id="十三、mysql管理" tabindex="-1"><a class="header-anchor" href="#十三、mysql管理" aria-hidden="true">#</a> 十三、MySQL管理</h2><h3 id="_1、系统数据库" tabindex="-1"><a class="header-anchor" href="#_1、系统数据库" aria-hidden="true">#</a> 1、系统数据库</h3><p>MySQL数据库安装完成后，自带了以下四个数据库，具体作用如下：</p><table><thead><tr><th>数据库</th><th>含义</th></tr></thead><tbody><tr><td>mysql</td><td>存储MySQL服务器正常运行所需要的各种信息（时区、主从、用户、权限等）</td></tr><tr><td>information_schema</td><td>提供了访问数据库元数据的各种表和视图，包含数据库、表、字段类型及访问权限等</td></tr><tr><td>performance_schema</td><td>为MySQL服务器运行时状态提供了一个底层监视功能，主要用于收集数据库服务器性能参数</td></tr><tr><td>sys</td><td>包含了一系列方便DBA和开发人员利用performance_schema性能数据库进行性能调优和诊断的视图</td></tr></tbody></table><h3 id="_2、常用工具" tabindex="-1"><a class="header-anchor" href="#_2、常用工具" aria-hidden="true">#</a> 2、常用工具</h3><h4 id="_2-1-mysql" tabindex="-1"><a class="header-anchor" href="#_2-1-mysql" aria-hidden="true">#</a> 2.1. mysql</h4><p>该mysql不是指mysql服务，而是指mysql的客户端工具</p><p><strong>语法</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">database</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>选项</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">-</span>u<span class="token punctuation">,</span> <span class="token comment">--user=name #指定用户名</span>
<span class="token operator">-</span>p<span class="token punctuation">,</span> <span class="token comment">--password[=name] #指定密码</span>
<span class="token operator">-</span>h<span class="token punctuation">,</span> <span class="token comment">--host=name #指定服务器IP或域名</span>
<span class="token operator">-</span>P<span class="token punctuation">,</span> <span class="token comment">--port=port #指定连接端口</span>
<span class="token operator">-</span>e<span class="token punctuation">,</span> <span class="token comment">--execute=name #执行SQL语句并退出</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>-e</code>选项可以在Mysql客户端执行SQL语句，而不用连接到MySQL数据库再执行，对于一些批处理脚本，这种方式尤其方便。</p><p>示例：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql <span class="token operator">-</span>uroot –p123456 db01 <span class="token operator">-</span>e <span class="token string">&quot;select * from stu&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://images.hellocode.top/b4630286dc7441709222fe53b5e566a4.png" alt="在这里插入图片描述" loading="lazy"></p><h4 id="_2-2-mysqladmin" tabindex="-1"><a class="header-anchor" href="#_2-2-mysqladmin" aria-hidden="true">#</a> 2.2. mysqladmin</h4><p>mysqladmin 是一个执行管理操作的客户端程序。可以用它来检查服务器的配置和当前状态、创建并删除数据库等。</p><p>通过帮助文档查看选项：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysqladmin <span class="token comment">--help</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://images.hellocode.top/94136f0b4c054fa1991af365a7777c74.png" alt="在这里插入图片描述" loading="lazy"></p><p><strong>语法:</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysqladmin <span class="token punctuation">[</span>options<span class="token punctuation">]</span> command <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>选项:</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">-</span>u<span class="token punctuation">,</span> <span class="token comment">--user=name #指定用户名</span>
<span class="token operator">-</span>p<span class="token punctuation">,</span> <span class="token comment">--password[=name] #指定密码</span>
<span class="token operator">-</span>h<span class="token punctuation">,</span> <span class="token comment">--host=name #指定服务器IP或域名</span>
<span class="token operator">-</span>P<span class="token punctuation">,</span> <span class="token comment">--port=port #指定连接端口</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例：</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysqladmin <span class="token operator">-</span>uroot –p1234 <span class="token keyword">drop</span> <span class="token string">&#39;test01&#39;</span><span class="token punctuation">;</span>
mysqladmin <span class="token operator">-</span>uroot –p1234 version<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://images.hellocode.top/eb2adc8b40a34ff5b763e5b683512993.png" alt="在这里插入图片描述" loading="lazy"></p><h4 id="_2-3-mysqlbinlog" tabindex="-1"><a class="header-anchor" href="#_2-3-mysqlbinlog" aria-hidden="true">#</a> 2.3. mysqlbinlog</h4><p>由于服务器生成的二进制日志文件以二进制格式保存，所以如果想要检查这些文本的文本格式，就会使用到mysqlbinlog 日志管理工具。</p><p><strong>语法 ：</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysqlbinlog <span class="token punctuation">[</span>options<span class="token punctuation">]</span> log<span class="token operator">-</span>files1 log<span class="token operator">-</span>files2 <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>选项 ：</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">-</span>d<span class="token punctuation">,</span> <span class="token comment">--database=name 指定数据库名称，只列出指定的数据库相关操作。</span>
<span class="token operator">-</span>o<span class="token punctuation">,</span> <span class="token comment">--offset=# 忽略掉日志中的前n行命令。</span>
<span class="token operator">-</span>r<span class="token punctuation">,</span><span class="token comment">--result-file=name 将输出的文本格式日志输出到指定文件。</span>
<span class="token operator">-</span>s<span class="token punctuation">,</span> <span class="token comment">--short-form 显示简单格式， 省略掉一些信息。</span>
<span class="token comment">--start-datatime=date1 --stop-datetime=date2 指定日期间隔内的所有日志。</span>
<span class="token comment">--start-position=pos1 --stop-position=pos2 指定位置间隔内的所有日志。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例:</strong></p><p>A. 查看 binlog.000008这个二进制文件中的数据信息</p><p><img src="http://images.hellocode.top/5a72351c0862404382d8b4d356c5b947.png" alt="在这里插入图片描述" loading="lazy"></p><p>上述查看到的二进制日志文件数据信息量太多了，不方便查询。 我们可以加上一个参数 <code>-s</code> 来显示简单格式。</p><p><img src="http://images.hellocode.top/7770a6e6a6b7427cb8b85666cb078113.png" alt="在这里插入图片描述" loading="lazy"></p><h4 id="_2-4-mysqlshow" tabindex="-1"><a class="header-anchor" href="#_2-4-mysqlshow" aria-hidden="true">#</a> 2.4. mysqlshow</h4><p>mysqlshow 客户端对象查找工具，用来很快地查找存在哪些数据库、数据库中的表、表中的列或者索引。</p><p><strong>语法 ：</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysqlshow <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token punctuation">[</span>db_name <span class="token punctuation">[</span>table_name <span class="token punctuation">[</span>col_name<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>选项 ：</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">--count 显示数据库及表的统计信息（数据库，表 均可以不指定）</span>
<span class="token operator">-</span>i 显示指定数据库或者指定表的状态信息
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例：</strong></p><ul><li>查询test库中每个表中的字段书，及行数</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysqlshow <span class="token operator">-</span>uroot <span class="token operator">-</span>p2143 test <span class="token comment">--count</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>查询test库中book表的详细情况</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysqlshow <span class="token operator">-</span>uroot <span class="token operator">-</span>p2143 test book <span class="token comment">--count</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>查询每个数据库的表的数量及表中记录的数量</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysqlshow <span class="token operator">-</span>uroot <span class="token operator">-</span>p
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://images.hellocode.top/6dc43d1c37544abb8af6ecd5bbead4da.png" alt="在这里插入图片描述" loading="lazy"></p><ul><li>查看数据库db01的统计信息</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysqlshow <span class="token operator">-</span>uroot <span class="token operator">-</span>p1234 db01 <span class="token comment">--count</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://images.hellocode.top/2c848d6e11954bee940c50585616d92e.png" alt="在这里插入图片描述" loading="lazy"></p><ul><li>查看数据库db01中的course表的信息</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysqlshow <span class="token operator">-</span>uroot <span class="token operator">-</span>p1234 db01 course <span class="token comment">--count</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://images.hellocode.top/430be2f1728e4088bc900eec6594e3c0.png" alt="在这里插入图片描述" loading="lazy"></p><ul><li>查看数据库db01中的course表的id字段的信息</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysqlshow <span class="token operator">-</span>uroot <span class="token operator">-</span>p1234 db01 course id <span class="token comment">--count</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://images.hellocode.top/887e56738cea432db4befe84de52691f.png" alt="在这里插入图片描述" loading="lazy"></p><h4 id="_2-5-mysqldump" tabindex="-1"><a class="header-anchor" href="#_2-5-mysqldump" aria-hidden="true">#</a> 2.5. mysqldump</h4><p>mysqldump 客户端工具用来备份数据库或在不同数据库之间进行数据迁移。备份内容包含创建表，及插入表的SQL语句。</p><p><strong>语法 ：</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysqldump <span class="token punctuation">[</span>options<span class="token punctuation">]</span> db_name <span class="token punctuation">[</span><span class="token keyword">tables</span><span class="token punctuation">]</span>
mysqldump <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token comment">--database/-B db1 [db2 db3...]</span>
mysqldump <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token comment">--all-databases/-A</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>连接选项 ：</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">-</span>u<span class="token punctuation">,</span> <span class="token comment">--user=name 指定用户名</span>
<span class="token operator">-</span>p<span class="token punctuation">,</span> <span class="token comment">--password[=name] 指定密码</span>
<span class="token operator">-</span>h<span class="token punctuation">,</span> <span class="token comment">--host=name 指定服务器ip或域名</span>
<span class="token operator">-</span>P<span class="token punctuation">,</span> <span class="token comment">--port=# 指定连接端口</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出选项：</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">--add-drop-database 在每个数据库创建语句前加上 drop database 语句</span>
<span class="token comment">--add-drop-table 在每个表创建语句前加上 drop table 语句 , 默认开启 ; 不开启 (--skip-add-drop-table)</span>
<span class="token operator">-</span>n<span class="token punctuation">,</span> <span class="token comment">--no-create-db 不包含数据库的创建语句</span>
<span class="token operator">-</span>t<span class="token punctuation">,</span> <span class="token comment">--no-create-info 不包含数据表的创建语句</span>
<span class="token operator">-</span>d <span class="token comment">--no-data 不包含数据</span>
<span class="token operator">-</span>T<span class="token punctuation">,</span> <span class="token comment">--tab=name 自动生成两个文件：一个.sql文件，创建表结构的语句；一</span>
个<span class="token punctuation">.</span>txt文件，数据文件
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例:</strong></p><p>A. 备份db01数据库</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysqldump <span class="token operator">-</span>uroot <span class="token operator">-</span>p1234 db01 <span class="token operator">&gt;</span> db01<span class="token punctuation">.</span><span class="token keyword">sql</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://images.hellocode.top/8df57035d50a4f9aa284186ecc79dced.png" alt="在这里插入图片描述" loading="lazy"></p><p>可以直接打开db01.sql，来查看备份出来的数据到底什么样。</p><p><img src="http://images.hellocode.top/ef036757af834274934fa1d3f6963c15.png" alt="在这里插入图片描述" loading="lazy"></p><p>备份出来的数据包含：</p><ul><li>删除表的语句</li><li>创建表的语句</li><li>数据插入语句</li></ul><p>如果我们在数据备份时，不需要创建表，或者不需要备份数据，只需要备份表结构，都可以通过对应的参数来实现。</p><p>B. 备份db01数据库中的表数据，不备份表结构(-t)</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysqldump <span class="token operator">-</span>uroot <span class="token operator">-</span>p1234 <span class="token operator">-</span>t db01 <span class="token operator">&gt;</span> db01<span class="token punctuation">.</span><span class="token keyword">sql</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://images.hellocode.top/0997990d2fe54f23a9c483fd89991cb7.png" alt="在这里插入图片描述" loading="lazy"></p><p>打开 db02.sql ，来查看备份的数据，只有insert语句，没有备份表结构。</p><p><img src="http://images.hellocode.top/feda1998c06c40a0b85be61e22e16fd9.png" alt="在这里插入图片描述" loading="lazy"></p><p>C. 将db01数据库的表的表结构与数据分开备份(-T)</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysqldump <span class="token operator">-</span>uroot <span class="token operator">-</span>p1234 <span class="token operator">-</span>T <span class="token operator">/</span>root db01 score
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://images.hellocode.top/6a2694ee11784b5aadd43b67eee0b107.png" alt="在这里插入图片描述" loading="lazy"></p><p>执行上述指令，会出错，数据不能完成备份，原因是因为我们所指定的数据存放目录/root，MySQL认为是不安全的，需要存储在MySQL信任的目录下。那么，哪个目录才是MySQL信任的目录呢，可以查看一下系统变量 secure_file_priv 。执行结果如下：</p><p><img src="http://images.hellocode.top/9682dca208544e648e0606a369dbc8cf.png" alt="在这里插入图片描述" loading="lazy"><img src="http://images.hellocode.top/ae775972f90044ad882c57752b2e601b.png" alt="在这里插入图片描述" loading="lazy"></p><p>上述的两个文件 score.sql 中记录的就是表结构文件，而 score.txt 就是表数据文件，但是需要注意表数据文件，并不是记录一条条的insert语句，而是按照一定的格式记录表结构中的数据。如下：</p><p><img src="http://images.hellocode.top/187c4d6c57e14fd8a92b68afc39b80cf.png" alt="在这里插入图片描述" loading="lazy"></p><h4 id="_2-6-mysqlimport-source" tabindex="-1"><a class="header-anchor" href="#_2-6-mysqlimport-source" aria-hidden="true">#</a> 2.6. mysqlimport/source</h4><p><strong>mysqlimport</strong></p><p>mysqlimport 是客户端数据导入工具，用来导入mysqldump 加 -T 参数后导出的文本文件。</p><p><em>语法 ：</em></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysqlimport <span class="token punctuation">[</span>options<span class="token punctuation">]</span> db_name textfile1 <span class="token punctuation">[</span>textfile2<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><em>示例 ：</em></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysqlimport <span class="token operator">-</span>uroot <span class="token operator">-</span>p2143 test <span class="token operator">/</span>tmp<span class="token operator">/</span>city<span class="token punctuation">.</span>txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://images.hellocode.top/48d82c8090484aa8a086330ea5866d99.png" alt="在这里插入图片描述" loading="lazy"></p><p><strong>source</strong></p><p>如果需要导入sql文件,可以使用mysql中的source 指令 :</p><p><em>语法 ：</em></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>source <span class="token operator">/</span>root<span class="token operator">/</span>xxxxx<span class="token punctuation">.</span><span class="token keyword">sql</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="十四、日志" tabindex="-1"><a class="header-anchor" href="#十四、日志" aria-hidden="true">#</a> 十四、日志</h2><h3 id="_1、错误日志" tabindex="-1"><a class="header-anchor" href="#_1、错误日志" aria-hidden="true">#</a> 1、错误日志</h3><p>错误日志是MySQL中最重要的日志之一，它记录了当mysqld启动和停止时，以及服务器在运行过程中发生任何严重错误时的相关信息。当数据库出现任何故障导致无法正常使用时，建议首先查看此日志</p><ul><li><p>该日志是默认开启的，默认存放目录 /var/log/，默认的日志文件名为 mysqld.log。查看日志位置：<code>show variables like &#39;%log_error%&#39;</code></p><p><img src="http://images.hellocode.top/aab1d76d220c44068ec7c977e2e3ab16.jpg" alt="img" loading="lazy"></p></li></ul><p>示例：打开一个连接，持续追踪错误日志。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 持续追踪错误日志</span>
<span class="token function">tail</span> <span class="token parameter variable">-f</span> /var/log/mysqld.log
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://images.hellocode.top/049d62a4c44047b79b2b37d9045015bf.jpg" alt="img" loading="lazy"></p><p>复制一个连接，去制造一个错误</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 编辑mysql配置文件</span>
<span class="token function">vim</span> /var/lib/mysql/auto.cnf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://images.hellocode.top/8cb10d86ee664dd0bb5e9094b8181b3e.jpg" alt="img" loading="lazy"><img src="http://images.hellocode.top/7392253088d5485bb7964035b54a46b6.jpg" alt="img" loading="lazy"></p><p>现在去重启<code>MySQL</code>服务</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> systemctl restart mysqld<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://images.hellocode.top/b1dd72f429dc41e88fd6c47f44d118cf.jpg" alt="img" loading="lazy"></p><p>我们现在去查看错误日志</p><p><img src="http://images.hellocode.top/85059f2101e5449eac0f920516dc421c.jpg" alt="img" loading="lazy"></p><p>然后我们把配置文件改回去就可以重启成功了</p><h3 id="_2、二进制日志" tabindex="-1"><a class="header-anchor" href="#_2、二进制日志" aria-hidden="true">#</a> 2、二进制日志</h3><p>二进制日志（BINLOG）记录了所有的 DDL（数据定义语言）语句和 DML（数据操纵语言）语句，但不包括数据查询（SELECT、SHOW）语句。</p><p><strong>作用：</strong></p><ul><li>灾难时的数据恢复</li><li>MySQL的主从复制</li></ul><p>在MySQL8版本中，默认二进制日志是开启着的，涉及到的参数如下：<code>show variables like &#39;%log_bin%&#39;;</code></p><p><img src="http://images.hellocode.top/6f061009412f4c98bae6b14007d72b40.jpg" alt="img" loading="lazy"></p><ul><li><code>log_bin_basename</code>：当前数据库服务器的 <em>binlog</em> 日志的基础名称（前缀），具体的 binlog 文件名需要再该 basename 的基础上加上编号(编号从000001开始)。</li><li><code>log_bin_index</code>：binlog 的索引文件，里面记录了当前服务器关联的 binlog 文件有哪些</li></ul><p><img src="http://images.hellocode.top/cf8a822bbf104872a00a0a0ed748ede6.jpg" alt="img" loading="lazy"></p><p>我们去查看 <code>binlog.index</code> 文件，查看当前服务器关联的 binlog 文件有哪些</p><p><img src="http://images.hellocode.top/d059494623364965b8298a4ed7efb25c.jpg" alt="img" loading="lazy"></p><p><strong>日志格式</strong></p><p>MySQL服务器中提供了多种格式来记录二进制日志，具体格式及特点如下：</p><p><img src="http://images.hellocode.top/5e6d2a60762d4bceaf633ddd041fca3e.jpg" alt="img" loading="lazy"></p><blockquote><p>STATEMENT会记录sql语句，而ROW会记录每一行数据变更。如果一条sql语句，影响了5行，ROW就会记录5条记录</p></blockquote><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 查看现在的日志格式</span>
<span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">&#39;%binlog_format%&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://images.hellocode.top/cb51aa09deef4bdf954ac3e679d7fcd7.jpg" alt="img" loading="lazy"></p><p>如果我们需要配置二进制日志的格式，只需要在 <code>/etc/my.cnf</code> 中配置 <code>binlog_format</code> 参数即可，但是需要重启<code>MySQL</code>服务才会生效</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 编辑配置文件</span>
<span class="token function">vim</span> /etc/my.cnf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://images.hellocode.top/beaddafd15a24c6f902a9c852f0b410e.jpg" alt="img" loading="lazy"></p><p><strong>日志查看</strong></p><p>由于日志是以二进制方式存储的，不能直接读取，需要通过二进制日志查询工具 <code>mysqlbinlog</code> 来查看，具体语法：</p><p><img src="http://images.hellocode.top/296eab7d3a1745ffbf804f781cffd027.jpg" alt="img" loading="lazy"></p><p>说明：如果日志格式是<code>ROW</code>，则需要加上参数 <code>-v</code> 或者 <code>-vv</code>才可以看到日志信息</p><p><strong>日志删除</strong></p><p>对于比较繁忙的业务系统，每天生成的binlog数据巨大，如果长时间不清除，将会占用大量磁盘空间。可以通过以下几种方式清理日志：</p><p><img src="http://images.hellocode.top/3bcf2af252274d67acd676f0fd70987f.jpg" alt="img" loading="lazy"></p><p>也可以在<code>MySQL</code>的配置文件中配置二进制日志的过期时间，设置了之后，二进制日志过期会自动删除。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 查看日志文件保存时长</span>
<span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">&#39;%binlog_expire_logs_seconds%&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://images.hellocode.top/3571ec6e157340c4a9014ac4be688334.jpg" alt="img" loading="lazy"></p><p>也可以自己去配置文件里面设置二进制日志的保存时间，设置完成后保存退出然后重启MySQL服务。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 编辑配置文件</span>
<span class="token function">vim</span> /etc/my.cnf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://images.hellocode.top/f350a2c783c94ab2a43552e5ebde0574.jpg" alt="img" loading="lazy"></p><h3 id="_3、查询日志" tabindex="-1"><a class="header-anchor" href="#_3、查询日志" aria-hidden="true">#</a> 3、查询日志</h3><p><em>查询日志中记录了客户端的所有操作语句</em>，而二进制日志不包含查询数据的SQL语句。<em>默认情况下，查询日志是未开启的</em>。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">&#39;%general%&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://images.hellocode.top/da3537614d6c48d695e7077efd412aba.jpg" alt="img" loading="lazy"></p><p>如果需要开启查询日志，可以修改<code>MySQL</code>的配置文件 <code>/etc/my.cnf</code> 文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 编辑配置文件</span>
<span class="token function">vim</span> /etc/my.cnf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>添加如下内容：然后保存退出并重启<code>MySQL</code>服务</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#该选项用来开启查询日志  可选值 ： 0 或者 1 ； 0 代表关闭， 1 代表开启 </span>
<span class="token assign-left variable">general_log</span><span class="token operator">=</span><span class="token number">1</span> 
<span class="token comment">#设置日志的文件名 ， 如果没有指定， 默认的文件名为 host_name.log(我这里是本机, 所有host为localhost)</span>
<span class="token assign-left variable">general_log_file</span><span class="token operator">=</span>/var/lib/mysql/mysql_query.log
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://images.hellocode.top/fff84a3a40464b75b69847540d225a0b.jpg" alt="img" loading="lazy"></p><p>开启了查询日志之后，在<code>MySQL</code>的数据存放目录，也就是 <code>/var/lib/mysql/</code> 目录下就会出现<code>mysql_query.log</code> 文件。之后所有的客户端的增删改查操作都会记录在该日志文件之中，长时间运行后，该日志文件将会非常大</p><h3 id="_4、慢查询日志" tabindex="-1"><a class="header-anchor" href="#_4、慢查询日志" aria-hidden="true">#</a> 4、慢查询日志</h3><p>慢查询日志记录了所有执行时间超过参数 <code>long_query_time</code> 设置值并且扫描记录数不小于 <code>min_examined_row_limit</code> 的所有的SQL语句的日志，默认未开启。<code>long_query_time</code> 默认为10 秒，最小为 0， 精度可以到微秒。</p><p><code>MySQL</code>的慢查询日志默认没有开启，我们可以查看一下系统变量 <code>slow_query_log</code>。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">&#39;slow_query_log&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://images.hellocode.top/0d315ae4deb5484b991467d032d63b39.jpg" alt="img" loading="lazy"></p><h4 id="_4-1-开启慢查询日志" tabindex="-1"><a class="header-anchor" href="#_4-1-开启慢查询日志" aria-hidden="true">#</a> 4.1. 开启慢查询日志</h4><p>如果要开启慢查询日志，需要在<code>MySQL</code>的配置文件（<code>/etc/my.cnf</code>）中配置如下信息：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 编辑/etc/my.cnf</span>
<span class="token function">vim</span> /etc/my.cnf
<span class="token comment"># 开启MySQL慢日志查询开关 </span>
<span class="token assign-left variable">slow_query_log</span><span class="token operator">=</span><span class="token number">1</span> 
<span class="token comment"># 设置慢日志的时间为2秒，SQL语句执行时间超过2秒，就会视为慢查询，记录慢查询日志 </span>
<span class="token assign-left variable">long_query_time</span><span class="token operator">=</span><span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://images.hellocode.top/ad8b4f098bab405ea6bf99a1f4a66646.jpg" alt="img" loading="lazy"></p><p>配置完毕之后，通过以下指令重新启动<code>MySQL</code>服务器进行测试</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 重新启动MySQL服务器</span>
systemctl restart mysqld
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>查看慢日志文件中记录的信息<code>/var/lib/mysql/localhost-slow.log</code></p><p>然后，再次查看开关情况，慢查询日志就已经打开了</p><p><img src="http://images.hellocode.top/3c9d8535624c4f09a21a2a5861e30252.jpg" alt="img" loading="lazy"></p><h4 id="_4-2-慢查询日志测试" tabindex="-1"><a class="header-anchor" href="#_4-2-慢查询日志测试" aria-hidden="true">#</a> 4.2. 慢查询日志测试</h4><p>执行如下SQL语句 ：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_user<span class="token punctuation">;</span> <span class="token comment">-- 这条SQL执行效率比较高, 执行耗时 40ms </span>
<span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> tb_sku<span class="token punctuation">;</span> <span class="token comment">-- 由于tb_sku表中, 预先存入了1000w的记录, count一次,耗时 13.35 s</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://images.hellocode.top/a680a6314f1b43c586d7372a9917c5d2.jpg" alt="img" loading="lazy"></p><p>检查慢查询日志:</p><p>最终我们发现，在慢查询日志中，只会记录执行时间超多我们预设时间（<code>2s</code>）的SQL，执行较快的<code>SQL</code>是不会记录的</p><p><img src="http://images.hellocode.top/f7664ec9f2fe4bb5a0901e5f64a7a1d8.jpg" alt="img" loading="lazy"></p><p>那这样，通过慢查询日志，就可以定位出执行效率比较低的<code>SQL</code>，从而有针对性的进行优化。</p><h4 id="_4-3-补充说明" tabindex="-1"><a class="header-anchor" href="#_4-3-补充说明" aria-hidden="true">#</a> 4.3. 补充说明</h4><p>默认情况下，不会记录管理语句，也不会记录不使用索引进行查找的查询。可以使用<code>log_slow_admin_statements</code>和 更改此行为 <code>log_queries_not_using_indexes</code>，如下所述。还是使用<code>vim</code>编辑器编辑<code>/etc/my.cnf</code>文件并追加下面的内容</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 记录执行较慢的管理语句 </span>
log_slow_admin_statements <span class="token operator">=</span><span class="token number">1</span> 
<span class="token comment"># 记录执行较慢的未使用索引的语句 </span>
log_queries_not_using_indexes <span class="token operator">=</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="十五、主从复制" tabindex="-1"><a class="header-anchor" href="#十五、主从复制" aria-hidden="true">#</a> 十五、主从复制</h2><h3 id="_1、概述" tabindex="-1"><a class="header-anchor" href="#_1、概述" aria-hidden="true">#</a> 1、概述</h3><p>主从复制是指将数据库的DDL 和 DML 操作通过二进制日志传到从库服务器中，然后在从库上对这些日志重新执行（也叫重做），从而使得从库和主库的数据保持同步</p><p>MySQL支持一台主库同时向多台从库进行复制， 从库同时也可以作为其他从服务器的主库，实现链状复制。</p><p><strong>优点</strong></p><ol><li>主库出现问题，可以快速切换到从库提供服务</li><li>实现读写分离（增删改操作主库、查询操作从库），降低主库的访问压力</li><li>可以在从库中执行备份（由于备份时要加上全局锁，数据库处于只读状态，其他客户端不能够执行增删改操作），以避免备份期间影响主库服务</li></ol><h3 id="_2、原理" tabindex="-1"><a class="header-anchor" href="#_2、原理" aria-hidden="true">#</a> 2、原理</h3><p><img src="http://images.hellocode.top/2691672-20220312134833209-1729378437.png" alt="img" loading="lazy"></p><p>从上图看，复制分成三步：</p><ol><li><p>Master主库在事务提交时，会把数据变更记录在二进制日志文件Binlog中</p></li><li><p>从库读取主库的二进制日志文件Binlog ,写入到从库的中继日志Relay Log</p></li><li><p>slave重做中继日志中的事件，将改变反映它自己的数据</p></li></ol><h3 id="_3、搭建" tabindex="-1"><a class="header-anchor" href="#_3、搭建" aria-hidden="true">#</a> 3、搭建</h3><p><strong>主库配置</strong></p><p>首先准备两台主机并关闭防火墙:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 开放指定的3306端口号</span>
firewall-cmd <span class="token parameter variable">--zone</span><span class="token operator">=</span>public --add-port<span class="token operator">=</span><span class="token number">3306</span>/tcp <span class="token parameter variable">-permanent</span>
firewall-cmd <span class="token parameter variable">-reload</span>

<span class="token comment"># 或者关闭防火墙</span>
systemctl stop firewalld
<span class="token comment"># 关闭防火墙开机自启</span>
systemctl disable firewalld

<span class="token comment"># 查看firewall服务状态</span>
systemctl status firewalld
<span class="token comment"># 查看firewall的状态</span>
firewall-cmd <span class="token parameter variable">--state</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>检查mysql 运行状态</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl status mysqld
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>主库配置</strong></p><ol><li>在master 的配置文件（/usr/my.cnf）中，配置如下内容：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#mysql服务ID，保证整个集群环境中唯一，取值范围：1~ 2^32-1，默认为1</span>
server-id<span class="token operator">=</span><span class="token number">1</span>
<span class="token comment">#是否只读，1代表只读，0代表读写</span>
read-only<span class="token operator">=</span><span class="token number">0</span>

<span class="token comment">#忽略的数据，指不需要同步的数据库</span>
<span class="token comment">#binlog-ignore-db=mysql</span>

<span class="token comment">#指定同步的数据库</span>
<span class="token comment">#binlog-do-db=db01</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>执行完毕之后，需要重启Mysql</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl restart mysqld
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>登录mysql，创建远程连接的账号，并授予主从复制权限</li></ol><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 创建itcast用户，并设置密码，该用户可在任意主机连接该MySQL服务</span>
<span class="token keyword">CREATE</span> <span class="token keyword">USER</span> <span class="token string">&#39;hellocode&#39;</span><span class="token variable">@&#39;%&#39;</span> IDENTIFIED <span class="token keyword">WITH</span> mysql_native_password <span class="token keyword">BY</span> <span class="token string">&#39;Root@123456&#39;</span><span class="token punctuation">;</span>

<span class="token comment"># 为 &#39;hellocode&#39;@&#39;%&#39; 用户分配主从复制权限</span>
<span class="token keyword">GRANT</span> <span class="token keyword">REPLICATION</span> SLAVE <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token string">&#39;hellocode&#39;</span><span class="token variable">@&#39;%&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>通过指令，查看二进制日志坐标</li></ol><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">show</span> master <span class="token keyword">status</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://images.hellocode.top/Y8QXe9vmSbCDZgp.png" alt="image-20220419104027294" loading="lazy"></p><p>字段含义：</p><ul><li>File : 从哪个日志文件开始推送日志文件</li><li>Position ： 从哪个位置开始推送日志</li><li>Binlog_Ignore_DB : 指定不需要同步的数据库</li></ul><p><strong>从库配置</strong></p><ol><li>在 slave 端配置文件中，配置如下内容：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#mysql服务ID，保证整个集群环境中唯一，取值范围：1-232-1，和主库不一样即可</span>
server-id<span class="token operator">=</span><span class="token number">2</span>
<span class="token comment">#是否只读，1代表只读，0代表读写</span>
read-only<span class="token operator">=</span><span class="token number">1</span>
<span class="token comment"># 上述只读是针对普通用户的，如果要让超级管理员也是只读，可设置</span>
super-read-only<span class="token operator">=</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>执行完毕之后，需要重启Mysql：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl restart mysqld
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>登录mysql，设置主库配置</li></ol><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>CHANGE <span class="token keyword">REPLICATION</span> SOURCE <span class="token keyword">TO</span> SOURCE_HOST<span class="token operator">=</span><span class="token string">&#39;101.201.100.130&#39;</span><span class="token punctuation">,</span> SOURCE_USER<span class="token operator">=</span><span class="token string">&#39;hellocode&#39;</span><span class="token punctuation">,</span> SOURCE_PASSWORD<span class="token operator">=</span><span class="token string">&#39;Root@123456&#39;</span><span class="token punctuation">,</span> SOURCE_LOG_FILE<span class="token operator">=</span><span class="token string">&#39;binlog.000001&#39;</span><span class="token punctuation">,</span> SOURCE_LOG_POS<span class="token operator">=</span><span class="token number">156</span><span class="token punctuation">;</span>

<span class="token comment"># 上述是8.0.23中的语法。如果mysql是8.0.23之前的版本，执行如下SQL：</span>
CHANGE MASTER <span class="token keyword">TO</span> MASTER_HOST<span class="token operator">=</span><span class="token string">&#39;101.201.100.130&#39;</span><span class="token punctuation">,</span> MASTER_USER<span class="token operator">=</span><span class="token string">&#39;hellocode&#39;</span><span class="token punctuation">,</span> MASTER_PASSWORD<span class="token operator">=</span><span class="token string">&#39;Root@123456&#39;</span><span class="token punctuation">,</span> MASTER_LOG_FILE<span class="token operator">=</span><span class="token string">&#39;binlog.000001&#39;</span><span class="token punctuation">,</span> MASTER_LOG_POS<span class="token operator">=</span><span class="token number">156</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>参数名</th><th>含义</th><th>8.0.23之前</th></tr></thead><tbody><tr><td>SOURCE_HOST</td><td>主库IP地址</td><td>MASTER_HOST</td></tr><tr><td>SOURCE_USER</td><td>连接主库的用户名</td><td>MASTER_USER</td></tr><tr><td>SOURCE_PASSWORD</td><td>连接主库的密码</td><td>MASTER_PASSWORD</td></tr><tr><td>SOURCE_LOG_FILE</td><td>binlog日志文件名</td><td>MASTER_LOG_FILE</td></tr><tr><td>SOURCE_LOG_POS</td><td>binlog日志文件位置</td><td>MASTER_LOG_POS</td></tr></tbody></table><ol start="4"><li>开启同步操作，查看主从同步状态</li></ol><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 8.0.22 之后</span>
<span class="token keyword">start</span> replica
<span class="token comment"># 8.0.22 之前</span>
<span class="token keyword">start</span> slave


<span class="token comment">#查看主从同步状态</span>
<span class="token comment">#8.0.22 之后</span>
<span class="token keyword">show</span> replica <span class="token keyword">status</span><span class="token punctuation">[</span>\\G<span class="token punctuation">]</span>
<span class="token comment">#8.0.22 之前</span>
<span class="token keyword">show</span> slave <span class="token keyword">status</span><span class="token punctuation">[</span>\\G<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://images.hellocode.top/1242944-20200731220615750-785367599.png" alt="img" loading="lazy"></p><ol start="5"><li>查看是否成功，主要看 <code>replica_IO_Running</code> 和 <code>replica_SQL_Running</code>（都为YES）</li></ol><p><img src="http://images.hellocode.top/1242944-20200731221210968-1090580385.png" alt="img" loading="lazy"></p><p>注意：要保证上面两项都为YES,出现IO:NO的情况可能是我们两台主从服务器的UUID是相同的(因为我的两台虚拟机是安装过数据库之后克隆的,所以数据库所有信息一样)</p><p>解决:</p><p>分别去看看两台服务器的<code>/var/lib/mysql/auto.cof</code>果然UUID是相同的，随便改变一个数据库的UUID的数值，然后重启数据库</p><p><img src="http://images.hellocode.top/1242944-20200731221635857-1450230561.png" alt="img" loading="lazy"></p><p><img src="http://images.hellocode.top/1242944-20200731221722951-998507162.png" alt="img" loading="lazy"></p><p>再次执行</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">show</span> slave <span class="token keyword">status</span> \\G<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://images.hellocode.top/1242944-20200731221803140-480517976.png" alt="img" loading="lazy"></p><p><strong>验证同步操作</strong></p><ol><li>在主库中创建数据库，创建表，并插入数据 ：</li></ol><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">database</span> db01<span class="token punctuation">;</span>

<span class="token keyword">use</span> db01<span class="token punctuation">;</span>

<span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token keyword">user</span><span class="token punctuation">(</span>
    id <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>
    name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    sex <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token keyword">engine</span><span class="token operator">=</span><span class="token keyword">innodb</span> <span class="token keyword">default</span> <span class="token keyword">charset</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span>

<span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token keyword">user</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>sex<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">&#39;Tom&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token keyword">user</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>sex<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">&#39;Trigger&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token keyword">user</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>sex<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">&#39;Dawn&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>在从库中查询数据，进行验证：</li></ol><p>在从库中，可以查看到刚才创建的数据库</p><p>在该数据库中，查询user表中的数据：</p><p><img src="http://images.hellocode.top/1242944-20200731222432112-1110811858.png" alt="img" loading="lazy"></p><h2 id="十六、分库分表" tabindex="-1"><a class="header-anchor" href="#十六、分库分表" aria-hidden="true">#</a> 十六、分库分表</h2><h3 id="_1、介绍" tabindex="-1"><a class="header-anchor" href="#_1、介绍" aria-hidden="true">#</a> 1、介绍</h3><p>随着互联网及移动互联网的发展，应用系统的数据量也是呈指数式增长，若采用单数据库进行数据存储，存在以下性能瓶颈：</p><ol><li>IO瓶颈：热点数据太多，数据库缓存不足，产生大量磁盘IO，效率较低。请求数据太多，宽带不够，网络IO瓶颈</li><li>CPU瓶颈：排序、分组、连接查询、聚合统计等SQL会耗费大量的CPU资源，请求数太多，CPU出现瓶颈</li></ol><p><img src="http://images.hellocode.top/2217415-20220512215307597-374820340.png" alt="img" loading="lazy"></p><p>分库分表的中心思想就是将数据库分散存储，使得单一数据库/表的数据量变小来缓解单一数据库的性能问题，从而达到提升数据库性能的目的</p><p><strong>拆分方式</strong></p><p>分库分表的形式，主要是两种：垂直拆分和水平拆分。而拆分的粒度，一般又分为分库和分表，所以组成的拆分策略最终如下： <img src="http://images.hellocode.top/2217415-20220512215408794-246910451.png" alt="img" loading="lazy"></p><p><strong>垂直拆分</strong></p><p><em>垂直分库</em><img src="http://images.hellocode.top/2217415-20220512215437084-239767106.png" alt="img" loading="lazy"></p><p>垂直分库：以表为依据，根据业务将不同表拆分到不同库中</p><p>特点：</p><ul><li>每个库的表结构都不一样。</li><li>每个库的数据也不一样。</li><li>所有库的并集是全量数据。</li></ul><p><em>垂直分表</em><img src="http://images.hellocode.top/2217415-20220512215511640-657981669.png" alt="img" loading="lazy"></p><p>垂直分表：以字段为依据，根据字段属性将不同字段拆分到不同表中</p><p>特点：</p><ul><li>每个表的结构都不一样。</li><li>每个表的数据也不一样，一般通过一列（主键/外键）关联。</li><li>所有表的并集是全量数据</li></ul><p><strong>水平拆分</strong></p><p><em>水平分库</em><img src="http://images.hellocode.top/2217415-20220512215554280-634496619.png" alt="img" loading="lazy"></p><p>水平分库：以字段为依据，按照一定策略，将一个库的数据拆分到多个库中。</p><p>特点：</p><ul><li>每个库的表结构都一样。</li><li>每个库的数据都不一样。</li><li>所有库的并集是全量数据。</li></ul><p><em>水平分表</em><img src="http://images.hellocode.top/2217415-20220512215631589-1629183972.png" alt="img" loading="lazy"></p><p>水平分表：以字段为依据，按照一定策略，将一个表的数据拆分到多个表中。</p><p>特点：</p><ul><li>每个表的表结构都一样。</li><li>每个表的数据都不一样。</li><li>所有表的并集是全量数据。</li></ul><blockquote><p>在业务系统中，为了缓解磁盘IO及CPU的性能瓶颈，到底是垂直拆分，还是水平拆分；具体是分库，还是分表，都需要根据具体的业务需求具体分析。</p></blockquote><p><strong>实现技术</strong></p><ul><li>shardingJDBC：基于AOP原理，在应用程序中对本地执行的SQL进行拦截，解析、改写、路由处理。需要自行编码配置实现，只支持java语言，性能较高。</li><li>MyCat：数据库分库分表中间件，不用调整代码即可实现分库分表，支持多种语言，性能不及前者。</li></ul><p><img src="http://images.hellocode.top/2217415-20220512215735065-623054692.png" alt="img" loading="lazy"> 我们选择了是MyCat数据库中间件，通过MyCat中间件来完成分库分表操作。</p><h3 id="_2、mycat概述" tabindex="-1"><a class="header-anchor" href="#_2、mycat概述" aria-hidden="true">#</a> 2、Mycat概述</h3><p>Mycat是开源的、活跃的、基于Java语言编写的MySQL数据库中间件。可以像使用mysql一样来使用mycat，对于开发人员来说根本感觉不到mycat的存在</p><p>开发人员只需要连接MyCat即可，而具体底层用到几台数据库，每一台数据库服务器里面存储了什么数据，都无需关心。 具体的分库分表的策略，只需要在MyCat中配置即可 <img src="http://images.hellocode.top/2217415-20220512215812093-34303603.png" alt="img" loading="lazy"></p><p>优势：</p><ul><li>性能可靠稳定</li><li>强大的技术团队</li><li>体系完善</li><li>社区活跃</li></ul><p><strong>下载</strong></p>`,1077),v={href:"http://dl.mycat.org.cn/",target:"_blank",rel:"noopener noreferrer"},b=n("img",{src:"http://images.hellocode.top/2217415-20220513194237035-2076682590.png",alt:"img",loading:"lazy"},null,-1),g=n("p",null,"Mycat是采用java语言开发的开源的数据库中间件，支持Windows和Linux运行环境，下面介绍MyCat的Linux中的环境搭建。我们需要在准备好的服务器中安装如下软件。",-1),y=n("li",null,[n("p",null,"MySQL")],-1),h=n("li",null,[n("p",null,"JDK")],-1),q=n("li",null,[n("p",null,"Mycat")],-1),w=e(`<table><thead><tr><th>服务器</th><th>安装软件</th><th>说明</th></tr></thead><tbody><tr><td>192.168.200.210</td><td>JDK、Mycat</td><td>MyCat中间件服务器</td></tr><tr><td>192.168.200.210</td><td>MySQL</td><td>分片服务器</td></tr><tr><td>192.168.200.213</td><td>MySQL</td><td>分片服务器</td></tr><tr><td>192.168.200.214</td><td>MySQL</td><td>分片服务器</td></tr></tbody></table><p><strong>目录介绍</strong></p><p><img src="http://images.hellocode.top/2217415-20220513194518492-1782367079.png" alt="img" loading="lazy"></p><ul><li>bin : 存放可执行文件，用于启动停止mycat</li><li>conf：存放mycat的配置文件</li><li>lib：存放mycat的项目依赖包（jar）</li><li>logs：存放mycat的日志文件</li></ul><p><strong>概念介绍</strong></p><p>在MyCat的整体结构中，分为两个部分：上面的逻辑结构、下面的物理结构。 <img src="http://images.hellocode.top/2217415-20220513194611034-1187632995.png" alt="img" loading="lazy"></p><p>在MyCat的逻辑结构主要负责逻辑库、逻辑表、分片规则、分片节点等逻辑结构的处理，而具体的数据存储还是在物理结构，也就是数据库服务器中存储的。</p><p>在后面讲解MyCat入门以及MyCat分片时，还会讲到上面所提到的概念。</p><h3 id="_3、mycat入门" tabindex="-1"><a class="header-anchor" href="#_3、mycat入门" aria-hidden="true">#</a> 3、Mycat入门</h3><p>由于 tb_order 表中数据量很大，磁盘IO及容量都到达了瓶颈，现在需要对 tb_order 表进行数据分片，分为三个数据节点，每一个节点主机位于不同的服务器上, 具体的结构，参考下图： <img src="http://images.hellocode.top/2217415-20220513194730702-39688177.png" alt="img" loading="lazy"></p><h4 id="_3-1-环境准备" tabindex="-1"><a class="header-anchor" href="#_3-1-环境准备" aria-hidden="true">#</a> 3.1. 环境准备</h4><p>准备3台服务器：</p><ul><li><p>192.168.200.210：MyCat中间件服务器，同时也是第一个分片服务器。</p></li><li><p>192.168.200.213：第二个分片服务器。</p></li><li><p>192.168.200.214：第三个分片服务器。 <img src="http://images.hellocode.top/2217415-20220513194804633-1167785275.png" alt="img" loading="lazy"></p><p>并且在上述3台数据库中创建数据库 db01</p></li></ul><h4 id="_3-2-配置" tabindex="-1"><a class="header-anchor" href="#_3-2-配置" aria-hidden="true">#</a> 3.2. 配置</h4><p><strong>schema.xml</strong></p><p>在schema.xml中配置逻辑库、逻辑表、数据节点、节点主机等相关信息。具体的配置如下：</p><p><img src="http://images.hellocode.top/25626c3f88bf43d39088703a28927325.png" alt="img" loading="lazy"></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot;?&gt;</span> <span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mycat:schema</span> <span class="token name">SYSTEM</span> <span class="token string">&quot;schema.dtd&quot;</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mycat:</span>schema</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>mycat</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://io.mycat/<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>schema</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>DB01<span class="token punctuation">&quot;</span></span> <span class="token attr-name">checkSQLschema</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span> <span class="token attr-name">sqlMaxLimit</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>100<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>TB_ORDER<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dataNode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dn1,dn2,dn3<span class="token punctuation">&quot;</span></span> <span class="token attr-name">rule</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>auto-sharding-long<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>schema</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataNode</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dn1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dataHost</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dhost1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">database</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>db01<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataNode</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dn2<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dataHost</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dhost2<span class="token punctuation">&quot;</span></span> <span class="token attr-name">database</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>db01<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataNode</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dn3<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dataHost</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dhost3<span class="token punctuation">&quot;</span></span> <span class="token attr-name">database</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>db01<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataHost</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dhost1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">maxCon</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1000<span class="token punctuation">&quot;</span></span> <span class="token attr-name">minCon</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>10<span class="token punctuation">&quot;</span></span> <span class="token attr-name">balance</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0<span class="token punctuation">&quot;</span></span> <span class="token attr-name">writeType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dbType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mysql<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dbDriver</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>jdbc<span class="token punctuation">&quot;</span></span>
              <span class="token attr-name">switchType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">slaveThreshold</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>100<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>heartbeat</span><span class="token punctuation">&gt;</span></span>select user()<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>heartbeat</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>writeHost</span> <span class="token attr-name">host</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>master<span class="token punctuation">&quot;</span></span>
                   <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>jdbc:mysql://192.168.200.210:3306? useSSL=false<span class="token entity named-entity" title="&amp;">&amp;amp;</span>serverTimezone=Asia/Shanghai<span class="token entity named-entity" title="&amp;">&amp;amp;</span>characterEncoding=utf8<span class="token punctuation">&quot;</span></span>
                   <span class="token attr-name">user</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span> <span class="token attr-name">password</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1234<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataHost</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataHost</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dhost2<span class="token punctuation">&quot;</span></span> <span class="token attr-name">maxCon</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1000<span class="token punctuation">&quot;</span></span> <span class="token attr-name">minCon</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>10<span class="token punctuation">&quot;</span></span> <span class="token attr-name">balance</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0<span class="token punctuation">&quot;</span></span> <span class="token attr-name">writeType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dbType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mysql<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dbDriver</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>jdbc<span class="token punctuation">&quot;</span></span>
              <span class="token attr-name">switchType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">slaveThreshold</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>100<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>heartbeat</span><span class="token punctuation">&gt;</span></span>select user()<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>heartbeat</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>writeHost</span> <span class="token attr-name">host</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>master<span class="token punctuation">&quot;</span></span>
                   <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>jdbc:mysql://192.168.200.213:3306? useSSL=false<span class="token entity named-entity" title="&amp;">&amp;amp;</span>serverTimezone=Asia/Shanghai<span class="token entity named-entity" title="&amp;">&amp;amp;</span>characterEncoding=utf8<span class="token punctuation">&quot;</span></span>
                   <span class="token attr-name">user</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span> <span class="token attr-name">password</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1234<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataHost</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataHost</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dhost3<span class="token punctuation">&quot;</span></span> <span class="token attr-name">maxCon</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1000<span class="token punctuation">&quot;</span></span> <span class="token attr-name">minCon</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>10<span class="token punctuation">&quot;</span></span> <span class="token attr-name">balance</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0<span class="token punctuation">&quot;</span></span> <span class="token attr-name">writeType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dbType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mysql<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dbDriver</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>jdbc<span class="token punctuation">&quot;</span></span>
              <span class="token attr-name">switchType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">slaveThreshold</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>100<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>heartbeat</span><span class="token punctuation">&gt;</span></span>select user()<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>heartbeat</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>writeHost</span> <span class="token attr-name">host</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>master<span class="token punctuation">&quot;</span></span>
                   <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>jdbc:mysql://192.168.200.214:3306? useSSL=false<span class="token entity named-entity" title="&amp;">&amp;amp;</span>serverTimezone=Asia/Shanghai<span class="token entity named-entity" title="&amp;">&amp;amp;</span>characterEncoding=utf8<span class="token punctuation">&quot;</span></span>
                   <span class="token attr-name">user</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span> <span class="token attr-name">password</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1234<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataHost</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mycat:</span>schema</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>server.xml</strong></p><p>需要在server.xml中配置用户名、密码，以及用户的访问权限信息，具体的配置如下：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span> <span class="token attr-name">defaultAccount</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>123456<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>schemas<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>DB01
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- 表级 DML 权限设置 --&gt;</span>
    <span class="token comment">&lt;!-- &lt;privileges check=&quot;true&quot;&gt; 
    &lt;schema name=&quot;DB01&quot; dml=&quot;0110&quot; &gt; 
    &lt;table name=&quot;TB_ORDER&quot; dml=&quot;1110&quot;&gt;&lt;/table&gt; 
    &lt;/schema&gt; 
    &lt;/privileges&gt; --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>123456<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>schemas<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>DB01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>readOnly<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述的配置表示，定义了两个用户 root 和 user ，这两个用户都可以访问 DB01 这个逻辑库，访问密码都是123456，但是root用户访问DB01逻辑库，既可以读，又可以写，但是 user用户访问DB01逻辑库是只读的。</p><h4 id="_3-3-测试" tabindex="-1"><a class="header-anchor" href="#_3-3-测试" aria-hidden="true">#</a> 3.3. 测试</h4><p><strong>启动</strong></p><p>配置完毕后，先启动涉及到的3台分片服务器，然后启动MyCat服务器。切换到Mycat的安装目录，执行如下指令，启动Mycat：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#启动 </span>
bin/mycat start 

<span class="token comment">#停止 </span>
bin/mycat stop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Mycat启动之后，占用端口号 8066。 启动完毕之后，可以查看logs目录下的启动日志，查看Mycat是否启动完成</p><p><img src="http://images.hellocode.top/2217415-20220513202528432-1618467100.png" alt="img" loading="lazy"></p><p><strong>测试</strong></p><ol><li><p>连接MyCat</p><p>通过如下指令，就可以连接并登陆MyCat。</p></li></ol><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code>mysql -h 192.168.200.210 -P 8066 -uroot -p123456
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们看到我们是通过MySQL的指令来连接的MyCat，因为MyCat在底层实际上是模拟了MySQL的协议</p><ol start="2"><li><p>数据测试</p><p>然后就可以在MyCat中来创建表，并往表结构中插入数据，查看数据在MySQL中的分布情况。</p></li></ol><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> TB_ORDER <span class="token punctuation">(</span> 
    id <span class="token keyword">BIGINT</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    title <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span> 
    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span> 
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8 <span class="token punctuation">;</span> 

<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> TB_ORDER<span class="token punctuation">(</span>id<span class="token punctuation">,</span>title<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&#39;goods1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> TB_ORDER<span class="token punctuation">(</span>id<span class="token punctuation">,</span>title<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&#39;goods2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> TB_ORDER<span class="token punctuation">(</span>id<span class="token punctuation">,</span>title<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">&#39;goods3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> TB_ORDER<span class="token punctuation">(</span>id<span class="token punctuation">,</span>title<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&#39;goods1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> TB_ORDER<span class="token punctuation">(</span>id<span class="token punctuation">,</span>title<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&#39;goods2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> TB_ORDER<span class="token punctuation">(</span>id<span class="token punctuation">,</span>title<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">&#39;goods3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> TB_ORDER<span class="token punctuation">(</span>id<span class="token punctuation">,</span>title<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">5000000</span><span class="token punctuation">,</span><span class="token string">&#39;goods5000000&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> TB_ORDER<span class="token punctuation">(</span>id<span class="token punctuation">,</span>title<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">10000000</span><span class="token punctuation">,</span><span class="token string">&#39;goods10000000&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> TB_ORDER<span class="token punctuation">(</span>id<span class="token punctuation">,</span>title<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">10000001</span><span class="token punctuation">,</span><span class="token string">&#39;goods10000001&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> TB_ORDER<span class="token punctuation">(</span>id<span class="token punctuation">,</span>title<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">15000000</span><span class="token punctuation">,</span><span class="token string">&#39;goods15000000&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> TB_ORDER<span class="token punctuation">(</span>id<span class="token punctuation">,</span>title<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">15000001</span><span class="token punctuation">,</span><span class="token string">&#39;goods15000001&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>经过测试，我们发现，在往 TB_ORDER 表中插入数据时：</p><ul><li>如果id的值在1-500w之间，数据将会存储在第一个分片数据库中。</li><li>如果id的值在500w-1000w之间，数据将会存储在第二个分片数据库中。</li><li>如果id的值在1000w-1500w之间，数据将会存储在第三个分片数据库中。</li><li>如果id的值超出1500w，在插入数据时，将会报错。</li></ul><p>为什么会出现这种现象，数据到底落在哪一个分片服务器到底是如何决定的呢？</p><p>这是由逻辑表配置时的一个参数 rule 决定的，而这个参数配置的就是分片规则，关于分片规则的配置，在后面会详细讲解。</p><h3 id="_4、mycat配置" tabindex="-1"><a class="header-anchor" href="#_4、mycat配置" aria-hidden="true">#</a> 4、Mycat配置</h3><h4 id="_4-1-schema-xml" tabindex="-1"><a class="header-anchor" href="#_4-1-schema-xml" aria-hidden="true">#</a> 4.1. schema.xml</h4><p>schema.xml 作为MyCat中最重要的配置文件之一 , 涵盖了MyCat的逻辑库 、 逻辑表 、 分片规则、分片节点及数据源的配置</p><p><img src="http://images.hellocode.top/2217415-20220513202851266-327059999.png" alt="img" loading="lazy"></p><p>主要包含以下三组标签：</p><ul><li>schema标签</li><li>datanode标签</li><li>datahost标签</li></ul><p><strong>schema标签</strong></p><p><em>schema 定义逻辑库</em></p><p><img src="http://images.hellocode.top/2217415-20220513202928349-177943302.png" alt="img" loading="lazy"></p><ul><li><p>schema 标签用于定义 MyCat实例中的逻辑库 , 一个MyCat实例中, 可以有多个逻辑库 , 可以通过 schema 标签来划分不同的逻辑库。</p></li><li><p>MyCat中的逻辑库的概念，等同于MySQL中的database概念, 需要操作某个逻辑库下的表时, 也需要切换逻辑库(use xxx)。</p></li></ul><p>核心属性：</p><ul><li>name：指定自定义的逻辑库库名</li><li>checkSQLschema：在SQL语句操作时指定了数据库名称，执行时是否自动去除；true：自动去除，false：不自动去除</li><li>sqlMaxLimit：如果未指定limit进行查询，列表查询模式查询多少条记录</li></ul><p><em>schema 中的table定义逻辑表</em></p><p><img src="http://images.hellocode.top/2217415-20220513203021695-1374076442.png" alt="img" loading="lazy"></p><p>table 标签定义了MyCat中逻辑库schema下的逻辑表 , 所有需要拆分的表都需要在table标签中定义 。</p><p>核心属性：</p><ul><li>name：定义逻辑表表名，在该逻辑库下唯一</li><li>dataNode：定义逻辑表所属的dataNode，该属性需要与dataNode标签中name对应；多个dataNode逗号分隔</li><li>rule：分片规则的名字，分片规则名字是在rule.xml中定义的</li><li>primaryKey：逻辑表对应真实表的主键</li><li>type：逻辑表的类型，目前逻辑表只有全局表和普通表，如果未配置，就是普通表；全局表，配置为 global</li></ul><p><strong>datanode标签</strong></p><p><img src="http://images.hellocode.top/2217415-20220513203119347-1915658075.png" alt="img" loading="lazy"></p><p>核心属性：</p><ul><li>name：定义数据节点名称</li><li>dataHost：数据库实例主机名称，引用自 dataHost 标签中name属性</li><li>database：定义分片所属数据库</li></ul><p><strong>datahost标签</strong></p><p><img src="http://images.hellocode.top/2217415-20220513203236054-1407981822.png" alt="img" loading="lazy"></p><p>该标签在MyCat逻辑库中作为底层标签存在, 直接定义了具体的数据库实例、读写分离、心跳语句。</p><p>核心属性：</p><ul><li>name：唯一标识，供上层标签使用</li><li>maxCon/minCon：最大连接数/最小连接数</li><li>balance：负载均衡策略，取值 0,1,2,3</li><li>writeType：写操作分发方式（0：写操作转发到第一个writeHost，第一个挂了，切换到第二个；1：写操作随机分发到配置的writeHost）</li><li>dbDriver：数据库驱动，支持 native、jdbc</li></ul><h4 id="_4-2-rule-xml" tabindex="-1"><a class="header-anchor" href="#_4-2-rule-xml" aria-hidden="true">#</a> 4.2. rule.xml</h4><p>rule.xml中定义所有拆分表的规则, 在使用过程中可以灵活的使用分片算法, 或者对同一个分片算法使用不同的参数, 它让分片过程可配置化。主要包含两类标签：tableRule、Function</p><p><img src="http://images.hellocode.top/2217415-20220513203343156-35625421.png" alt="img" loading="lazy"></p><h4 id="_4-3-server-xml" tabindex="-1"><a class="header-anchor" href="#_4-3-server-xml" aria-hidden="true">#</a> 4.3. server.xml</h4><p>server.xml配置文件包含了MyCat的系统配置信息，主要有两个重要的标签：system、user</p><p><strong>system标签</strong></p><p><img src="http://images.hellocode.top/2217415-20220513203408597-1951177798.png" alt="img" loading="lazy"></p><p>主要配置MyCat中的系统配置信息，对应的系统配置项及其含义，如下：</p><table><thead><tr><th style="text-align:left;">属性</th><th style="text-align:left;">取值</th><th style="text-align:left;">含义</th></tr></thead><tbody><tr><td style="text-align:left;">charset</td><td style="text-align:left;">utf8</td><td style="text-align:left;">设置Mycat的字符集, 字符集需要与MySQL的 字符集保持一致</td></tr><tr><td style="text-align:left;">nonePasswordLogin</td><td style="text-align:left;">0,1</td><td style="text-align:left;">0为需要密码登陆、1为不需要密码登陆 ,默认 为0，设置为1则需要指定默认账户</td></tr><tr><td style="text-align:left;">useHandshakeV10</td><td style="text-align:left;">0,1</td><td style="text-align:left;">使用该选项主要的目的是为了能够兼容高版本 的jdbc驱动, 是否采用 HandshakeV10Packet来与client进行通 信, 1:是, 0:否</td></tr><tr><td style="text-align:left;">useSqlStat</td><td style="text-align:left;">0,1</td><td style="text-align:left;">开启SQL实时统计, 1 为开启 , 0 为关闭 ; 开启之后, MyCat会自动统计SQL语句的执行 情况 ; mysql -h 127.0.0.1 -P 9066 -u root -p 查看MyCat执行的SQL, 执行 效率比较低的SQL , SQL的整体执行情况、读 写比例等 ; show @@sql ; show @@sql.slow ; show @@sql.sum ;</td></tr><tr><td style="text-align:left;">useGlobleTableCheck</td><td style="text-align:left;">0,1</td><td style="text-align:left;">是否开启全局表的一致性检测。1为开启 ，0 为关闭 。</td></tr><tr><td style="text-align:left;">sqlExecuteTimeout</td><td style="text-align:left;">1000</td><td style="text-align:left;">SQL语句执行的超时时间 , 单位为 s ;</td></tr><tr><td style="text-align:left;">sequnceHandlerType</td><td style="text-align:left;">0,1,2</td><td style="text-align:left;">用来指定Mycat全局序列类型，0 为本地文 件，1 为数据库方式，2 为时间戳列方式，默 认使用本地文件方式，文件方式主要用于测试</td></tr><tr><td style="text-align:left;">sequnceHandlerPattern</td><td style="text-align:left;">正则表达式</td><td style="text-align:left;">必须带有MYCATSEQ或者 mycatseq进入序列 匹配流程 注意MYCATSEQ_有空格的情况</td></tr><tr><td style="text-align:left;">subqueryRelationshipCheck</td><td style="text-align:left;">true,false</td><td style="text-align:left;">子查询中存在关联查询的情况下,检查关联字 段中是否有分片字段 .默认 false</td></tr><tr><td style="text-align:left;">useCompression</td><td style="text-align:left;">0,1</td><td style="text-align:left;">开启mysql压缩协议 , 0 : 关闭, 1 : 开 启</td></tr><tr><td style="text-align:left;">fakeMySQLVersion</td><td style="text-align:left;">5.5,5.6</td><td style="text-align:left;">设置模拟的MySQL版本号</td></tr><tr><td style="text-align:left;">defaultSqlParser</td><td style="text-align:left;"></td><td style="text-align:left;">由于MyCat的最初版本使用了FoundationDB 的SQL解析器, 在MyCat1.3后增加了Druid 解析器, 所以要设置defaultSqlParser属 性来指定默认的解析器; 解析器有两个 : druidparser 和 fdbparser, 在 MyCat1.4之后,默认是druidparser, fdbparser已经废除了</td></tr><tr><td style="text-align:left;">processors</td><td style="text-align:left;">1,2....</td><td style="text-align:left;">指定系统可用的线程数量, 默认值为CPU核心 x 每个核心运行线程数量; processors 会 影响processorBufferPool, processorBufferLocalPercent, processorExecutor属性, 所有, 在性能 调优时, 可以适当地修改processors值</td></tr><tr><td style="text-align:left;">processorBufferChunk</td><td style="text-align:left;"></td><td style="text-align:left;">指定每次分配Socket Direct Buffer默认 值为4096字节, 也会影响BufferPool长度, 如果一次性获取字节过多而导致buffer不够 用, 则会出现警告, 可以调大该值</td></tr><tr><td style="text-align:left;">processorExecutor</td><td style="text-align:left;"></td><td style="text-align:left;">指定NIOProcessor上共享 businessExecutor固定线程池的大小; MyCat把异步任务交给 businessExecutor 线程池中, 在新版本的MyCat中这个连接池使 用频次不高, 可以适当地把该值调小</td></tr><tr><td style="text-align:left;">packetHeaderSize</td><td style="text-align:left;"></td><td style="text-align:left;">指定MySQL协议中的报文头长度, 默认4个字 节</td></tr><tr><td style="text-align:left;">maxPacketSize</td><td style="text-align:left;"></td><td style="text-align:left;">指定MySQL协议可以携带的数据最大大小, 默 认值为16M</td></tr><tr><td style="text-align:left;">idleTimeout</td><td style="text-align:left;">30</td><td style="text-align:left;">指定连接的空闲时间的超时长度;如果超时,将 关闭资源并回收, 默认30分钟</td></tr><tr><td style="text-align:left;">txIsolation</td><td style="text-align:left;">1,2,3,4</td><td style="text-align:left;">初始化前端连接的事务隔离级别,默认为 REPEATED_READ , 对应数字为3 READ_UNCOMMITED=1; READ_COMMITTED=2; REPEATED_READ=3; SERIALIZABLE=4;</td></tr><tr><td style="text-align:left;">sqlExecuteTimeout</td><td style="text-align:left;">300</td><td style="text-align:left;">执行SQL的超时时间, 如果SQL语句执行超时, 将关闭连接; 默认300秒;</td></tr><tr><td style="text-align:left;">serverPort</td><td style="text-align:left;">8066</td><td style="text-align:left;">定义MyCat的使用端口, 默认8066</td></tr><tr><td style="text-align:left;">managerPort</td><td style="text-align:left;">9066</td><td style="text-align:left;">定义MyCat的管理端口, 默认9066</td></tr></tbody></table><p><strong>user标签</strong></p><p>配置MyCat中的用户、访问密码，以及用户针对于逻辑库、逻辑表的权限信息，具体的权限描述方式及配置说明如下：</p><p><img src="http://images.hellocode.top/2217415-20220513204620930-322222562.png" alt="img" loading="lazy"></p><p>在测试权限操作时，我们只需要将 privileges 标签的注释放开。 在 privileges 下的schema标签中配置的dml属性配置的是逻辑库的权限。 在privileges的schema下的table标签的dml属性中配置逻辑表的权限</p><h3 id="_5、mycat分片" tabindex="-1"><a class="header-anchor" href="#_5、mycat分片" aria-hidden="true">#</a> 5、Mycat分片</h3><h4 id="_5-1-垂直拆分" tabindex="-1"><a class="header-anchor" href="#_5-1-垂直拆分" aria-hidden="true">#</a> 5.1. 垂直拆分</h4><p><strong>场景</strong></p><p>在业务系统中, 涉及以下表结构 ,但是由于用户与订单每天都会产生大量的数据, 单台服务器的数据存储及处理能力是有限的, 可以对数据库表进行拆分, 原有的数据库表如下</p><p><img src="http://images.hellocode.top/2217415-20220513204722380-1601416460.png" alt="img" loading="lazy"></p><p>现在考虑将其进行垂直分库操作，将商品相关的表拆分到一个数据库服务器，订单表拆分的一个数据库服务器，用户及省市区表拆分到一个服务器。最终结构如下：</p><p><img src="http://images.hellocode.top/2217415-20220513204751306-321557460.png" alt="img" loading="lazy"></p><p><strong>准备</strong></p><p>准备三台服务器，IP地址如图所示：</p><p><img src="http://images.hellocode.top/2217415-20220513204820264-651764290.png" alt="img" loading="lazy"></p><p>并且在192.168.200.210，192.168.200.213, 192.168.200.214上面创建数据库shopping。</p><p><strong>配置</strong></p><p><em>schema.xml</em></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>schema</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>SHOPPING<span class="token punctuation">&quot;</span></span> <span class="token attr-name">checkSQLschema</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span> <span class="token attr-name">sqlMaxLimit</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>100<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>tb_goods_base<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dataNode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dn1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">primaryKey</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>tb_goods_brand<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dataNode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dn1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">primaryKey</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>tb_goods_cat<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dataNode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dn1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">primaryKey</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>tb_goods_desc<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dataNode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dn1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">primaryKey</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>goods_id<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>tb_goods_item<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dataNode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dn1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">primaryKey</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>tb_order_item<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dataNode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dn2<span class="token punctuation">&quot;</span></span> <span class="token attr-name">primaryKey</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>tb_order_master<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dataNode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dn2<span class="token punctuation">&quot;</span></span> <span class="token attr-name">primaryKey</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>order_id<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>tb_order_pay_log<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dataNode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dn2<span class="token punctuation">&quot;</span></span> <span class="token attr-name">primaryKey</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>out_trade_no<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>tb_user<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dataNode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dn3<span class="token punctuation">&quot;</span></span> <span class="token attr-name">primaryKey</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>tb_user_address<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dataNode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dn3<span class="token punctuation">&quot;</span></span> <span class="token attr-name">primaryKey</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>tb_areas_provinces<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dataNode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dn3<span class="token punctuation">&quot;</span></span> <span class="token attr-name">primaryKey</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>tb_areas_city<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dataNode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dn3<span class="token punctuation">&quot;</span></span> <span class="token attr-name">primaryKey</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>tb_areas_region<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dataNode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dn3<span class="token punctuation">&quot;</span></span> <span class="token attr-name">primaryKey</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>schema</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataNode</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dn1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dataHost</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dhost1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">database</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>shopping<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataNode</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dn2<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dataHost</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dhost2<span class="token punctuation">&quot;</span></span> <span class="token attr-name">database</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>shopping<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataNode</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dn3<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dataHost</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dhost3<span class="token punctuation">&quot;</span></span> <span class="token attr-name">database</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>shopping<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataHost</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dhost1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">maxCon</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1000<span class="token punctuation">&quot;</span></span> <span class="token attr-name">minCon</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>10<span class="token punctuation">&quot;</span></span> <span class="token attr-name">balance</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0<span class="token punctuation">&quot;</span></span>
          <span class="token attr-name">writeType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dbType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mysql<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dbDriver</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>jdbc<span class="token punctuation">&quot;</span></span> <span class="token attr-name">switchType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span>
          <span class="token attr-name">slaveThreshold</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>100<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>heartbeat</span><span class="token punctuation">&gt;</span></span>select user()<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>heartbeat</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>writeHost</span> <span class="token attr-name">host</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>master<span class="token punctuation">&quot;</span></span>
           <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>jdbc:mysql://192.168.200.210:3306? useSSL=false<span class="token entity named-entity" title="&amp;">&amp;amp;</span>serverTimezone=Asia/Shanghai<span class="token entity named-entity" title="&amp;">&amp;amp;</span>characterEncoding=utf8<span class="token punctuation">&quot;</span></span>
           <span class="token attr-name">user</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span> <span class="token attr-name">password</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1234<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataHost</span><span class="token punctuation">&gt;</span></span> 


<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataHost</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dhost2<span class="token punctuation">&quot;</span></span> <span class="token attr-name">maxCon</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1000<span class="token punctuation">&quot;</span></span> <span class="token attr-name">minCon</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>10<span class="token punctuation">&quot;</span></span> <span class="token attr-name">balance</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0<span class="token punctuation">&quot;</span></span> <span class="token attr-name">writeType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dbType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mysql<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dbDriver</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>jdbc<span class="token punctuation">&quot;</span></span>
          <span class="token attr-name">switchType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">slaveThreshold</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>100<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>heartbeat</span><span class="token punctuation">&gt;</span></span>select user()<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>heartbeat</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>writeHost</span> <span class="token attr-name">host</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>master<span class="token punctuation">&quot;</span></span>
           <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>jdbc:mysql://192.168.200.213:3306? useSSL=false<span class="token entity named-entity" title="&amp;">&amp;amp;</span>serverTimezone=Asia/Shanghai<span class="token entity named-entity" title="&amp;">&amp;amp;</span>characterEncoding=utf8<span class="token punctuation">&quot;</span></span>
           <span class="token attr-name">user</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span> <span class="token attr-name">password</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1234<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataHost</span><span class="token punctuation">&gt;</span></span>


<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataHost</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dhost3<span class="token punctuation">&quot;</span></span> <span class="token attr-name">maxCon</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1000<span class="token punctuation">&quot;</span></span> <span class="token attr-name">minCon</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>10<span class="token punctuation">&quot;</span></span> <span class="token attr-name">balance</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0<span class="token punctuation">&quot;</span></span> <span class="token attr-name">writeType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dbType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mysql<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dbDriver</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>jdbc<span class="token punctuation">&quot;</span></span>
          <span class="token attr-name">switchType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">slaveThreshold</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>100<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>heartbeat</span><span class="token punctuation">&gt;</span></span>select user()<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>heartbeat</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>writeHost</span> <span class="token attr-name">host</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>master<span class="token punctuation">&quot;</span></span>
           <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>jdbc:mysql://192.168.200.214:3306? useSSL=false<span class="token entity named-entity" title="&amp;">&amp;amp;</span>serverTimezone=Asia/Shanghai<span class="token entity named-entity" title="&amp;">&amp;amp;</span>characterEncoding=utf8<span class="token punctuation">&quot;</span></span>
           <span class="token attr-name">user</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span> <span class="token attr-name">password</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1234<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataHost</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>server.xml</em></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span> <span class="token attr-name">defaultAccount</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>123456<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>schemas<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>SHOPPING<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
    
    <span class="token comment">&lt;!-- 表级 DML 权限设置 --&gt;</span>
    <span class="token comment">&lt;!-- 
    &lt;privileges check=&quot;true&quot;&gt; 
        &lt;schema name=&quot;DB01&quot; dml=&quot;0110&quot; &gt; 
            &lt;table name=&quot;TB_ORDER&quot; dml=&quot;1110&quot;&gt;&lt;/table&gt; 
        &lt;/schema&gt; 
    &lt;/privileges&gt; 
    --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>123456<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>schemas<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>SHOPPING<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>readOnly<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>测试</strong></p><ol><li><p>上传测试SQL脚本到服务器的/root目录 <img src="http://images.hellocode.top/2217415-20220513205837094-1786950836.png" alt="img" loading="lazy"></p></li><li><p>执行指令导入测试数据</p><p>重新启动MyCat后，在mycat的命令行中，通过source指令导入表结构，以及对应的数据，查看数据分布情况。</p></li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">source</span> /root/shopping-table.sql 
<span class="token builtin class-name">source</span> /root/shopping-insert.sql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>将表结构及对应的测试数据导入之后，可以检查一下各个数据库服务器中的表结构分布情况。 检查是否和我们准备工作中规划的服务器一致</p><p><img src="http://images.hellocode.top/2217415-20220513205849219-156893366.png" alt="img" loading="lazy"></p><ol start="3"><li>查询用户的收件人及收件人地址信息(包含省、市、区)。 在MyCat的命令行中，当我们执行以下多表联查的SQL语句时，可以正常查询出数据。</li></ol><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">select</span> ua<span class="token punctuation">.</span>user_id<span class="token punctuation">,</span> ua<span class="token punctuation">.</span>contact<span class="token punctuation">,</span> p<span class="token punctuation">.</span>province<span class="token punctuation">,</span> c<span class="token punctuation">.</span>city<span class="token punctuation">,</span> r<span class="token punctuation">.</span>area <span class="token punctuation">,</span> ua<span class="token punctuation">.</span>address <span class="token keyword">from</span> <span class="token class-name">tb_user_address</span> ua <span class="token punctuation">,</span><span class="token class-name">tb_areas_city</span> c <span class="token punctuation">,</span> <span class="token class-name">tb_areas_provinces</span> p <span class="token punctuation">,</span>tb_areas_region r 
<span class="token keyword">where</span> <span class="token class-name">ua</span><span class="token punctuation">.</span>province_id <span class="token operator">=</span> p<span class="token punctuation">.</span>provinceid <span class="token keyword">and</span> ua<span class="token punctuation">.</span>city_id <span class="token operator">=</span> c<span class="token punctuation">.</span>cityid <span class="token keyword">and</span> ua<span class="token punctuation">.</span>town_id <span class="token operator">=</span> r<span class="token punctuation">.</span>areaid <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://images.hellocode.top/2217415-20220513205902645-500807341.png" alt="img" loading="lazy"></p><ol start="4"><li>查询每一笔订单及订单的收件地址信息(包含省、市、区)。</li></ol><p>实现该需求对应的SQL语句如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> order_id <span class="token punctuation">,</span> payment <span class="token punctuation">,</span>receiver<span class="token punctuation">,</span> province <span class="token punctuation">,</span> city <span class="token punctuation">,</span> area <span class="token keyword">FROM</span> tb_order_master o <span class="token punctuation">,</span> tb_areas_provinces p <span class="token punctuation">,</span> tb_areas_city c <span class="token punctuation">,</span> tb_areas_region r 
<span class="token keyword">WHERE</span> o<span class="token punctuation">.</span>receiver_province <span class="token operator">=</span> p<span class="token punctuation">.</span>provinceid <span class="token operator">AND</span> o<span class="token punctuation">.</span>receiver_city <span class="token operator">=</span> c<span class="token punctuation">.</span>cityid <span class="token operator">AND</span> o<span class="token punctuation">.</span>receiver_region <span class="token operator">=</span> r<span class="token punctuation">.</span>areaid <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>但是现在存在一个问题，订单相关的表结构是在 192.168.200.213 数据库服务器中，而省市区的数据库表是在 192.168.200.214 数据库服务器中。那么在MyCat中执行是否可以成功呢？</p><p><img src="http://images.hellocode.top/2217415-20220513210003468-1720428993.png" alt="img" loading="lazy"></p><p>经过测试，我们看到，SQL语句执行报错。原因就是因为MyCat在执行该SQL语句时，需要往具体的数据库服务器中路由，而当前没有一个数据库服务器完全包含了订单以及省市区的表结构，造成SQL语句失败，报错。</p><p>对于上述的这种现象，我们如何来解决呢？ 下面我们介绍的全局表，就可以轻松解决这个问题。</p><p><strong>全局表</strong></p><p>对于省、市、区/县表tb_areas_provinces , tb_areas_city , tb_areas_region，是属于数据字典表，在多个业务模块中都可能会遇到，可以将其设置为全局表，利于业务操作。</p><p>修改schema.xml中的逻辑表的配置，修改 tb_areas_provinces、tb_areas_city、tb_areas_region 三个逻辑表，增加 type 属性，配置为global，就代表该表是全局表，就会在所涉及到的dataNode中创建给表。对于当前配置来说，也就意味着所有的节点中都有该表了。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>tb_areas_provinces<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dataNode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dn1,dn2,dn3<span class="token punctuation">&quot;</span></span> <span class="token attr-name">primaryKey</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>global<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>tb_areas_city<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dataNode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dn1,dn2,dn3<span class="token punctuation">&quot;</span></span> <span class="token attr-name">primaryKey</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>global<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>tb_areas_region<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dataNode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dn1,dn2,dn3<span class="token punctuation">&quot;</span></span> <span class="token attr-name">primaryKey</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>global<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://images.hellocode.top/2217415-20220513210212828-1507611425.png" alt="img" loading="lazy"></p><p>配置完毕后，重新启动MyCat。</p><ol><li>删除原来每一个数据库服务器中的所有表结构</li><li>通过source 指令，导入表及数据</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">source</span> /root/shopping-table.sql 
<span class="token builtin class-name">source</span> /root/shopping-insert.sql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>检查每一个数据库服务器中的表及数据分布，看到三个节点中都有这三张全局表</li><li>然后再次执行上面的多表联查的SQL语句</li></ol><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> order_id <span class="token punctuation">,</span> payment <span class="token punctuation">,</span>receiver<span class="token punctuation">,</span> province <span class="token punctuation">,</span> city <span class="token punctuation">,</span> area <span class="token keyword">FROM</span> tb_order_master o <span class="token punctuation">,</span> tb_areas_provinces p <span class="token punctuation">,</span> tb_areas_city c <span class="token punctuation">,</span> tb_areas_region r 
<span class="token keyword">WHERE</span> o<span class="token punctuation">.</span>receiver_province <span class="token operator">=</span> p<span class="token punctuation">.</span>provinceid <span class="token operator">AND</span> o<span class="token punctuation">.</span>receiver_city <span class="token operator">=</span> c<span class="token punctuation">.</span>cityid <span class="token operator">AND</span> o<span class="token punctuation">.</span>receiver_region <span class="token operator">=</span> r<span class="token punctuation">.</span>areaid <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://images.hellocode.top/2217415-20220513210315258-370014658.png" alt="img" loading="lazy"></p><p>​ 是可以正常执行成功的</p><ol start="5"><li>当在MyCat中更新全局表的时候，我们可以看到，所有分片节点中的数据都发生了变化，每个节点的全局表数据时刻保持一致。</li></ol><h4 id="_5-2-水平拆分" tabindex="-1"><a class="header-anchor" href="#_5-2-水平拆分" aria-hidden="true">#</a> 5.2. 水平拆分</h4><p><strong>场景</strong></p><p>在业务系统中, 有一张表(日志表), 业务系统每天都会产生大量的日志数据 , 单台服务器的数据存储及处理能力是有限的, 可以对数据库表进行拆分</p><p><img src="http://images.hellocode.top/2217415-20220513210553428-1766243949.png" alt="img" loading="lazy"></p><p><strong>准备</strong></p><p>准备三台服务器，具体的结构如下：</p><p><img src="http://images.hellocode.top/2217415-20220513210629501-1792837929.png" alt="img" loading="lazy"></p><p>并且，在三台数据库服务器中分表创建一个数据库itcast。</p><p><strong>配置</strong></p><p><em>schema.xml</em></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>schema</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ITCAST<span class="token punctuation">&quot;</span></span> <span class="token attr-name">checkSQLschema</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span> <span class="token attr-name">sqlMaxLimit</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>100<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> 
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>tb_log<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dataNode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dn4,dn5,dn6<span class="token punctuation">&quot;</span></span> <span class="token attr-name">primaryKey</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span> <span class="token attr-name">rule</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mod-long<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>schema</span><span class="token punctuation">&gt;</span></span> 

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataNode</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dn4<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dataHost</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dhost1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">database</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>itcast<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataNode</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dn5<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dataHost</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dhost2<span class="token punctuation">&quot;</span></span> <span class="token attr-name">database</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>itcast<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataNode</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dn6<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dataHost</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dhost3<span class="token punctuation">&quot;</span></span> <span class="token attr-name">database</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>itcast<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>tb_log表最终落在3个节点中，分别是 dn4、dn5、dn6 ，而具体的数据分别存储在 dhost1、dhost2、dhost3的itcast数据库中</p><p><em>server.xml</em></p><p>配置root用户既可以访问 SHOPPING 逻辑库，又可以访问ITCAST逻辑库。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span> <span class="token attr-name">defaultAccount</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>123456<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>schemas<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>SHOPPING,ITCAST
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 表级 DML 权限设置 --&gt;</span>
    <span class="token comment">&lt;!--
    &lt;privileges check=&quot;true&quot;&gt;
        &lt;schema name=&quot;DB01&quot; dml=&quot;0110&quot; &gt;
            &lt;table name=&quot;TB_ORDER&quot; dml=&quot;1110&quot;&gt;&lt;/table&gt;
        &lt;/schema&gt;
    &lt;/privileges&gt;
    --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>测试</strong></p><p>配置完毕后，重新启动MyCat，然后在mycat的命令行中，执行如下SQL创建表、并插入数据，查看数据分布情况。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> tb_log <span class="token punctuation">(</span> 
    id <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;ID&#39;</span><span class="token punctuation">,</span> 
    model_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;模块名&#39;</span><span class="token punctuation">,</span> 
    model_value <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;模块值&#39;</span><span class="token punctuation">,</span> 
    return_value <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;返回值&#39;</span><span class="token punctuation">,</span> 
    return_class <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;返回值类型&#39;</span><span class="token punctuation">,</span> 
    operate_user <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;操作用户&#39;</span><span class="token punctuation">,</span> 
    operate_time <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;操作时间&#39;</span><span class="token punctuation">,</span> 
    param_and_value <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;请求参数名及参数值&#39;</span><span class="token punctuation">,</span> 
    operate_class <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;操作类&#39;</span><span class="token punctuation">,</span> 
    operate_method <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;操作方法&#39;</span><span class="token punctuation">,</span> 
    cost_time <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;执行方法耗时, 单位 ms&#39;</span><span class="token punctuation">,</span> 
    source <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;来源 : 1 PC , 2 Android , 3 IOS&#39;</span><span class="token punctuation">,</span> 
    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span> 
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tb_log <span class="token punctuation">(</span>id<span class="token punctuation">,</span> model_name<span class="token punctuation">,</span> model_value<span class="token punctuation">,</span> return_value<span class="token punctuation">,</span> return_class<span class="token punctuation">,</span> operate_user<span class="token punctuation">,</span> operate_time<span class="token punctuation">,</span> param_and_value<span class="token punctuation">,</span> operate_class<span class="token punctuation">,</span> operate_method<span class="token punctuation">,</span> cost_time，source<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;insert&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;success&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;java.lang.String&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;10001&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;2022-01-06 18:12:28&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;{\\&quot;age\\&quot;:\\&quot;20\\&quot;,\\&quot;name\\&quot;:\\&quot;Tom\\&quot;,\\&quot;gender\\&quot;:\\&quot;1\\&quot;}&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;cn.itcast.contro ller.UserController&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;insert&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;10&#39;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tb_log <span class="token punctuation">(</span>id<span class="token punctuation">,</span> model_name<span class="token punctuation">,</span> model_value<span class="token punctuation">,</span> return_value<span class="token punctuation">,</span> return_class<span class="token punctuation">,</span> operate_user<span class="token punctuation">,</span> operate_time<span class="token punctuation">,</span> param_and_value<span class="token punctuation">,</span> operate_class<span class="token punctuation">,</span> operate_method<span class="token punctuation">,</span> cost_time，source<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;2&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;insert&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;success&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;java.lang.String&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;10001&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;2022-01-06 18:12:27&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;{\\&quot;age\\&quot;:\\&quot;20\\&quot;,\\&quot;name\\&quot;:\\&quot;Tom\\&quot;,\\&quot;gender\\&quot;:\\&quot;1\\&quot;}&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;cn.itcast.contro ller.UserController&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;insert&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;23&#39;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tb_log <span class="token punctuation">(</span>id<span class="token punctuation">,</span> model_name<span class="token punctuation">,</span> model_value<span class="token punctuation">,</span> return_value<span class="token punctuation">,</span> return_class<span class="token punctuation">,</span> operate_user<span class="token punctuation">,</span> operate_time<span class="token punctuation">,</span> param_and_value<span class="token punctuation">,</span> operate_class<span class="token punctuation">,</span> operate_method<span class="token punctuation">,</span> cost_time，source<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;3&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;update&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;success&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;java.lang.String&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;10001&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;2022-01-06 18:16:45&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;{\\&quot;age\\&quot;:\\&quot;20\\&quot;,\\&quot;name\\&quot;:\\&quot;Tom\\&quot;,\\&quot;gender\\&quot;:\\&quot;1\\&quot;}&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;cn.itcast.contro ller.UserController&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;update&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;34&#39;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tb_log <span class="token punctuation">(</span>id<span class="token punctuation">,</span> model_name<span class="token punctuation">,</span> model_value<span class="token punctuation">,</span> return_value<span class="token punctuation">,</span> return_class<span class="token punctuation">,</span> operate_user<span class="token punctuation">,</span> operate_time<span class="token punctuation">,</span> param_and_value<span class="token punctuation">,</span> operate_class<span class="token punctuation">,</span> operate_method<span class="token punctuation">,</span> cost_time，source<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;4&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;update&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;success&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;java.lang.String&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;10001&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;2022-01-06 18:16:45&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;{\\&quot;age\\&quot;:\\&quot;20\\&quot;,\\&quot;name\\&quot;:\\&quot;Tom\\&quot;,\\&quot;gender\\&quot;:\\&quot;1\\&quot;}&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;cn.itcast.contro ller.UserController&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;update&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;13&#39;</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tb_log <span class="token punctuation">(</span>id<span class="token punctuation">,</span> model_name<span class="token punctuation">,</span> model_value<span class="token punctuation">,</span> return_value<span class="token punctuation">,</span> return_class<span class="token punctuation">,</span> operate_user<span class="token punctuation">,</span> operate_time<span class="token punctuation">,</span> param_and_value<span class="token punctuation">,</span> operate_class<span class="token punctuation">,</span> operate_method<span class="token punctuation">,</span> cost_time，source<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;5&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;insert&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;success&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;java.lang.String&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;10001&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;2022-01-06 18:30:31&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;{\\&quot;age\\&quot;:\\&quot;200\\&quot;,\\&quot;name\\&quot;:\\&quot;TomCat\\&quot;,\\&quot;gender\\&quot;:\\&quot;0\\&quot;}&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;cn.itcast.co ntroller.UserController&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;insert&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;29&#39;</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tb_log <span class="token punctuation">(</span>id<span class="token punctuation">,</span> model_name<span class="token punctuation">,</span> model_value<span class="token punctuation">,</span> return_value<span class="token punctuation">,</span> return_class<span class="token punctuation">,</span> operate_user<span class="token punctuation">,</span> operate_time<span class="token punctuation">,</span> param_and_value<span class="token punctuation">,</span> operate_class<span class="token punctuation">,</span> operate_method<span class="token punctuation">,</span> cost_time，source<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;6&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;find&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;success&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;java.lang.String&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;10001&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;2022-01-06 18:30:31&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;{\\&quot;age\\&quot;:\\&quot;200\\&quot;,\\&quot;name\\&quot;:\\&quot;TomCat\\&quot;,\\&quot;gender\\&quot;:\\&quot;0\\&quot;}&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;cn.itcast.co ntroller.UserController&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;find&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;29&#39;</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-3-分片规则" tabindex="-1"><a class="header-anchor" href="#_5-3-分片规则" aria-hidden="true">#</a> 5.3. 分片规则</h4><p><strong>范围分片</strong></p><p><em>介绍</em></p><p>根据指定的字段及其配置的范围与数据节点的对应情况， 来决定该数据属于哪一个分片</p><p><img src="http://images.hellocode.top/2217415-20220513211442833-1629450749.png" alt="" loading="lazy"></p><p><em>配置</em></p><p>schema.xml逻辑表配置：</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token operator">&lt;</span>table name<span class="token operator">=</span><span class="token string">&quot;TB_ORDER&quot;</span> dataNode<span class="token operator">=</span><span class="token string">&quot;dn1,dn2,dn3&quot;</span> rule<span class="token operator">=</span><span class="token string">&quot;auto-sharding-long&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>schema.xml数据节点配置：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataNode</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dn1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dataHost</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dhost1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">database</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>db01<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataNode</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dn2<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dataHost</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dhost2<span class="token punctuation">&quot;</span></span> <span class="token attr-name">database</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>db01<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataNode</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dn3<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dataHost</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dhost3<span class="token punctuation">&quot;</span></span> <span class="token attr-name">database</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>db01<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>rule.xml分片规则配置：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tableRule</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>auto-sharding-long<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rule</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>columns</span><span class="token punctuation">&gt;</span></span>id<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>columns</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>algorithm</span><span class="token punctuation">&gt;</span></span>rang-long<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>algorithm</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rule</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tableRule</span><span class="token punctuation">&gt;</span></span> 

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>function</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>rang-long<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>io.mycat.route.function.AutoPartitionByLong<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mapFile<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>autopartition-long.txt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>defaultNode<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>function</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分片规则配置属性含义：</p><table><thead><tr><th style="text-align:left;">属性</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">columns</td><td style="text-align:left;">标识将要分片的表字段</td></tr><tr><td style="text-align:left;">algorithm</td><td style="text-align:left;">指定分片函数与function的对应关系</td></tr><tr><td style="text-align:left;">class</td><td style="text-align:left;">指定该分片算法对应的类</td></tr><tr><td style="text-align:left;">mapFile</td><td style="text-align:left;">对应的外部配置文件</td></tr><tr><td style="text-align:left;">type</td><td style="text-align:left;">默认值为0 ; 0 表示Integer , 1 表示String</td></tr><tr><td style="text-align:left;">defaultNode</td><td style="text-align:left;">默认节点 默认节点的所用:枚举分片时,如果碰到不识别的枚举值, 就让它路由到默认节点 ; 如果没有默认值,碰到不识别的则报错 。</td></tr></tbody></table><p>在rule.xml中配置分片规则时，关联了一个映射配置文件 autopartition-long.txt，该配置文件的配置如下：</p><div class="language-ini line-numbers-mode" data-ext="ini"><pre class="language-ini"><code><span class="token comment"># range start-end ,data node index </span>
<span class="token comment"># K=1000,M=10000. </span>
<span class="token key attr-name">0-500M</span><span class="token punctuation">=</span><span class="token value attr-value">0</span> 
<span class="token key attr-name">500M-1000M</span><span class="token punctuation">=</span><span class="token value attr-value">1</span> 
<span class="token key attr-name">1000M-1500M</span><span class="token punctuation">=</span><span class="token value attr-value">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>含义：0-500万之间的值，存储在0号数据节点(数据节点的索引从0开始) ； 500万-1000万之间的数据存储在1号数据节点 ； 1000万-1500万的数据节点存储在2号节点 ；</p><p>该分片规则，主要是针对于数字类型的字段适用。 在MyCat的入门程序中，我们使用的就是该分片规则。</p><p><strong>取模分片</strong></p><p><em>介绍</em></p><p>根据指定的字段值与节点数量进行求模运算，根据运算结果， 来决定该数据属于哪一个分片。</p><p><img src="http://images.hellocode.top/image-20230210140442414.png" alt="image-20230210140442414" loading="lazy"></p><p><em>配置</em></p><p>schema.xml逻辑表配置：</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token operator">&lt;</span>table name<span class="token operator">=</span><span class="token string">&quot;tb_log&quot;</span> dataNode<span class="token operator">=</span><span class="token string">&quot;dn4,dn5,dn6&quot;</span> primaryKey<span class="token operator">=</span><span class="token string">&quot;id&quot;</span> rule<span class="token operator">=</span><span class="token string">&quot;mod-long&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>schema.xml数据节点配置：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataNode</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dn4<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dataHost</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dhost1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">database</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>itcast<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataNode</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dn5<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dataHost</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dhost2<span class="token punctuation">&quot;</span></span> <span class="token attr-name">database</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>itcast<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataNode</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dn6<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dataHost</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dhost3<span class="token punctuation">&quot;</span></span> <span class="token attr-name">database</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>itcast<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>rule.xml分片规则配置：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tableRule</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mod-long<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rule</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>columns</span><span class="token punctuation">&gt;</span></span>id<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>columns</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>algorithm</span><span class="token punctuation">&gt;</span></span>mod-long<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>algorithm</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rule</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tableRule</span><span class="token punctuation">&gt;</span></span> 

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>function</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mod-long<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>io.mycat.route.function.PartitionByMod<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>count<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>function</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分片规则属性说明如下：</p><table><thead><tr><th style="text-align:left;">属性</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">columns</td><td style="text-align:left;">标识将要分片的表字段</td></tr><tr><td style="text-align:left;">algorithm</td><td style="text-align:left;">指定分片函数与function的对应关系</td></tr><tr><td style="text-align:left;">class</td><td style="text-align:left;">指定该分片算法对应的类</td></tr><tr><td style="text-align:left;">count</td><td style="text-align:left;">数据节点的数量</td></tr></tbody></table><p>该分片规则，主要是针对于数字类型的字段适用。 在前面水平拆分的演示中，我们选择的就是取模分片。</p><p><em>测试</em></p><p>配置完毕后，重新启动MyCat，然后在mycat的命令行中，执行如下SQL创建表、并插入数据，查看数据分布情况。</p><p><strong>一致性hash分片</strong></p><p><em>介绍</em></p><p>所谓一致性哈希，相同的哈希因子计算值总是被划分到相同的分区表中，不会因为分区节点的增加而改变原来数据的分区位置，有效的解决了分布式数据的拓容问题。</p><p><img src="http://images.hellocode.top/2217415-20220514182248342-215233009.png" alt="img" loading="lazy"></p><p><em>配置</em></p><p>schema.xml中逻辑表配置：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 一致性hash --&gt;</span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>tb_order<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dataNode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dn4,dn5,dn6<span class="token punctuation">&quot;</span></span> <span class="token attr-name">rule</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sharding-by-murmur<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>schema.xml中数据节点配置：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataNode</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dn4<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dataHost</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dhost1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">database</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>itcast<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataNode</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dn5<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dataHost</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dhost2<span class="token punctuation">&quot;</span></span> <span class="token attr-name">database</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>itcast<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataNode</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dn6<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dataHost</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dhost3<span class="token punctuation">&quot;</span></span> <span class="token attr-name">database</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>itcast<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>rule.xml中分片规则配置：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tableRule</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sharding-by-murmur<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rule</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>columns</span><span class="token punctuation">&gt;</span></span>id<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>columns</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>algorithm</span><span class="token punctuation">&gt;</span></span>murmur<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>algorithm</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rule</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tableRule</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>function</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>murmur<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>io.mycat.route.function.PartitionByMurmurHash<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>seed<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 默认是0 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>count<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>virtualBucketTimes<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>160<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>function</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分片规则属性含义：</p><table><thead><tr><th style="text-align:left;">属性</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">columns</td><td style="text-align:left;">标识将要分片的表字段</td></tr><tr><td style="text-align:left;">algorithm</td><td style="text-align:left;">指定分片函数与function的对应关系</td></tr><tr><td style="text-align:left;">class</td><td style="text-align:left;">指定该分片算法对应的类</td></tr><tr><td style="text-align:left;">seed</td><td style="text-align:left;">创建murmur_hash对象的种子，默认0</td></tr><tr><td style="text-align:left;">count</td><td style="text-align:left;">要分片的数据库节点数量，必须指定，否则没法分片</td></tr><tr><td style="text-align:left;">virtualBucketTimes</td><td style="text-align:left;">一个实际的数据库节点被映射为这么多虚拟节点，默认是160倍，也就是虚拟节点数是物理节点数的160倍;virtualBucketTimes*count就是虚拟结点数量 ;</td></tr><tr><td style="text-align:left;">weightMapFile</td><td style="text-align:left;">节点的权重，没有指定权重的节点默认是1。以properties文件的格式填写，以从0开始到count-1的整数值也就是节点索引为key，以节点权重值为值。所有权重值必须是正整数，否则以1代替</td></tr><tr><td style="text-align:left;">bucketMapPath</td><td style="text-align:left;">用于测试时观察各物理节点与虚拟节点的分布情况，如果指定了这个属性，会把虚拟节点的murmur hash值与物理节点的映射按行输出到这个文件，没有默认值，如果不指定，就不会输出任何东西</td></tr></tbody></table><p><em>测试</em></p><p>配置完毕后，重新启动MyCat，然后在mycat的命令行中，执行如下SQL创建表、并插入数据，查看数据分布情况。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> tb_order<span class="token punctuation">(</span> id <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span> money <span class="token keyword">int</span> <span class="token boolean">null</span><span class="token punctuation">,</span> content <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span> <span class="token boolean">null</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tb_order <span class="token punctuation">(</span>id<span class="token punctuation">,</span> money<span class="token punctuation">,</span> content<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;b92fdaaf-6fc4-11ec-b831- 482ae33c4a2d&#39;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">&#39;b92fdaf8-6fc4-11ec-b831-482ae33c4a2d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tb_order <span class="token punctuation">(</span>id<span class="token punctuation">,</span> money<span class="token punctuation">,</span> content<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;b93482b6-6fc4-11ec-b831- 482ae33c4a2d&#39;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">&#39;b93482d5-6fc4-11ec-b831-482ae33c4a2d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tb_order <span class="token punctuation">(</span>id<span class="token punctuation">,</span> money<span class="token punctuation">,</span> content<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;b937e246-6fc4-11ec-b831- 482ae33c4a2d&#39;</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token string">&#39;b937e25d-6fc4-11ec-b831-482ae33c4a2d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tb_order <span class="token punctuation">(</span>id<span class="token punctuation">,</span> money<span class="token punctuation">,</span> content<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;b93be2dd-6fc4-11ec-b831- 482ae33c4a2d&#39;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">&#39;b93be2f9-6fc4-11ec-b831-482ae33c4a2d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tb_order <span class="token punctuation">(</span>id<span class="token punctuation">,</span> money<span class="token punctuation">,</span> content<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;b93f2d68-6fc4-11ec-b831- 482ae33c4a2d&#39;</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">,</span> <span class="token string">&#39;b93f2d7d-6fc4-11ec-b831-482ae33c4a2d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tb_order <span class="token punctuation">(</span>id<span class="token punctuation">,</span> money<span class="token punctuation">,</span> content<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;b9451b98-6fc4-11ec-b831- 482ae33c4a2d&#39;</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token string">&#39;b9451bcc-6fc4-11ec-b831-482ae33c4a2d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tb_order <span class="token punctuation">(</span>id<span class="token punctuation">,</span> money<span class="token punctuation">,</span> content<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;b9488ec1-6fc4-11ec-b831- 482ae33c4a2d&#39;</span><span class="token punctuation">,</span> <span class="token number">560</span><span class="token punctuation">,</span> <span class="token string">&#39;b9488edb-6fc4-11ec-b831-482ae33c4a2d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tb_order <span class="token punctuation">(</span>id<span class="token punctuation">,</span> money<span class="token punctuation">,</span> content<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;b94be6e6-6fc4-11ec-b831- 482ae33c4a2d&#39;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">&#39;b94be6ff-6fc4-11ec-b831-482ae33c4a2d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tb_order <span class="token punctuation">(</span>id<span class="token punctuation">,</span> money<span class="token punctuation">,</span> content<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;b94ee10d-6fc4-11ec-b831- 482ae33c4a2d&#39;</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token string">&#39;b94ee12c-6fc4-11ec-b831-482ae33c4a2d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tb_order <span class="token punctuation">(</span>id<span class="token punctuation">,</span> money<span class="token punctuation">,</span> content<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;b952492a-6fc4-11ec-b831- 482ae33c4a2d&#39;</span><span class="token punctuation">,</span> <span class="token number">145</span><span class="token punctuation">,</span> <span class="token string">&#39;b9524945-6fc4-11ec-b831-482ae33c4a2d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tb_order <span class="token punctuation">(</span>id<span class="token punctuation">,</span> money<span class="token punctuation">,</span> content<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;b95553ac-6fc4-11ec-b831- 482ae33c4a2d&#39;</span><span class="token punctuation">,</span> <span class="token number">543</span><span class="token punctuation">,</span> <span class="token string">&#39;b95553c8-6fc4-11ec-b831-482ae33c4a2d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tb_order <span class="token punctuation">(</span>id<span class="token punctuation">,</span> money<span class="token punctuation">,</span> content<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;b9581cdd-6fc4-11ec-b831- 482ae33c4a2d&#39;</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token string">&#39;b9581cfa-6fc4-11ec-b831-482ae33c4a2d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tb_order <span class="token punctuation">(</span>id<span class="token punctuation">,</span> money<span class="token punctuation">,</span> content<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;b95afc0f-6fc4-11ec-b831- 482ae33c4a2d&#39;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">&#39;b95afc2a-6fc4-11ec-b831-482ae33c4a2d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tb_order <span class="token punctuation">(</span>id<span class="token punctuation">,</span> money<span class="token punctuation">,</span> content<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;b95daa99-6fc4-11ec-b831- 482ae33c4a2d&#39;</span><span class="token punctuation">,</span> <span class="token number">134</span><span class="token punctuation">,</span> <span class="token string">&#39;b95daab2-6fc4-11ec-b831-482ae33c4a2d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tb_order <span class="token punctuation">(</span>id<span class="token punctuation">,</span> money<span class="token punctuation">,</span> content<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;b9667e3c-6fc4-11ec-b831- 482ae33c4a2d&#39;</span><span class="token punctuation">,</span> <span class="token number">156</span><span class="token punctuation">,</span> <span class="token string">&#39;b9667e60-6fc4-11ec-b831-482ae33c4a2d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tb_order <span class="token punctuation">(</span>id<span class="token punctuation">,</span> money<span class="token punctuation">,</span> content<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;b96ab489-6fc4-11ec-b831- 482ae33c4a2d&#39;</span><span class="token punctuation">,</span> <span class="token number">175</span><span class="token punctuation">,</span> <span class="token string">&#39;b96ab4a5-6fc4-11ec-b831-482ae33c4a2d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tb_order <span class="token punctuation">(</span>id<span class="token punctuation">,</span> money<span class="token punctuation">,</span> content<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;b96e2942-6fc4-11ec-b831- 482ae33c4a2d&#39;</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">,</span> <span class="token string">&#39;b96e295b-6fc4-11ec-b831-482ae33c4a2d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tb_order <span class="token punctuation">(</span>id<span class="token punctuation">,</span> money<span class="token punctuation">,</span> content<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;b97092ec-6fc4-11ec-b831- 482ae33c4a2d&#39;</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token string">&#39;b9709306-6fc4-11ec-b831-482ae33c4a2d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tb_order <span class="token punctuation">(</span>id<span class="token punctuation">,</span> money<span class="token punctuation">,</span> content<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;b973727a-6fc4-11ec-b831- 482ae33c4a2d&#39;</span><span class="token punctuation">,</span> <span class="token number">230</span><span class="token punctuation">,</span> <span class="token string">&#39;b9737293-6fc4-11ec-b831-482ae33c4a2d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tb_order <span class="token punctuation">(</span>id<span class="token punctuation">,</span> money<span class="token punctuation">,</span> content<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;b978840f-6fc4-11ec-b831- 482ae33c4a2d&#39;</span><span class="token punctuation">,</span> <span class="token number">560</span><span class="token punctuation">,</span> <span class="token string">&#39;b978843c-6fc4-11ec-b831-482ae33c4a2d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>枚举分片</strong></p><p><em>介绍</em></p><p>通过在配置文件中配置可能的枚举值, 指定数据分布到不同数据节点上, 本规则适用于按照省份、性别、状态拆分数据等业务。</p><p><img src="http://images.hellocode.top/2217415-20220514182951394-368992556.png" alt="img" loading="lazy"></p><p><em>配置</em></p><p>schema.xml中逻辑表配置：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 枚举 --&gt;</span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>tb_user<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dataNode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dn4,dn5,dn6<span class="token punctuation">&quot;</span></span> <span class="token attr-name">rule</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sharding-by-intfile-enumstatus<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>schema.xml中数据节点配置：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataNode</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dn4<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dataHost</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dhost1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">database</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>itcast<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataNode</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dn5<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dataHost</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dhost2<span class="token punctuation">&quot;</span></span> <span class="token attr-name">database</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>itcast<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataNode</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dn6<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dataHost</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dhost3<span class="token punctuation">&quot;</span></span> <span class="token attr-name">database</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>itcast<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>rule.xml中分片规则配置：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tableRule</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sharding-by-intfile<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rule</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>columns</span><span class="token punctuation">&gt;</span></span>sharding_id<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>columns</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>algorithm</span><span class="token punctuation">&gt;</span></span>hash-int<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>algorithm</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rule</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tableRule</span><span class="token punctuation">&gt;</span></span>

        <span class="token comment">&lt;!-- 自己增加 tableRule --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tableRule</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sharding-by-intfile-enumstatus<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rule</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>columns</span><span class="token punctuation">&gt;</span></span>status<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>columns</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>algorithm</span><span class="token punctuation">&gt;</span></span>hash-int<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>algorithm</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rule</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tableRule</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>function</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hash-int<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>io.mycat.route.function.PartitionByFileMap<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>defaultNode<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mapFile<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>partition-hash-int.txt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>function</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>partition-hash-int.txt ，内容如下 :</p><div class="language-ini line-numbers-mode" data-ext="ini"><pre class="language-ini"><code><span class="token key attr-name">1</span><span class="token punctuation">=</span><span class="token value attr-value">0</span> 
<span class="token key attr-name">2</span><span class="token punctuation">=</span><span class="token value attr-value">1</span> 
<span class="token key attr-name">3</span><span class="token punctuation">=</span><span class="token value attr-value">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分片规则属性含义：</p><table><thead><tr><th style="text-align:left;">属性</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">columns</td><td style="text-align:left;">标识将要分片的表字段</td></tr><tr><td style="text-align:left;">algorithm</td><td style="text-align:left;">指定分片函数与function的对应关系</td></tr><tr><td style="text-align:left;">class</td><td style="text-align:left;">指定该分片算法对应的类</td></tr><tr><td style="text-align:left;">mapFile</td><td style="text-align:left;">对应的外部配置文件</td></tr><tr><td style="text-align:left;">type</td><td style="text-align:left;">默认值为0 ; 0 表示Integer , 1 表示String</td></tr><tr><td style="text-align:left;">defaultNode</td><td style="text-align:left;">默认节点 ; 小于0 标识不设置默认节点 , 大于等于0代表设置默认节点 ;默认节点的所用:枚举分片时,如果碰到不识别的枚举值, 就让它路由到默认节点 ; 如果没有默认值,碰到不识别的则报错 。</td></tr></tbody></table><p><em>测试</em></p><p>配置完毕后，重新启动MyCat，然后在mycat的命令行中，执行如下SQL创建表、并插入数据，查看数据分布情况。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> tb_user <span class="token punctuation">(</span> 
    id <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;ID&#39;</span><span class="token punctuation">,</span> 
    username <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;姓名&#39;</span><span class="token punctuation">,</span> 
    <span class="token keyword">status</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;1&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;1: 未启用, 2: 已启用, 3: 已关闭&#39;</span><span class="token punctuation">,</span> 
    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span> 
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4<span class="token punctuation">;</span> 

<span class="token keyword">insert</span> <span class="token keyword">into</span> tb_user <span class="token punctuation">(</span>id<span class="token punctuation">,</span>username <span class="token punctuation">,</span><span class="token keyword">status</span><span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&#39;Tom&#39;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">insert</span> <span class="token keyword">into</span> tb_user <span class="token punctuation">(</span>id<span class="token punctuation">,</span>username <span class="token punctuation">,</span><span class="token keyword">status</span><span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&#39;Cat&#39;</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">insert</span> <span class="token keyword">into</span> tb_user <span class="token punctuation">(</span>id<span class="token punctuation">,</span>username <span class="token punctuation">,</span><span class="token keyword">status</span><span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">&#39;Rose&#39;</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">insert</span> <span class="token keyword">into</span> tb_user <span class="token punctuation">(</span>id<span class="token punctuation">,</span>username <span class="token punctuation">,</span><span class="token keyword">status</span><span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">&#39;Coco&#39;</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">insert</span> <span class="token keyword">into</span> tb_user <span class="token punctuation">(</span>id<span class="token punctuation">,</span>username <span class="token punctuation">,</span><span class="token keyword">status</span><span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">&#39;Lily&#39;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">insert</span> <span class="token keyword">into</span> tb_user <span class="token punctuation">(</span>id<span class="token punctuation">,</span>username <span class="token punctuation">,</span><span class="token keyword">status</span><span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">&#39;Tom&#39;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">insert</span> <span class="token keyword">into</span> tb_user <span class="token punctuation">(</span>id<span class="token punctuation">,</span>username <span class="token punctuation">,</span><span class="token keyword">status</span><span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">&#39;Cat&#39;</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">insert</span> <span class="token keyword">into</span> tb_user <span class="token punctuation">(</span>id<span class="token punctuation">,</span>username <span class="token punctuation">,</span><span class="token keyword">status</span><span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">&#39;Rose&#39;</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">insert</span> <span class="token keyword">into</span> tb_user <span class="token punctuation">(</span>id<span class="token punctuation">,</span>username <span class="token punctuation">,</span><span class="token keyword">status</span><span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token string">&#39;Coco&#39;</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">insert</span> <span class="token keyword">into</span> tb_user <span class="token punctuation">(</span>id<span class="token punctuation">,</span>username <span class="token punctuation">,</span><span class="token keyword">status</span><span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">&#39;Lily&#39;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>应用指定算法</strong></p><p><em>介绍</em></p><p>运行阶段由应用自主决定路由到那个分片 , 直接根据字符子串（必须是数字）计算分片号。</p><p><img src="http://images.hellocode.top/2217415-20220514183549055-1971693108.png" alt="img" loading="lazy"><em>配置</em></p><p>schema.xml中逻辑表配置：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 应用指定算法 --&gt;</span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>tb_app<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dataNode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dn4,dn5,dn6<span class="token punctuation">&quot;</span></span> <span class="token attr-name">rule</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sharding-by-substring<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>schema.xml中数据节点配置：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataNode</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dn4<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dataHost</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dhost1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">database</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>itcast<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataNode</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dn5<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dataHost</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dhost2<span class="token punctuation">&quot;</span></span> <span class="token attr-name">database</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>itcast<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataNode</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dn6<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dataHost</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dhost3<span class="token punctuation">&quot;</span></span> <span class="token attr-name">database</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>itcast<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>rule.xml中分片规则配置：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tableRule</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sharding-by-substring<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rule</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>columns</span><span class="token punctuation">&gt;</span></span>id<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>columns</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>algorithm</span><span class="token punctuation">&gt;</span></span>sharding-by-substring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>algorithm</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rule</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tableRule</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>function</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sharding-by-substring<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>io.mycat.route.function.PartitionDirectBySubString<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>startIndex<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- zero-based --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>size<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>partitionCount<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>defaultPartition<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>function</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分片规则属性含义：</p><table><thead><tr><th style="text-align:left;">属性</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">columns</td><td style="text-align:left;">标识将要分片的表字段</td></tr><tr><td style="text-align:left;">algorithm</td><td style="text-align:left;">指定分片函数与function的对应关系</td></tr><tr><td style="text-align:left;">class</td><td style="text-align:left;">指定该分片算法对应的类</td></tr><tr><td style="text-align:left;">startIndex</td><td style="text-align:left;">字符子串起始索引</td></tr><tr><td style="text-align:left;">size</td><td style="text-align:left;">字符长度</td></tr><tr><td style="text-align:left;">partitionCount</td><td style="text-align:left;">分区(分片)数量</td></tr><tr><td style="text-align:left;">defaultPartition</td><td style="text-align:left;">默认分片(在分片数量定义时, 字符标示的分片编号不在分片数量内时,使用默认分片)</td></tr></tbody></table><p>示例说明 :</p><p>id=05-100000002 , 在此配置中代表根据id中从 startIndex=0，开始，截取siz=2位数字即05，05就是获取的分区，如果没找到对应的分片则默认分配到defaultPartition 。</p><p><em>测试</em></p><p>配置完毕后，重新启动MyCat，然后在mycat的命令行中，执行如下SQL创建表、并插入数据，查看数据分布情况。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> tb_app <span class="token punctuation">(</span> 
    id <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;ID&#39;</span><span class="token punctuation">,</span> 
    name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;名称&#39;</span><span class="token punctuation">,</span> 
    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span> 
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4<span class="token punctuation">;</span> 

<span class="token keyword">insert</span> <span class="token keyword">into</span> tb_app <span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">&#39;0000001&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;Testx00001&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">insert</span> <span class="token keyword">into</span> tb_app <span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">&#39;0100001&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;Test100001&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">insert</span> <span class="token keyword">into</span> tb_app <span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">&#39;0100002&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;Test200001&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">insert</span> <span class="token keyword">into</span> tb_app <span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">&#39;0200001&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;Test300001&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">insert</span> <span class="token keyword">into</span> tb_app <span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">&#39;0200002&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;TesT400001&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>固定分片hash算法</strong></p><p><em>介绍</em></p><p>该算法类似于十进制的求模运算，但是为二进制的操作，例如，取 id 的二进制低 10 位 与1111111111 进行位 &amp; 运算，位与运算最小值为 0000000000，最大值为1111111111，转换为十进制，也就是位于0-1023之间。</p><p><img src="http://images.hellocode.top/2217415-20220514184016497-414349404.png" alt="img" loading="lazy"></p><p>特点：</p><ul><li>如果是求模，连续的值，分别分配到各个不同的分片；但是此算法会将连续的值可能分配到相同的分片，降低事务处理的难度。</li><li>可以均匀分配，也可以非均匀分配。</li><li>分片字段必须为数字类型。</li></ul><p><em>配置</em></p><p>schema.xml中逻辑表配置：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 固定分片hash算法 --&gt;</span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>tb_longhash<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dataNode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dn4,dn5,dn6<span class="token punctuation">&quot;</span></span> <span class="token attr-name">rule</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sharding-by-long-hash<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>schema.xml中数据节点配置：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataNode</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dn4<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dataHost</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dhost1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">database</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>itcast<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataNode</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dn5<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dataHost</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dhost2<span class="token punctuation">&quot;</span></span> <span class="token attr-name">database</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>itcast<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataNode</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dn6<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dataHost</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dhost3<span class="token punctuation">&quot;</span></span> <span class="token attr-name">database</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>itcast<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>rule.xml中分片规则配置：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tableRule</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sharding-by-long-hash<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rule</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>columns</span><span class="token punctuation">&gt;</span></span>id<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>columns</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>algorithm</span><span class="token punctuation">&gt;</span></span>sharding-by-long-hash<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>algorithm</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rule</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tableRule</span><span class="token punctuation">&gt;</span></span>

        <span class="token comment">&lt;!-- 分片总长度为1024，count与length数组长度必须一致； --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>function</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sharding-by-long-hash<span class="token punctuation">&quot;</span></span>
          <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>io.mycat.route.function.PartitionByLong<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>partitionCount<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>2,1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>partitionLength<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>256,512<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>function</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分片规则属性含义：</p><table><thead><tr><th style="text-align:left;">属性</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">columns</td><td style="text-align:left;">标识将要分片的表字段名</td></tr><tr><td style="text-align:left;">algorithm</td><td style="text-align:left;">指定分片函数与function的对应关系</td></tr><tr><td style="text-align:left;">class</td><td style="text-align:left;">指定该分片算法对应的类</td></tr><tr><td style="text-align:left;">partitionCount</td><td style="text-align:left;">分片个数列表</td></tr><tr><td style="text-align:left;">partitionLength</td><td style="text-align:left;">分片范围列表</td></tr></tbody></table><p>约束 :</p><ol><li>分片长度 : 默认最大2^10 , 为 1024 ;</li><li>count, length的数组长度必须是一致的 ;</li></ol><p>以上分为三个分区:0-255,256-511,512-1023</p><p>示例说明 :</p><p><img src="http://images.hellocode.top/2217415-20220514184422781-1280525063.png" alt="img" loading="lazy"></p><p><em>测试</em></p><p>配置完毕后，重新启动MyCat，然后在mycat的命令行中，执行如下SQL创建表、并插入数据，查看数据分布情况。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> tb_longhash <span class="token punctuation">(</span> 
    id <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;ID&#39;</span><span class="token punctuation">,</span> 
    name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;名称&#39;</span><span class="token punctuation">,</span> 
    firstChar <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;首字母&#39;</span><span class="token punctuation">,</span> 
    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span> 
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4<span class="token punctuation">;</span> 

<span class="token keyword">insert</span> <span class="token keyword">into</span> tb_longhash <span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>firstChar<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&#39;七匹狼&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;Q&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">insert</span> <span class="token keyword">into</span> tb_longhash <span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>firstChar<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&#39;八匹狼&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;B&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">insert</span> <span class="token keyword">into</span> tb_longhash <span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>firstChar<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">&#39;九匹狼&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;J&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">insert</span> <span class="token keyword">into</span> tb_longhash <span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>firstChar<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">&#39;十匹狼&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;S&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">insert</span> <span class="token keyword">into</span> tb_longhash <span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>firstChar<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">&#39;六匹狼&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;L&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">insert</span> <span class="token keyword">into</span> tb_longhash <span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>firstChar<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">&#39;五匹狼&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;W&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">insert</span> <span class="token keyword">into</span> tb_longhash <span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>firstChar<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">&#39;四匹狼&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;S&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">insert</span> <span class="token keyword">into</span> tb_longhash <span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>firstChar<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">&#39;三匹狼&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;S&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">insert</span> <span class="token keyword">into</span> tb_longhash <span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>firstChar<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token string">&#39;两匹狼&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;L&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>字符串hash解析算法</strong></p><p><em>介绍</em></p><p>截取字符串中的指定位置的子字符串, 进行hash算法， 算出分片</p><p><img src="http://images.hellocode.top/2217415-20220514184557039-964135436.png" alt="img" loading="lazy"></p><p><em>配置</em></p><p>schema.xml中逻辑表配置：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 字符串hash解析算法 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>tb_strhash<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dataNode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dn4,dn5<span class="token punctuation">&quot;</span></span> <span class="token attr-name">rule</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sharding-by-stringhash<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>schema.xml中数据节点配置：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataNode</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dn4<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dataHost</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dhost1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">database</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>itcast<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataNode</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dn5<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dataHost</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dhost2<span class="token punctuation">&quot;</span></span> <span class="token attr-name">database</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>itcast<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>rule.xml中分片规则配置：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tableRule</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sharding-by-stringhash<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rule</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>columns</span><span class="token punctuation">&gt;</span></span>name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>columns</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>algorithm</span><span class="token punctuation">&gt;</span></span>sharding-by-stringhash<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>algorithm</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rule</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tableRule</span><span class="token punctuation">&gt;</span></span> 

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>function</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sharding-by-stringhash<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>io.mycat.route.function.PartitionByString<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>partitionLength<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>512<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- zero-based --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>partitionCount<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hashSlice<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>0:2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>function</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分片规则属性含义：</p><table><thead><tr><th style="text-align:left;">属性</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">columns</td><td style="text-align:left;">标识将要分片的表字段</td></tr><tr><td style="text-align:left;">algorithm</td><td style="text-align:left;">指定分片函数与function的对应关系</td></tr><tr><td style="text-align:left;">class</td><td style="text-align:left;">指定该分片算法对应的类</td></tr><tr><td style="text-align:left;">partitionLength hash</td><td style="text-align:left;">求模基数 ; length*count=1024 (出于性能考虑)</td></tr><tr><td style="text-align:left;">partitionCount</td><td style="text-align:left;">分区数</td></tr><tr><td style="text-align:left;">hashSlice</td><td style="text-align:left;">hash运算位 , 根据子字符串的hash运算 ; 0 代表 str.length(), -1 代表 str.length()-1 , 大于0只代表数字自身 ; 可以理解为substring（start，end），start为0则只表示0</td></tr></tbody></table><p>示例说明：</p><p><img src="http://images.hellocode.top/2217415-20220514184954135-456296395.png" alt="img" loading="lazy"></p><p><em>测试</em></p><p>配置完毕后，重新启动MyCat，然后在mycat的命令行中，执行如下SQL创建表、并插入数据，查看数据分布情况。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> tb_strhash<span class="token punctuation">(</span> 
    name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span> 
    content <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> 
<span class="token punctuation">)</span><span class="token keyword">engine</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4<span class="token punctuation">;</span> 

<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tb_strhash <span class="token punctuation">(</span>name<span class="token punctuation">,</span>content<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;T1001&#39;</span><span class="token punctuation">,</span> UUID<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tb_strhash <span class="token punctuation">(</span>name<span class="token punctuation">,</span>content<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;ROSE&#39;</span><span class="token punctuation">,</span> UUID<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tb_strhash <span class="token punctuation">(</span>name<span class="token punctuation">,</span>content<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;JERRY&#39;</span><span class="token punctuation">,</span> UUID<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tb_strhash <span class="token punctuation">(</span>name<span class="token punctuation">,</span>content<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;CRISTINA&#39;</span><span class="token punctuation">,</span> UUID<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tb_strhash <span class="token punctuation">(</span>name<span class="token punctuation">,</span>content<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;TOMCAT&#39;</span><span class="token punctuation">,</span> UUID<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>按天分片算法</strong></p><p><em>介绍</em></p><p>按照日期及对应的时间周期来分片</p><p><img src="http://images.hellocode.top/2217415-20220514185100635-1924380362.png" alt="img" loading="lazy"></p><p><em>配置</em></p><p>schema.xml中逻辑表配置：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 按天分片 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>tb_datepart<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dataNode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dn4,dn5,dn6<span class="token punctuation">&quot;</span></span> <span class="token attr-name">rule</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sharding-by-date<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>schema.xml中数据节点配置：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataNode</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dn4<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dataHost</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dhost1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">database</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>itcast<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataNode</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dn5<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dataHost</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dhost2<span class="token punctuation">&quot;</span></span> <span class="token attr-name">database</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>itcast<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataNode</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dn6<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dataHost</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dhost3<span class="token punctuation">&quot;</span></span> <span class="token attr-name">database</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>itcast<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>rule.xml中分片规则配置：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tableRule</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sharding-by-date<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rule</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>columns</span><span class="token punctuation">&gt;</span></span>create_time<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>columns</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>algorithm</span><span class="token punctuation">&gt;</span></span>sharding-by-date<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>algorithm</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rule</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tableRule</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>function</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sharding-by-date<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>io.mycat.route.function.PartitionByDate<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dateFormat<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>yyyy-MM-dd<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sBeginDate<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>2022-01-01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sEndDate<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>2022-01-30<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sPartionDay<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>function</span><span class="token punctuation">&gt;</span></span> 

<span class="token comment">&lt;!--从开始时间开始，每10天为一个分片，到达结束时间之后，会重复开始分片插入 配置表的 dataNode 的分片，必须和分片规则数量一致，例如 2022-01-01 到 2022-12-31 ，每 10天一个分片，一共需要37个分片。 --&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分片规则属性含义：</p><table><thead><tr><th style="text-align:left;">属性</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">columns</td><td style="text-align:left;">标识将要分片的表字段</td></tr><tr><td style="text-align:left;">algorithm</td><td style="text-align:left;">指定分片函数与function的对应关系</td></tr><tr><td style="text-align:left;">class</td><td style="text-align:left;">指定该分片算法对应的类</td></tr><tr><td style="text-align:left;">dateFormat</td><td style="text-align:left;">日期格式</td></tr><tr><td style="text-align:left;">sBeginDate</td><td style="text-align:left;">开始日期</td></tr><tr><td style="text-align:left;">sEndDate</td><td style="text-align:left;">结束日期，如果配置了结束日期，则代码数据到达了这个日期的分片后，会重复从开始分片插入</td></tr><tr><td style="text-align:left;">sPartionDay</td><td style="text-align:left;">分区天数，默认值 10 ，从开始日期算起，每个10天一个分区</td></tr></tbody></table><p><em>测试</em></p><p>配置完毕后，重新启动MyCat，然后在mycat的命令行中，执行如下SQL创建表、并插入数据，查看数据分布情况。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> tb_datepart<span class="token punctuation">(</span> 
    id <span class="token keyword">bigint</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;ID&#39;</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span> 
    name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;姓名&#39;</span><span class="token punctuation">,</span> 
    create_time <span class="token keyword">date</span> <span class="token boolean">null</span> 
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">insert</span> <span class="token keyword">into</span> tb_datepart<span class="token punctuation">(</span>id<span class="token punctuation">,</span>name <span class="token punctuation">,</span>create_time<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&#39;Tom&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;2022-01-01&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">insert</span> <span class="token keyword">into</span> tb_datepart<span class="token punctuation">(</span>id<span class="token punctuation">,</span>name <span class="token punctuation">,</span>create_time<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&#39;Cat&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;2022-01-10&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> tb_datepart<span class="token punctuation">(</span>id<span class="token punctuation">,</span>name <span class="token punctuation">,</span>create_time<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">&#39;Rose&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;2022-01-11&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">insert</span> <span class="token keyword">into</span> tb_datepart<span class="token punctuation">(</span>id<span class="token punctuation">,</span>name <span class="token punctuation">,</span>create_time<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">&#39;Coco&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;2022-01-20&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">insert</span> <span class="token keyword">into</span> tb_datepart<span class="token punctuation">(</span>id<span class="token punctuation">,</span>name <span class="token punctuation">,</span>create_time<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">&#39;Rose2&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;2022-01-21&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">insert</span> <span class="token keyword">into</span> tb_datepart<span class="token punctuation">(</span>id<span class="token punctuation">,</span>name <span class="token punctuation">,</span>create_time<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">&#39;Coco2&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;2022-01-30&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">insert</span> <span class="token keyword">into</span> tb_datepart<span class="token punctuation">(</span>id<span class="token punctuation">,</span>name <span class="token punctuation">,</span>create_time<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">&#39;Coco3&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;2022-01-31&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>自然月分片</strong></p><p><em>介绍</em></p><p>使用场景为按照月份来分片, 每个自然月为一个分片</p><p><img src="http://images.hellocode.top/2217415-20220514185535314-2082893584.png" alt="img" loading="lazy"></p><p><em>配置</em></p><p>schema.xml中逻辑表配置：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 按自然月分片 --&gt;</span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>tb_monthpart<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dataNode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dn4,dn5,dn6<span class="token punctuation">&quot;</span></span> <span class="token attr-name">rule</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sharding-by-month<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>schema.xml中数据节点配置：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataNode</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dn4<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dataHost</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dhost1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">database</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>itcast<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataNode</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dn5<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dataHost</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dhost2<span class="token punctuation">&quot;</span></span> <span class="token attr-name">database</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>itcast<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataNode</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dn6<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dataHost</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dhost3<span class="token punctuation">&quot;</span></span> <span class="token attr-name">database</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>itcast<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>rule.xml中分片规则配置：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tableRule</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sharding-by-month<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rule</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>columns</span><span class="token punctuation">&gt;</span></span>create_time<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>columns</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>algorithm</span><span class="token punctuation">&gt;</span></span>partbymonth<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>algorithm</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rule</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tableRule</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>function</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>partbymonth<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>io.mycat.route.function.PartitionByMonth<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dateFormat<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>yyyy-MM-dd<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sBeginDate<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>2022-01-01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sEndDate<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>2022-03-31<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>function</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!--从开始时间开始，一个月为一个分片，到达结束时间之后，会重复开始分片插入 配置表的 dataNode 的分片，必须和分片规则数量一致，例如 2022-01-01 到 2022-12-31 ，一 共需要12个分片。 --&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分片规则属性含义：</p><table><thead><tr><th style="text-align:left;">属性</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">columns</td><td style="text-align:left;">标识将要分片的表字段</td></tr><tr><td style="text-align:left;">algorithm</td><td style="text-align:left;">指定分片函数与function的对应关系</td></tr><tr><td style="text-align:left;">class</td><td style="text-align:left;">指定该分片算法对应的类</td></tr><tr><td style="text-align:left;">dateFormat</td><td style="text-align:left;">日期格式</td></tr><tr><td style="text-align:left;">sBeginDate</td><td style="text-align:left;">开始日期</td></tr><tr><td style="text-align:left;">sEndDate</td><td style="text-align:left;">结束日期，如果配置了结束日期，则代码数据到达了这个日期的分片后，会重复从开始分片插入</td></tr></tbody></table><p><em>测试</em></p><p>配置完毕后，重新启动MyCat，然后在mycat的命令行中，执行如下SQL创建表、并插入数据，查看数据分布情况</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> tb_monthpart<span class="token punctuation">(</span> 
    id <span class="token keyword">bigint</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;ID&#39;</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span> 
    name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;姓名&#39;</span><span class="token punctuation">,</span> 
    create_time <span class="token keyword">date</span> <span class="token boolean">null</span> 
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">insert</span> <span class="token keyword">into</span> tb_monthpart<span class="token punctuation">(</span>id<span class="token punctuation">,</span>name <span class="token punctuation">,</span>create_time<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&#39;Tom&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;2022-01-01&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">insert</span> <span class="token keyword">into</span> tb_monthpart<span class="token punctuation">(</span>id<span class="token punctuation">,</span>name <span class="token punctuation">,</span>create_time<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&#39;Cat&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;2022-01-10&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">insert</span> <span class="token keyword">into</span> tb_monthpart<span class="token punctuation">(</span>id<span class="token punctuation">,</span>name <span class="token punctuation">,</span>create_time<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">&#39;Rose&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;2022-01-31&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">insert</span> <span class="token keyword">into</span> tb_monthpart<span class="token punctuation">(</span>id<span class="token punctuation">,</span>name <span class="token punctuation">,</span>create_time<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">&#39;Coco&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;2022-02-20&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">insert</span> <span class="token keyword">into</span> tb_monthpart<span class="token punctuation">(</span>id<span class="token punctuation">,</span>name <span class="token punctuation">,</span>create_time<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">&#39;Rose2&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;2022-02-25&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">insert</span> <span class="token keyword">into</span> tb_monthpart<span class="token punctuation">(</span>id<span class="token punctuation">,</span>name <span class="token punctuation">,</span>create_time<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">&#39;Coco2&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;2022-03-10&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">insert</span> <span class="token keyword">into</span> tb_monthpart<span class="token punctuation">(</span>id<span class="token punctuation">,</span>name <span class="token punctuation">,</span>create_time<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">&#39;Coco3&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;2022-03-31&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">insert</span> <span class="token keyword">into</span> tb_monthpart<span class="token punctuation">(</span>id<span class="token punctuation">,</span>name <span class="token punctuation">,</span>create_time<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">&#39;Coco4&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;2022-04-10&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">insert</span> <span class="token keyword">into</span> tb_monthpart<span class="token punctuation">(</span>id<span class="token punctuation">,</span>name <span class="token punctuation">,</span>create_time<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token string">&#39;Coco5&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;2022-04-30&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6、mycat管理及监控" tabindex="-1"><a class="header-anchor" href="#_6、mycat管理及监控" aria-hidden="true">#</a> 6、Mycat管理及监控</h3><h4 id="_6-1-mycat原理" tabindex="-1"><a class="header-anchor" href="#_6-1-mycat原理" aria-hidden="true">#</a> 6.1. MyCat原理</h4><p><img src="http://images.hellocode.top/2217415-20220514190139548-136429863.png" alt="img" loading="lazy"></p><p>在MyCat中，当执行一条SQL语句时，MyCat需要进行SQL解析、分片分析、路由分析、读写分离分析等操作，最终经过一系列的分析决定将当前的SQL语句到底路由到那几个(或哪一个)节点数据库，数据库将数据执行完毕后，如果有返回的结果，则将结果返回给MyCat，最终还需要在MyCat中进行结果合并、聚合处理、排序处理、分页处理等操作，最终再将结果返回给客户端。</p><p>而在MyCat的使用过程中，MyCat官方也提供了一个管理监控平台MyCat-Web（MyCat-eye）。Mycat-web 是 Mycat 可视化运维的管理和监控平台，弥补了 Mycat 在监控上的空白。帮 Mycat分担统计任务和配置管理任务。Mycat-web 引入了 ZooKeeper 作为配置中心，可以管理多个节点。Mycat-web 主要管理和监控 Mycat 的流量、连接、活动线程和内存等，具备 IP 白名单、邮件告警等模块，还可以统计 SQL 并分析慢 SQL 和高频 SQL 等。为优化 SQL 提供依据。</p><h4 id="_6-2-mycat管理" tabindex="-1"><a class="header-anchor" href="#_6-2-mycat管理" aria-hidden="true">#</a> 6.2. MyCat管理</h4><p>Mycat默认开通2个端口，可以在server.xml中进行修改。</p><ul><li>8066 数据访问端口，即进行 DML 和 DDL 操作。</li><li>9066 数据库管理端口，即 mycat 服务管理控制功能，用于管理mycat的整个集群状态</li></ul><p>连接MyCat的管理控制台：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code>mysql -h 192.168.200.210 -p 9066 -uroot -p123456
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th style="text-align:left;">命令</th><th style="text-align:left;">含义</th></tr></thead><tbody><tr><td style="text-align:left;">show</td><td style="text-align:left;">@@help 查看Mycat管理工具帮助文档</td></tr><tr><td style="text-align:left;">show</td><td style="text-align:left;">@@version 查看Mycat的版本</td></tr><tr><td style="text-align:left;">reload</td><td style="text-align:left;">@@config 重新加载Mycat的配置文件</td></tr><tr><td style="text-align:left;">show</td><td style="text-align:left;">@@datasource 查看Mycat的数据源信息</td></tr><tr><td style="text-align:left;">show</td><td style="text-align:left;">@@datanode 查看MyCat现有的分片节点信息</td></tr><tr><td style="text-align:left;">show</td><td style="text-align:left;">@@threadpool 查看Mycat的线程池信息</td></tr><tr><td style="text-align:left;">show</td><td style="text-align:left;">@@sql 查看执行的SQL</td></tr><tr><td style="text-align:left;">show</td><td style="text-align:left;">@@sql.sum 查看执行的SQL统计</td></tr></tbody></table><h4 id="_6-3-mycat-eye" tabindex="-1"><a class="header-anchor" href="#_6-3-mycat-eye" aria-hidden="true">#</a> 6.3. MyCat-eye</h4><p><strong>介绍</strong></p><p>Mycat-web(Mycat-eye)是对mycat-server提供监控服务，功能不局限于对mycat-server使用。他通过JDBC连接对Mycat、Mysql监控，监控远程服务器(目前仅限于linux系统)的cpu、内存、网络、磁盘</p><p>Mycat-eye运行过程中需要依赖zookeeper，因此需要先安装zookeeper。</p><p><em>zookeeper安装</em></p>`,314),E={href:"https://www.cnblogs.com/chen-guang/p/16264603.html",target:"_blank",rel:"noopener noreferrer"},_=n("p",null,[n("em",null,"Mycat-web安装")],-1),f=n("p",null,"A. 上传安装包 ：Mycat-web.tar.gz",-1),T=n("p",null,"B. 解压：tar -zxvf Mycat-web.tar.gz -C /usr/local/",-1),x=n("p",null,"C. 目录介绍",-1),L=n("li",null,"etc：jetty配置文件",-1),R=n("li",null,"lib：依赖jar包",-1),N=n("li",null,"mycat-web：mycat-web项目",-1),S=n("li",null,"readme.txt",-1),A=n("li",null,"start.jar：启动jar",-1),I={href:"http://start.sh",target:"_blank",rel:"noopener noreferrer"},M={href:"http://start.sh",target:"_blank",rel:"noopener noreferrer"},O={href:"http://192.168.200.210:8082/mycat",target:"_blank",rel:"noopener noreferrer"},C=n("blockquote",null,[n("p",null,"备注: ​如果Zookeeper与Mycat-web不在同一台服务器上 , 需要设置Zookeeper的地址 ; 在/usr/local/mycat-web/mycat-web/WEB-INF/classes/mycat.properties文件中配置 :"),n("p",null,[n("img",{src:"http://images.hellocode.top/2217415-20220514192104173-72169489.png",alt:"img",loading:"lazy"})])],-1),D=n("p",null,[n("strong",null,"访问")],-1),U={href:"http://192.168.200.210:8082/mycat",target:"_blank",rel:"noopener noreferrer"},B=e(`<p><img src="http://images.hellocode.top/2217415-20220514190540479-790802975.png" alt="img" loading="lazy"></p><p><strong>配置</strong></p><p>1). 开启MyCat的实时统计功能(server.xml)</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>useSqlStat<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- 1为开启实时统计、0为关闭 --&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2). 在Mycat监控界面配置服务地址</p><p><img src="http://images.hellocode.top/2217415-20220514190621637-399921710.png" alt="img" loading="lazy"></p><p><strong>测试</strong></p><p>配置好了之后，我们可以通过MyCat执行一系列的增删改查的测试，然后过一段时间之后，打开mycat-eye的管理界面，查看mycat-eye监控到的数据信息</p><p>A. 性能监控</p><p><img src="http://images.hellocode.top/2217415-20220514190705484-699414373.png" alt="img" loading="lazy"></p><p>B. 物理节点</p><p><img src="http://images.hellocode.top/2217415-20220514190733133-942877429.png" alt="img" loading="lazy"></p><p>C. SQL统计</p><p><img src="http://images.hellocode.top/2217415-20220514190750587-873304914.png" alt="img" loading="lazy"></p><p>D. SQL表分析</p><p><img src="http://images.hellocode.top/2217415-20220514190812710-1169255831.png" alt="img" loading="lazy"></p><p>E. SQL监控</p><p><img src="http://images.hellocode.top/2217415-20220514190834472-280689317.png" alt="img" loading="lazy"></p><p>F. 高频SQL</p><p><img src="http://images.hellocode.top/2217415-20220514190855004-912122114.png" alt="img" loading="lazy"></p><h2 id="十七、读写分离" tabindex="-1"><a class="header-anchor" href="#十七、读写分离" aria-hidden="true">#</a> 十七、读写分离</h2><h3 id="_1、介绍-1" tabindex="-1"><a class="header-anchor" href="#_1、介绍-1" aria-hidden="true">#</a> 1、介绍</h3><p>读写分离，简单地说就是把对数据库的读和写操作分开，以对应不同的数据库服务器。主数据库提供写操作，从数据库提供读操作，这样能有效地减轻单台数据库的压力。</p><p>通过MyCat即可轻易实现上述功能，不仅可以支持MySQL，也可以支持Oracle和SQL Server</p><p><img src="http://images.hellocode.top/b4d8023a5ef3c8ed5757a47f83e0b036.webp" alt="img" loading="lazy"></p><h3 id="_2、一主一从" tabindex="-1"><a class="header-anchor" href="#_2、一主一从" aria-hidden="true">#</a> 2、一主一从</h3><h4 id="_2-1-原理" tabindex="-1"><a class="header-anchor" href="#_2-1-原理" aria-hidden="true">#</a> 2.1. 原理</h4><p>MySQL的主从复制，是基于二进制日志（binlog）实现的。</p><p><img src="http://images.hellocode.top/eb17ba57f77085d62a915b8b861fe46a.webp" alt="img" loading="lazy"></p><h4 id="_2-2-准备" tabindex="-1"><a class="header-anchor" href="#_2-2-准备" aria-hidden="true">#</a> 2.2. 准备</h4><table><thead><tr><th style="text-align:left;">主机</th><th style="text-align:left;">角色</th><th style="text-align:left;">用户名</th><th style="text-align:left;">密码</th></tr></thead><tbody><tr><td style="text-align:left;">192.168.91.166</td><td style="text-align:left;">master</td><td style="text-align:left;">root</td><td style="text-align:left;">123456</td></tr><tr><td style="text-align:left;">192.168.91.167</td><td style="text-align:left;">slave</td><td style="text-align:left;">root</td><td style="text-align:left;">123456</td></tr></tbody></table><blockquote><p>主从具体搭建过程见主从复制部分</p></blockquote><p>结果验证</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysql<span class="token operator">&gt;</span> show replica status<span class="token punctuation">\\</span>G
*************************** <span class="token number">1</span>. row ***************************
             Replica_IO_State: Waiting <span class="token keyword">for</span> <span class="token builtin class-name">source</span> to send event
                  Source_Host: <span class="token number">192.168</span>.91.166
                  Source_User: itcast01
                  Source_Port: <span class="token number">3306</span>
                Connect_Retry: <span class="token number">60</span>
              Source_Log_File: binlog.000001
          Read_Source_Log_Pos: <span class="token number">156</span>
               Relay_Log_File: MySQL-Slave-relay-bin.000002
                Relay_Log_Pos: <span class="token number">321</span>
        Relay_Source_Log_File: binlog.000001
           Replica_IO_Running: Yes
          Replica_SQL_Running: Yes
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3-搭建" tabindex="-1"><a class="header-anchor" href="#_2-3-搭建" aria-hidden="true">#</a> 2.3. 搭建</h4><p>MyCat控制后台数据库的读写分离和负载均衡由schema.xml文件datahost标签的balance属性控制。</p><p><strong>schema.xml配置</strong></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 配置逻辑库 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>schema</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ITCAST_RW<span class="token punctuation">&quot;</span></span> <span class="token attr-name">checkSQLschema</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span> <span class="token attr-name">sqlMaxLimit</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>100<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dataNode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dn7<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>schema</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataNode</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dn7<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dataHost</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dhost7<span class="token punctuation">&quot;</span></span> <span class="token attr-name">database</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>itcast01<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataHost</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dhost7<span class="token punctuation">&quot;</span></span> <span class="token attr-name">maxCon</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1000<span class="token punctuation">&quot;</span></span> <span class="token attr-name">minCon</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>10<span class="token punctuation">&quot;</span></span> <span class="token attr-name">balance</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">writeType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dbType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mysql<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dbDriver</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>jdbc<span class="token punctuation">&quot;</span></span> <span class="token attr-name">switchType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">slaveThreshold</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>100<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>heartbeat</span><span class="token punctuation">&gt;</span></span>select user()<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>heartbeat</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>writeHost</span> <span class="token attr-name">host</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>master1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>jdbc:mysql://192.168.91.166:3306?useSSL=false<span class="token entity named-entity" title="&amp;">&amp;amp;</span>serverTimezone=Asia/Shanghai<span class="token entity named-entity" title="&amp;">&amp;amp;</span>characterEncoding=utf8<span class="token punctuation">&quot;</span></span> <span class="token attr-name">user</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span> <span class="token attr-name">password</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>123456<span class="token punctuation">&quot;</span></span> <span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>readHost</span> <span class="token attr-name">host</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>slave1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>jdbc:mysql://192.168.91.167:3306?useSSL=false<span class="token entity named-entity" title="&amp;">&amp;amp;</span>serverTimezone=Asia/Shanghai<span class="token entity named-entity" title="&amp;">&amp;amp;</span>characterEncoding=utf8<span class="token punctuation">&quot;</span></span> <span class="token attr-name">user</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span> <span class="token attr-name">password</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>123456<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>writeHost</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataHost</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述配置的具体关联对应情况如下：</p><p><img src="http://images.hellocode.top/28bbedce74c45b020af1edeae5d7cd4c.webp" alt="img" loading="lazy"></p><p>writeHost代表的是写操作对应的数据库，readHost代表的是读操作对应的数据库。 所以我们要想实现读写分离，就得配置writeHost关联的是主库，readHost关联的是从库。</p><p>而仅仅配置好了writeHost以及readHost还不能完成读写分离，还需要配置一个非常重要的负责均衡的参数 balance，取值有4种，具体含义如下：</p><table><thead><tr><th style="text-align:left;">参数值</th><th style="text-align:left;">含义</th></tr></thead><tbody><tr><td style="text-align:left;">0</td><td style="text-align:left;">不开启读写分离机制 , 所有读操作都发送到当前可用的writeHost上</td></tr><tr><td style="text-align:left;">1</td><td style="text-align:left;">全部的readHost 与 备用的writeHost 都参与select 语句的负载均衡（主要针对于双主双从模式）</td></tr><tr><td style="text-align:left;">2</td><td style="text-align:left;">所有的读写操作都随机在writeHost , readHost上分发</td></tr><tr><td style="text-align:left;">3</td><td style="text-align:left;">所有的读请求随机分发到writeHost对应的readHost上执行, writeHost不负担读压力</td></tr></tbody></table><p>所以，在一主一从模式的读写分离中，balance配置1或3都是可以完成读写分离的。</p><p><strong>server.xml配置</strong></p><p>配置root用户可以访问SHOPPING、ITCAST 以及 ITCAST_RW逻辑库。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span> <span class="token attr-name">defaultAccount</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>123456<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>schemas<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>SHOPPING,ITCAST,ITCAST_RW<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
    
    <span class="token comment">&lt;!-- 表级 DML 权限设置 --&gt;</span>
    <span class="token comment">&lt;!--
    &lt;privileges check=&quot;true&quot;&gt;
		&lt;schema name=&quot;DB01&quot; dml=&quot;0110&quot; &gt;
			&lt;table name=&quot;TB_ORDER&quot; dml=&quot;1110&quot;&gt;&lt;/table&gt;
		&lt;/schema&gt;
	&lt;/privileges&gt;
--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>测试</strong></p><p>配置完毕MyCat后，重新启动MyCat。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>bin/mycat stop
bin/mycat start
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后观察，在执行增删改操作时，对应的主库及从库的数据变化。 在执行查询操作时，检查主库及从库对应的数据变化</p><p><img src="http://images.hellocode.top/b91e6e1c9cf61e0b8abb6e242f3da801.webp" alt="img" loading="lazy"></p><p>在数据库写入一条数据，发现主从节点都增加一条数据，其实这条数据是从主节点写入的，因为数据是由主机点同步到从节点。</p><p>在数据库修改一条数据，发现主节点没有改变，从节点改变了，还是因为数据是由主机点同步到从节点。</p><p>在测试中，我们可以发现当主节点Master宕机之后，业务系统就只能够读，而不能写入数据了。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_user<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">------+---------+-----+</span>
<span class="token operator">|</span> id   <span class="token operator">|</span> name    <span class="token operator">|</span> sex <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">------+---------+-----+</span>
<span class="token operator">|</span>    <span class="token number">1</span> <span class="token operator">|</span> Tom     <span class="token operator">|</span> <span class="token number">1</span>   <span class="token operator">|</span>
<span class="token operator">|</span>    <span class="token number">2</span> <span class="token operator">|</span> <span class="token keyword">Trigger</span> <span class="token operator">|</span> <span class="token number">0</span>   <span class="token operator">|</span>
<span class="token operator">|</span>    <span class="token number">3</span> <span class="token operator">|</span> Dawn    <span class="token operator">|</span> <span class="token number">1</span>   <span class="token operator">|</span>
<span class="token operator">|</span>    <span class="token number">8</span> <span class="token operator">|</span> It5     <span class="token operator">|</span> <span class="token number">0</span>   <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">------+---------+-----+</span>
<span class="token number">4</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> tb_user<span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>sex<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">&#39;It5&#39;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ERROR:
<span class="token keyword">No</span> operations allowed <span class="token keyword">after</span> connection closed<span class="token punctuation">.</span>
mysql<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那如何解决这个问题呢？这个时候我们就得通过另外一种主从复制结构来解决了，也就是我们接下来演示的双主双从。</p><h3 id="_3、双主双从" tabindex="-1"><a class="header-anchor" href="#_3、双主双从" aria-hidden="true">#</a> 3、双主双从</h3><h4 id="_3-1-原理" tabindex="-1"><a class="header-anchor" href="#_3-1-原理" aria-hidden="true">#</a> 3.1. 原理</h4><p>一个主机Master1用于处理所有写请求，它的从机Slave1和另一台主机Master2还有它的从机Slave2负责所有读请求。当Master1主机宕机后，Master2主机负责写请求，Master1、Master2互为备机。架构图如下：</p><p><img src="http://images.hellocode.top/DjM9ylZkVL2BSQC.png" alt="image-20220420213921034" loading="lazy"></p><h4 id="_3-2-准备" tabindex="-1"><a class="header-anchor" href="#_3-2-准备" aria-hidden="true">#</a> 3.2. 准备</h4><p><strong>主库配置</strong></p><ol><li>修改配置文件</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#mysql服务ID，保证整个集群环境中唯一，取值范围：1-2的32次方-1，默认为1</span>
server-id<span class="token operator">=</span><span class="token number">1</span>
<span class="token comment">#指定同步的数据库</span>
binlog-do-db<span class="token operator">=</span>db01
binlog-do-db<span class="token operator">=</span>db02
binlog-do-db<span class="token operator">=</span>db03
<span class="token comment">#在作为从数据库的时候，有写入操作也要更新二进制日志文件</span>
log-slave-updates
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>重启 mysql 服务器</li></ol><p><em>两台主库创建账户并授权</em></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 创建itcast用户，并设置密码，该用户可在任意主机连接该MySOL服务</span>
<span class="token keyword">CREATE</span> <span class="token keyword">USER</span> <span class="token string">&#39;itcast&#39;</span><span class="token variable">@&#39;%&#39;</span> IDENTIFIED <span class="token keyword">WITH</span> mysql_native_password <span class="token keyword">BY</span> <span class="token string">&#39;Root@123456&#39;</span><span class="token punctuation">;</span>

<span class="token comment">-- 为&#39;itcast&#39;@&#39;%&#39;用户分配主从复制权限</span>
<span class="token keyword">GRANT</span> <span class="token keyword">REPLICATION</span> SLAVE <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token string">&#39;itcast&#39;</span>@&#39;<span class="token operator">%</span><span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过指令，查看两台主库的二进制日志坐标</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>show master status <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>从库配置（Slave1-192.168.200.212）</strong></p><ol><li>修改配置文件/etc/my.cnf</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># mysql服务ID，保证整个集群环境中唯一，取值范围：1-2的32次方-1，默认为1</span>
server-id<span class="token operator">=</span><span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>重启MySQL服务器</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl restart mysqld
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><em>两台从库配置关联的主库</em></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>CHANGE MASTER <span class="token keyword">TO</span> MASTER_HOST<span class="token operator">=</span><span class="token string">&#39;xxx.xxx.xxx.xxx&#39;</span><span class="token punctuation">,</span> MASTER_USER<span class="token operator">=</span><span class="token string">&#39;xxx&#39;</span><span class="token punctuation">,</span> MASTER_PASSWORD<span class="token operator">=</span><span class="token string">&#39;xxx&#39;</span><span class="token punctuation">,</span>
MASTER_LOG_FILE<span class="token operator">=</span><span class="token string">&#39;xxx&#39;</span><span class="token punctuation">,</span>MASTER_LOG_POS<span class="token operator">=</span>xxx<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>需要注意slave1对应的是master1,slave2对应的是master2</p></blockquote><p>启动两台从库主从复制，查看从库状态</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">start</span> slave<span class="token punctuation">;</span>
<span class="token keyword">show</span> slave <span class="token keyword">status</span>\\G
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>两台主库相互复制</strong></p><p>Master2复制Master1,Master1复制Master2</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>CHANGE MASTER <span class="token keyword">TO</span> MASTER_HOST<span class="token operator">=</span><span class="token string">&#39;xxx.xxx.xxx.xxx&#39;</span><span class="token punctuation">,</span> MASTER_USER<span class="token operator">=</span><span class="token string">&#39;XX&#39;</span><span class="token punctuation">,</span> MASTER_PASSWORD<span class="token operator">=</span><span class="token string">&#39;XX&#39;</span><span class="token punctuation">,</span>
MASTER_LOG_FILE<span class="token operator">=</span><span class="token string">&#39;xxx&#39;</span><span class="token punctuation">,</span>MASTER_LOG_POS<span class="token operator">=</span>XxX<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>启动两台从库主从复制，查看从库状态</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">start</span> slave<span class="token punctuation">;</span>
<span class="token keyword">show</span> slave <span class="token keyword">status</span>\\G
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-3-搭建" tabindex="-1"><a class="header-anchor" href="#_3-3-搭建" aria-hidden="true">#</a> 3.3. 搭建</h4><p>MyCat 控制后台数据库的读写分离和负载均衡由 schema.xml 文件 datahost 标签的 balance 属性控制，通过 writeType 及 switchType 来完成失败自动切换的。</p><p><img src="http://images.hellocode.top/image-20230210164023907.png" alt="image-20230210164023907" loading="lazy"></p><p><img src="http://images.hellocode.top/JstQxaG567jPVC3.png" alt="image-20220420220210328" loading="lazy"></p><p><code>balance=&quot;1&quot;</code></p><ul><li>代表全部的readHost与stand by writeHost参与select语句的负载均衡,简单的说，当双主双从模式（M1-&gt;S1,M2-&gt;S2,并且M1与M2互为主备）,正常情况下，M2,S1,S2都参与select 语句的负载均衡；</li></ul><p><code>writgType</code></p><ul><li>0:写操作都转发到第1台writeHost,writeHost1挂了,会切换到writeHost2上；</li><li>1：所有的写操作都随机地发送到配置的writeHost上；</li></ul><p><code>switchType</code>(writeHost1挂了,切换到writeHost2时)</p><ul><li>-1：不自动切换</li><li>1：自动切换</li></ul><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--schema.xml--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataHost</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dhost1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">maxCon</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1000<span class="token punctuation">&quot;</span></span> <span class="token attr-name">minCon</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>10<span class="token punctuation">&quot;</span></span> <span class="token attr-name">balance</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">writeType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dbType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mysql<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dbDriver</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>jdbc<span class="token punctuation">&quot;</span></span> <span class="token attr-name">switchType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span>  <span class="token attr-name">slaveThreshold</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>100<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>heartbeat</span><span class="token punctuation">&gt;</span></span>select user()<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>heartbeat</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>writeHost</span> <span class="token attr-name">host</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>master1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>jdbc:mysql://101.201.100.130:3306?useSSL=false<span class="token entity named-entity" title="&amp;">&amp;amp;</span>serverTimezone=Asia/Shanghai<span class="token entity named-entity" title="&amp;">&amp;amp;</span>characterEncoding=utf8<span class="token punctuation">&quot;</span></span> 
               <span class="token attr-name">user</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span>  <span class="token attr-name">password</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ll546546<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>readHost</span> <span class="token attr-name">host</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>slave<span class="token punctuation">&quot;</span></span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>jdbc:mysql://59.110.217.19:3306?useSSL=false<span class="token entity named-entity" title="&amp;">&amp;amp;</span>serverTimezone=Asia/Shanghai<span class="token entity named-entity" title="&amp;">&amp;amp;</span>characterEncoding=utf8<span class="token punctuation">&quot;</span></span> 
                  <span class="token attr-name">user</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span>  <span class="token attr-name">password</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ll546546<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>readHost</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>writeHost</span><span class="token punctuation">&gt;</span></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>writeHost</span> <span class="token attr-name">host</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>master2<span class="token punctuation">&quot;</span></span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>jdbc:mysql://101.201.100.???:3306?useSSL=false<span class="token entity named-entity" title="&amp;">&amp;amp;</span>serverTimezone=Asia/Shanghai<span class="token entity named-entity" title="&amp;">&amp;amp;</span>characterEncoding=utf8<span class="token punctuation">&quot;</span></span> 
               <span class="token attr-name">user</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span>  <span class="token attr-name">password</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ll546546<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>readHost</span> <span class="token attr-name">host</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>slave2<span class="token punctuation">&quot;</span></span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>jdbc:mysql://59.110.217.?:3306?useSSL=false<span class="token entity named-entity" title="&amp;">&amp;amp;</span>serverTimezone=Asia/Shanghai<span class="token entity named-entity" title="&amp;">&amp;amp;</span>characterEncoding=utf8<span class="token punctuation">&quot;</span></span> 
                  <span class="token attr-name">user</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span>  <span class="token attr-name">password</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ll546546<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>readHost</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>writeHost</span><span class="token punctuation">&gt;</span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataHost</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试</p><ul><li>登录MyCat，测试查询及更新操作，判定是否能够进行读写分离，以及读写分离的策略是否正确。</li><li>当主库挂掉一个之后，是否能够自动切换。</li></ul>`,98);function H(z,Q){const a=c("ExternalLinkIcon");return o(),l("div",null,[u,n("p",null,[n("a",r,[s("动画演示B-Tree"),t(a)])]),d,n("p",null,[n("a",k,[s("动画演示B+Tree"),t(a)])]),m,n("ul",null,[n("li",null,[n("p",null,[s("下载地址："),n("a",v,[s("http://dl.mycat.org.cn/"),t(a)]),b]),g]),y,h,q]),w,n("ul",null,[n("li",null,[s("参考"),n("a",E,[s("https://www.cnblogs.com/chen-guang/p/16063044.html"),t(a)])])]),_,f,T,x,n("ul",null,[L,R,N,S,A,n("li",null,[n("a",I,[s("start.sh"),t(a)]),s("： linux启动脚本")])]),n("p",null,[s("D. 启动：sh "),n("a",M,[s("start.sh"),t(a)])]),n("p",null,[s("E. 访问："),n("a",O,[s("http://192.168.200.210:8082/mycat"),t(a)])]),C,D,n("p",null,[n("a",U,[s("http://192.168.200.210:8082/mycat"),t(a)])]),B])}const V=p(i,[["render",H],["__file","mysql.html.vue"]]);export{V as default};
