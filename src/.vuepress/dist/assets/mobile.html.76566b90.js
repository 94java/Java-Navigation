import{_ as o}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as c,c as i,a as n,b as a,d as s,w as d,e,r as p}from"./app.ff70f562.js";const u={},r=e(`<h1 id="移动端开发" tabindex="-1"><a class="header-anchor" href="#移动端开发" aria-hidden="true">#</a> 移动端开发</h1><h2 id="_1-移动端基础" tabindex="-1"><a class="header-anchor" href="#_1-移动端基础" aria-hidden="true">#</a> 1. 移动端基础</h2><h3 id="_1-1-浏览器现状" tabindex="-1"><a class="header-anchor" href="#_1-1-浏览器现状" aria-hidden="true">#</a> 1.1 浏览器现状</h3><p>PC端常见浏览器 &amp; 移动端常见浏览器</p><table style="margin-left:auto;margin-right:auto;"><tr><td style="width:50%;"><h3>PC端常见浏览器</h3> 360浏览器、谷歌浏览器、火狐浏览器、QQ浏览器、百度浏览器、搜狗浏览器、IE浏览器。 </td><td style="width:50%;"><h3>移动端常见浏览器</h3> UC浏览器，QQ浏览器，欧朋浏览器，百度手机浏览器，360安全浏览器，谷歌浏览器，搜狗手机浏览器，猎豹浏览器，以及其他杂牌浏览器。 </td></tr></table><p>国内的UC和QQ，百度等手机浏览器都是根据Webkit修改过来的内核，国内尚无自主研发的内核，就像国内的手机操作系统都是基于Android修改开发的-样。<br><strong>总结：兼容移动端主流浏览器，处理Webkit内核浏览器即可。</strong></p><h3 id="_1-2-手机屏幕现状" tabindex="-1"><a class="header-anchor" href="#_1-2-手机屏幕现状" aria-hidden="true">#</a> 1.2 手机屏幕现状</h3><ul><li>移动端设备屏幕尺寸非常多， 碎片化严重。</li><li>Android设备有多种分辨率: 480x800， 480x854， 540x960， 720x1280 ， 1080x1920等， 还有传说中的2K ， 4k屏。</li><li>近年来iPhone的碎片化也加剧了， 其设备的主要分辨率有: 640x960， 640x1 136， 750x1334， 1242x2208等。</li><li>作为开发者无需关注这些分辨率，因为我们常用的尺寸单位是px。</li></ul><h3 id="_1-3-移动端调试方法" tabindex="-1"><a class="header-anchor" href="#_1-3-移动端调试方法" aria-hidden="true">#</a> 1.3 移动端调试方法</h3><ul><li>Chrome DevTools（谷歌浏览器）的模拟手机调试</li><li>搭建本地web服务器，手机和服务器一个局域网内，通过手机访问服务器</li><li>使用外网服务器，直接IP或域名访问</li></ul><h3 id="_1-4-总结" tabindex="-1"><a class="header-anchor" href="#_1-4-总结" aria-hidden="true">#</a> 1.4 总结</h3><ul><li>移动端浏览器我们主要对webkit内核进行兼容</li><li>我们现在开发的移动端主要针对手机端开发</li><li>现在移动端碎片化比较严重，分辨率和屏幕尺寸大小不一</li><li>学会用谷歌浏览器模拟手机界面以及调试</li></ul><h2 id="_2-视口" tabindex="-1"><a class="header-anchor" href="#_2-视口" aria-hidden="true">#</a> 2. 视口</h2><p>视口（viewport）就是浏览器显示页面内容的屏幕区域。视口可以分为布局视口、视觉视口和理想视口</p><h3 id="_2-1-布局视口-layout-viewport" tabindex="-1"><a class="header-anchor" href="#_2-1-布局视口-layout-viewport" aria-hidden="true">#</a> 2.1 布局视口 layout viewport</h3><ul><li>一般移动设备的浏览器都默认设置了一个布局视口，用于解决早期的PC端页面在手机上显示的问题。</li><li>iOS， Android基本都将这个视口分辨率设置为980px ，所以PC上的网页大多都能在手机上呈现，只不过元素看上去很小，一般默认可以通过手动缩放网页。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Hacker-C/Picture-Bed@main/front-end/1.79jc9yhphdw0.jpg" alt="1" loading="lazy"></p><h3 id="_2-2-视觉视口-visual-viewport" tabindex="-1"><a class="header-anchor" href="#_2-2-视觉视口-visual-viewport" aria-hidden="true">#</a> 2.2 视觉视口 visual viewport</h3><ul><li>字面意思，它是用户正在看到的网站的区域。注意:是网站的区域。</li><li>我们可以通过缩放去操作视觉视口， 但不会影响布局视口，布局视口仍保持原来的宽度。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Hacker-C/Picture-Bed@main/front-end/2.2ycuucitoz6.jpg" alt="2" loading="lazy"></p><h3 id="_2-3-理想视口-ideal-viewport" tabindex="-1"><a class="header-anchor" href="#_2-3-理想视口-ideal-viewport" aria-hidden="true">#</a> 2.3 理想视口 ideal viewport</h3><ul><li>为了使网站在移动端有最理想的浏览和阅读宽度而设定</li><li>理想视口个对设备来讲，是最理想的视口尺寸</li><li>需要手动添写 <code>meta</code> 视口标签通知浏览器操作</li><li>meta视口标签的主要目的：<strong>布局视口的宽度应该与理想视口的宽度一致，简单理解就是设备有多宽，我们布局的视口就多宽</strong></li></ul><h3 id="_2-4-meta视口标签" tabindex="-1"><a class="header-anchor" href="#_2-4-meta视口标签" aria-hidden="true">#</a> 2.4 meta视口标签</h3><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0, maximum-scale=1.0,minimum-scale=1.0, user-scalable=no<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>属性</th><th>解释说明</th></tr></thead><tbody><tr><td><code>width</code></td><td>宽度设置的是 <code>viewport</code> 宽度，可以设置 <code>device-width</code> 特殊值</td></tr><tr><td><code>initial-scale</code></td><td>初始缩放比，大于 0 的数字</td></tr><tr><td><code>maximum-scale</code></td><td>最大缩放比，大于 0 的数字</td></tr><tr><td><code>minimum-scale</code></td><td>最小缩放比，大于 0 的数字</td></tr><tr><td><code>user-scalable</code></td><td>用户是否可以缩放，yes 或 no ( 1或0)</td></tr></tbody></table><h3 id="_2-5-总结" tabindex="-1"><a class="header-anchor" href="#_2-5-总结" aria-hidden="true">#</a> 2.5 总结</h3><ul><li>视口就是浏览器显示页面内容的屏幕区域</li><li>视口分为布局视口、视觉视口和理想视口</li><li>我们移动端布局想要的是理想视[ 就是手机屏幕有多宽，我们的布局视口就有多宽</li><li>想要理想视口，我们需要给我们的移动端页面添加meta视口标签</li></ul><h3 id="_2-6-标准的viewport设置" tabindex="-1"><a class="header-anchor" href="#_2-6-标准的viewport设置" aria-hidden="true">#</a> 2.6 标准的viewport设置</h3><ul><li>视口宽度和设备保持一致：<code>width=device-width</code></li><li>视口的默认缩放比例 1.0：<code>initial-scale=1.0</code></li><li>不允许用户自行缩放：<code>user-scalable=no</code></li><li>最大允许的缩放比例 1.0：<code>maximum-scale=1.0</code></li><li>最小允许的缩放比例 1.0：<code>minimum-scale=1.0</code></li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0, maximum-scale=1.0,minimum-scale=1.0, user-scalable=no<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_3-二倍图" tabindex="-1"><a class="header-anchor" href="#_3-二倍图" aria-hidden="true">#</a> 3. 二倍图</h2><h3 id="_3-1-物理像素-物理像素比" tabindex="-1"><a class="header-anchor" href="#_3-1-物理像素-物理像素比" aria-hidden="true">#</a> 3.1 物理像素&amp;物理像素比</h3><ul><li>物理像素点指的是屏幕显示的最小颗粒，是物理真实存在的。这是商在出厂时就设置好了，比如苹果6\\7\\8是750*1334</li><li>我们开发时候的1px不是一定等于1个物理像素的心</li><li>PC端页面，1个px等于1个物理像素的,但是移动端就不尽相同</li><li><strong>一个px的能显示的物理像素点的个数，称为物理像素比</strong>或屏幕像素比</li><li>PC端和早前的手机屏幕/普通手机屏幕：1CSS像素= 1 物理像素的，物理像素比为 1。而移动端就不尽相同，例如iphone6/7/8的物理像素比为 2。</li><li>Retina (视网膜屏幕)是一种显示技术，可以将把更多的物理像素点压缩至一块屏幕里，从而达到更高的分辨率,并提高屏幕显示的细腻程度。</li></ul><h3 id="_3-2-二倍图" tabindex="-1"><a class="header-anchor" href="#_3-2-二倍图" aria-hidden="true">#</a> 3.2 二倍图</h3><p>准备的图片比实际大小大 2 倍，这就是二倍图。</p><h3 id="_3-3-二倍图解决方案" tabindex="-1"><a class="header-anchor" href="#_3-3-二倍图解决方案" aria-hidden="true">#</a> 3.3 二倍图解决方案</h3><ul><li>我们需要一个 50*50 像素（CSS像素）的图片，直接放到 iphone8 里面会放大 2 倍 100* 100 会模糊。</li><li>我们采取的是 放一个 100*100 图片然后手动的把这个图片缩小为 50* 50（css像素）</li><li>我们准备的图片比我们实际需要的大小大 2 倍，这就方式就是2倍图</li></ul><h3 id="_3-4-多倍图" tabindex="-1"><a class="header-anchor" href="#_3-4-多倍图" aria-hidden="true">#</a> 3.4 多倍图</h3><ul><li>对于一张50px * 50px的图片，在手机Retina屏中打开,按照刚才的物理像素比会放大倍数,这样会造成图片模糊</li><li>在标准的viewport设置中,使用倍图来提高图片质量,解决在高清设备中的模糊问题</li><li>通常使用二倍图,因为iPhone 6\\7\\8的影响，但是现在- 还存在3倍图4倍图的情况,这个看实际开发公司需求</li><li>背景图片注意缩放问题</li><li><strong>实际开发中，使用PS切图可以按照需要切出2/3倍图</strong>。</li></ul><h3 id="_3-5-背景缩放-background-size" tabindex="-1"><a class="header-anchor" href="#_3-5-背景缩放-background-size" aria-hidden="true">#</a> 3.5 背景缩放 background-size</h3><p>background size属性规定背景图像的尺寸</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">background-size</span><span class="token punctuation">:</span> 背景图片宽度 背景图片高度 | 宽度 | 百分比 | cover | contain<span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>只写一个参数肯定是宽度高度省略了会 等比例缩放</li><li>单位可以给百分比</li><li>cover 完全覆盖盒子，图片可能有部分显示不全</li><li>contain 是盒子完全包含图片，图片拉伸到最大</li></ul><h2 id="_4-移动端开发选择" tabindex="-1"><a class="header-anchor" href="#_4-移动端开发选择" aria-hidden="true">#</a> 4. 移动端开发选择</h2><h3 id="_4-1-移动端主流方案" tabindex="-1"><a class="header-anchor" href="#_4-1-移动端主流方案" aria-hidden="true">#</a> 4.1 移动端主流方案</h3><h4 id="_4-1-1-单独制作移动端页面-主流" tabindex="-1"><a class="header-anchor" href="#_4-1-1-单独制作移动端页面-主流" aria-hidden="true">#</a> 4.1.1 单独制作移动端页面（主流）</h4><blockquote><p>京东商城手机版、淘宝触屏版</p></blockquote><p>通常情况下，网址域名前面加m（mobile）可以打开移动端。通过判断设备，如果是移动设备打开，则 <strong>跳到移动端页面。</strong></p><h4 id="_4-1-2-响应式页面兼容移动端-其次" tabindex="-1"><a class="header-anchor" href="#_4-1-2-响应式页面兼容移动端-其次" aria-hidden="true">#</a> 4.1.2 响应式页面兼容移动端（其次）</h4>`,49),k={href:"http://www.samsung.com",target:"_blank",rel:"noopener noreferrer"},h=e('<p>通过判断屏幕宽度来改编样式，响应式兼容不同终端。<br> 缺点：<strong>制作麻烦，需要花费大量精力取调兼容新问题。</strong></p><h3 id="_4-2-总结" tabindex="-1"><a class="header-anchor" href="#_4-2-总结" aria-hidden="true">#</a> 4.2 总结</h3><p>现在市场常见的移动端开发有 <strong>单独制作移动端页面</strong> 和 <strong>响应式页面</strong> 两种方案。<br> 现在市场 <strong>主流的选择还是单独制作移动端页面</strong>。</p><h2 id="_5-移动端技术解决方案" tabindex="-1"><a class="header-anchor" href="#_5-移动端技术解决方案" aria-hidden="true">#</a> 5. 移动端技术解决方案</h2><h3 id="_5-1-移动端浏览器" tabindex="-1"><a class="header-anchor" href="#_5-1-移动端浏览器" aria-hidden="true">#</a> 5.1 移动端浏览器</h3><p>移动端浏览器基本以 webkit 内核为主，因此我们就考虑 webkit 兼容性问题。<br> 我们可以放心使用 H5 和 CSS3 样式。<br> 同时我们浏览器的私有前缀，只需要考虑加上 webkit 就行。</p><h3 id="_5-2-css初始化" tabindex="-1"><a class="header-anchor" href="#_5-2-css初始化" aria-hidden="true">#</a> 5.2 CSS初始化</h3><p>移动端初始化推荐使用 normalize.css，优点：</p><ul><li>保护了有价值的默认值</li><li>修复了浏览器的bug</li><li>是模块化的</li><li>拥有详细的文档</li></ul>',9),m={href:"https://necolas.github.io/normalize.css/",target:"_blank",rel:"noopener noreferrer"},v=e(`<h3 id="_5-3-css3-盒子模型-box-sizing" tabindex="-1"><a class="header-anchor" href="#_5-3-css3-盒子模型-box-sizing" aria-hidden="true">#</a> 5.3 CSS3 盒子模型 box-sizing</h3><ul><li>传统盒子模型宽度计算：盒子宽度 = CSS中设置的 width + border + padding</li><li>CSS3 传统盒子模型：盒子宽度 = CSS中设置的 width（包含了border+padding）。也就是说，CSS3盒子模型的padding和border不会再撑大盒子了。</li></ul><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/* CSS3盒子模型 */</span>
<span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>
<span class="token comment">/* 传统盒子模型 */</span>
<span class="token property">box-sizing</span><span class="token punctuation">:</span> content-box<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),g=e(`<ul><li>移动端可以全部CSS3盒子模型</li><li>PC端如果完全需要兼容，就用传统默默是；不考虑兼容性，选择CSS3盒子模型。</li></ul><h3 id="_5-4-特殊样式" tabindex="-1"><a class="header-anchor" href="#_5-4-特殊样式" aria-hidden="true">#</a> 5.4 特殊样式</h3><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/* CSS3盒子模型 */</span>
<span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>
<span class="token property">-webkit-box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>
<span class="token comment">/* 点击高亮需要清除，设置为 transparent 完全透明 */</span>
<span class="token property">-webkit-tap-highlight-color</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span>
<span class="token comment">/* 在移动端默认外观在ios上加上这个属性才能给按钮和输入框自定义样式 */</span>
<span class="token property">-webkit-appearance</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
<span class="token comment">/* 禁用长按页面时弹出的菜单 */</span>
<span class="token selector">img, a</span> <span class="token punctuation">{</span><span class="token property">-webkit-touch-callout</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-移动端常见布局" tabindex="-1"><a class="header-anchor" href="#_6-移动端常见布局" aria-hidden="true">#</a> 6. 移动端常见布局</h2><h3 id="_6-1-移动端技术选型" tabindex="-1"><a class="header-anchor" href="#_6-1-移动端技术选型" aria-hidden="true">#</a> 6.1 移动端技术选型</h3><h4 id="_6-1-1-单独制作移动端页面-主流" tabindex="-1"><a class="header-anchor" href="#_6-1-1-单独制作移动端页面-主流" aria-hidden="true">#</a> 6.1.1 单独制作移动端页面（主流）</h4><ul><li>流式布局（百分比布局）</li><li>flex 弹性布局（强烈推荐）</li><li>less + rem + 媒体查询布局</li><li>混合布局</li></ul><h4 id="_6-1-2-响应式页面兼容移动端-其次" tabindex="-1"><a class="header-anchor" href="#_6-1-2-响应式页面兼容移动端-其次" aria-hidden="true">#</a> 6.1.2 响应式页面兼容移动端（其次）</h4><ul><li>媒体查询</li><li>bootstrap</li></ul><h3 id="_6-2-流式布局" tabindex="-1"><a class="header-anchor" href="#_6-2-流式布局" aria-hidden="true">#</a> 6.2 流式布局</h3><ul><li>流式布局，就是百分比布局，也称非固定像素布局。</li><li>通过盒子的宽度设置成百分比来根据屏幕的宽度来进行伸缩，不受固定像素的限制，内容向两侧填充</li><li>流式布局方式是移动web开发使用的比较常见的布局方式。 <img src="https://cdn.jsdelivr.net/gh/Hacker-C/Picture-Bed@main/FrontEnd/FlowLayout1.556mbehtar80.png" alt="FlowLayout1" loading="lazy"></li><li><code>max-width</code> 最大宽度（<code>max-height</code> 最大高度）</li><li><code>min-width</code> 最小宽度（<code>min-height</code> 最小高度）</li></ul><h4 id="_6-2-1-流式布局举例" tabindex="-1"><a class="header-anchor" href="#_6-2-1-流式布局举例" aria-hidden="true">#</a> 6.2.1 流式布局举例</h4><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/* 1. 主体大盒子设置为 100% */</span>
<span class="token selector">body</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
    <span class="token property">min-width</span><span class="token punctuation">:</span> 320px<span class="token punctuation">;</span>
    <span class="token property">max-width</span><span class="token punctuation">:</span> 640px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/* 2. 主体的某一块区域，不设置高度和宽度 */</span>
<span class="token comment">/* 3. 该区域内的部分按照比例分配宽度，设置浮动。 */</span>
<span class="token selector">.seckill div:nth-child(2) ul li</span> <span class="token punctuation">{</span>
    <span class="token comment">/* 共6块区域，1/6=16.66% */</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 16.66%<span class="token punctuation">;</span>
    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>
    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/* 4. 小区域内部放置的图片设置宽度为 100% */</span>
<span class="token selector">.seckill div:nth-child(2) ul li img</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-3-流式布局案例-京东移动端首页" tabindex="-1"><a class="header-anchor" href="#_6-3-流式布局案例-京东移动端首页" aria-hidden="true">#</a> 6.3 流式布局案例：京东移动端首页</h3>`,14),b={href:"https://m.jd.com/",target:"_blank",rel:"noopener noreferrer"},x={href:"https://www.aliyundrive.com/s/u8SmJQP1vjy",target:"_blank",rel:"noopener noreferrer"},_=e(`<h4 id="_6-3-1-二倍精灵图做法" tabindex="-1"><a class="header-anchor" href="#_6-3-1-二倍精灵图做法" aria-hidden="true">#</a> 6.3.1 二倍精灵图做法</h4><ul><li>在 firework 里面把精灵图等比例缩放为原来的一半（使用fireworks修改宽度和高度即可缩放）</li><li>之后根据大小测坐标（然后测量x、y坐标）</li><li>注意代码里 <code>background-size</code> 也要写：精灵图原来宽度的一半</li></ul><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>../images/jd-sprites.png<span class="token punctuation">)</span></span> no-repeat -81px 0<span class="token punctuation">;</span>
<span class="token comment">/* 原始图大小为400px左右 */</span>
<span class="token property">background-size</span><span class="token punctuation">:</span> 200px auto<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-3-2-图片格式" tabindex="-1"><a class="header-anchor" href="#_6-3-2-图片格式" aria-hidden="true">#</a> 6.3.2 图片格式</h4><h5 id="_1-dpg图片压缩技术" tabindex="-1"><a class="header-anchor" href="#_1-dpg图片压缩技术" aria-hidden="true">#</a> ① DPG图片压缩技术</h5><p>京东自主研发推出DPG图片压缩技术，经测试该技术，可直接节省用户近50%的浏览流量，<strong>极大的提升了用户的网页打开速度</strong>。能够兼容jpeg，实现全平台、全部浏览器的兼容支持，经过内部和外部上万张图片的人眼浏览测试后发现，<strong>压缩后的图片和webp的清晰度对比没有差距</strong>。</p><h5 id="_2-webp-图片格式" tabindex="-1"><a class="header-anchor" href="#_2-webp-图片格式" aria-hidden="true">#</a> ② webp 图片格式</h5><p>谷歌开发的一种旨在 <strong>加快图片加载速度</strong> 的图片格式。图片压缩体积大约只有JPEG的2/3，并能 <strong>节省大量的服务器宽带资源和数据空间</strong>。</p><h2 id="_1-flex-布局优势" tabindex="-1"><a class="header-anchor" href="#_1-flex-布局优势" aria-hidden="true">#</a> 1. flex 布局优势</h2><h3 id="_1-1-传统布局与flex布局" tabindex="-1"><a class="header-anchor" href="#_1-1-传统布局与flex布局" aria-hidden="true">#</a> 1.1 传统布局与flex布局</h3><h4 id="_1-1-1-传统布局" tabindex="-1"><a class="header-anchor" href="#_1-1-1-传统布局" aria-hidden="true">#</a> 1.1.1 传统布局</h4><ul><li>兼容性好</li><li>布局繁琐</li><li>局限性，不能再移动端很好的布局</li></ul><h4 id="_1-1-2-flex-弹性布局" tabindex="-1"><a class="header-anchor" href="#_1-1-2-flex-弹性布局" aria-hidden="true">#</a> 1.1.2 flex 弹性布局</h4><ul><li>操作方便，布局简单，移动端应用很广泛</li><li>PC端浏览器支持情况差</li><li>IE11或更低版本，不支持或部分支持</li></ul><h4 id="_1-1-3-建议" tabindex="-1"><a class="header-anchor" href="#_1-1-3-建议" aria-hidden="true">#</a> 1.1.3 建议</h4><ol><li>若是PC端布局，建议传统布局。</li><li>若是移动端布局或者不考虑兼容性的PC端布局，还是使用flex弹性布局。</li></ol><h2 id="_2-flex-布局原理" tabindex="-1"><a class="header-anchor" href="#_2-flex-布局原理" aria-hidden="true">#</a> 2. flex 布局原理</h2><p>flex 是 flexible Box 的缩写，意为 “弹性布局”，用来为盒状模型提供最大的灵活性，<strong>任何一个容器都可以指定为 flex 布局</strong>。</p><ul><li>为父盒子设为 <code>flex</code> 布局后，子元素的 <code>float</code>、<code>clear</code>、<code>vertical-align</code> 属性将失效。</li><li>伸缩布局 = 弹性布局 = 伸缩盒布局 = 弹性盒布 = flex 布局</li></ul><p>采用 Flex 布局的元素，称为 <strong>Flex容器</strong>（flex container），简称 “容器”。它的所有子元素自动成为容器成员，称为 <strong>Flex项目</strong>（flex item），简称 “项目”。</p><ul><li>flex项目本身也可以成为容器，称为子容器。则上一级则称为父容器。</li><li>子容器可以横向排列也可以纵向排列。</li><li>原理总结：<strong>通过给父盒子添加flex属性，来控制子盒子的位置和排列方式</strong>。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Hacker-C/Picture-Bed@main/FrontEnd/Flex1.1414v8dfngcg.png" alt="Flex1" loading="lazy"></p><h2 id="_3-flex-布局父项常见属性" tabindex="-1"><a class="header-anchor" href="#_3-flex-布局父项常见属性" aria-hidden="true">#</a> 3. flex 布局父项常见属性</h2><h3 id="_3-1-常见父项属性" tabindex="-1"><a class="header-anchor" href="#_3-1-常见父项属性" aria-hidden="true">#</a> 3.1 常见父项属性</h3><p>以下由 6 个属性是对父元素设置的。</p><ul><li><code>flex-direction</code>：设置主轴方向</li><li><code>justify-content</code>：设置主轴上的子元素排列方式</li><li><code>flex-wrap</code>：设置子元素是否换行</li><li><code>align-content</code>：设置侧轴上的子元素的排列方式（多行）</li><li><code>align-items</code>：设置侧轴上的子元素排列方式（单行）</li><li><code>flex-flow</code>：复合属性，相当于同时设置了 <code>flex-direction</code> 和 <code>flex-wrap</code></li></ul><h3 id="_3-2-flex-direction-⭐" tabindex="-1"><a class="header-anchor" href="#_3-2-flex-direction-⭐" aria-hidden="true">#</a> 3.2 flex-direction ⭐</h3><p><code>flex-direction</code> 设置主轴方向。</p><h4 id="_3-2-1-主轴与侧轴" tabindex="-1"><a class="header-anchor" href="#_3-2-1-主轴与侧轴" aria-hidden="true">#</a> 3.2.1 主轴与侧轴</h4><p>在 flex 布局中，分为主轴和侧轴两个方向，同时的叫法有：行和列、x轴和y轴。</p><ul><li>默认主轴方向为 x 轴方向，水平向右</li><li>默认侧轴方向为 y 轴方向，垂直向下</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Hacker-C/Picture-Bed@main/FrontEnd/Flex2.5l3abdtll5c0.png" alt="Flex2" loading="lazy"></p><h4 id="_3-2-2-属性值" tabindex="-1"><a class="header-anchor" href="#_3-2-2-属性值" aria-hidden="true">#</a> 3.2.2 属性值</h4><p><code>flex-direction</code> 属性决定主轴的方向（即项目的排列方向）<br> 注意：主轴和侧轴是会变化的，取决于 <code>flex-direction</code> 设置谁为主轴，则另外一个即为侧轴。子元素是靠主轴来排列的。</p><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>row</td><td>默认值，从左到右</td></tr><tr><td>row-reverse</td><td>从右到左</td></tr><tr><td>column</td><td>从上到下</td></tr><tr><td>column-reverse</td><td>从下到上</td></tr></tbody></table><h3 id="_3-3-justify-content-⭐" tabindex="-1"><a class="header-anchor" href="#_3-3-justify-content-⭐" aria-hidden="true">#</a> 3.3 justify-content ⭐</h3><p><code>justify-content</code> 设置 <strong>主轴</strong> 上子元素排列方式。</p><blockquote><p>[!WARNING] 使用此属性之前一定要确定好主轴是哪个。</p></blockquote><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>flex-start</td><td>默认值，从头部开始，若主轴是x轴，则从左到右</td></tr><tr><td>flex-end</td><td>从尾部开始排列</td></tr><tr><td>center</td><td>在主轴剧中对齐（若主轴是x，则水平居中）</td></tr><tr><td>space-around</td><td>平分剩余空间</td></tr><tr><td>space-between</td><td><strong>先向两边贴紧，再平分剩余空间（重要）</strong></td></tr></tbody></table><h3 id="_3-4-flex-wrap-⭐" tabindex="-1"><a class="header-anchor" href="#_3-4-flex-wrap-⭐" aria-hidden="true">#</a> 3.4 flex-wrap ⭐</h3><p><code>flex-wrap</code> 设置子元素是否换行。<br> 默认情况下，项目都排在一条线（又称轴线）上，<code>flex-wrap</code> 属性定义，<strong>flex 布局中默认是不换行的</strong>。</p><blockquote><p>[!TIP] 若父盒子一行上装不开，则会缩小子元素的宽度，从而仍然一行显示。</p></blockquote><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>nowrap</td><td>默认值，不换行</td></tr><tr><td>wrap</td><td>换行</td></tr><tr><td>wrap-reverse</td><td>反向换行</td></tr></tbody></table><h3 id="_3-5-align-items-⭐" tabindex="-1"><a class="header-anchor" href="#_3-5-align-items-⭐" aria-hidden="true">#</a> 3.5 align-items ⭐</h3><p><code>align-items</code> 设置侧轴上的子元素排列方式（单行）。</p><p>该属性控制子项在侧轴（默认是y轴）上的排列方式，<strong>在子项为单项的时候使用</strong>。</p><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>flex-start</td><td>从上到下</td></tr><tr><td>flex-end</td><td>从下到上</td></tr><tr><td>center</td><td>挤在一起（垂直居中）</td></tr><tr><td>strech</td><td>拉伸（默认值）</td></tr></tbody></table><h3 id="_3-6-align-content" tabindex="-1"><a class="header-anchor" href="#_3-6-align-content" aria-hidden="true">#</a> 3.6 align-content</h3><p><code>align-content</code> <strong>设置侧轴上的子元素的排列方式（多行）</strong></p><p>设置子项在侧轴上的排列方式并且 <strong>只能用于子项出现换行的情况（多行），在单行下是没有效果的</strong>。</p><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>flex</td><td>默认值，在侧轴的头部开始排列</td></tr><tr><td>flex-end</td><td>在侧轴的尾部开始排列</td></tr><tr><td>center</td><td>在侧轴中间显示</td></tr><tr><td>space-around</td><td>子项在侧轴平分剩余空间</td></tr><tr><td>space-between</td><td>子项在侧轴先分布在两头，再平分剩余空间</td></tr><tr><td>strech</td><td>设置子项元素高度任意平分父元素高度</td></tr></tbody></table><h3 id="_3-7-align-content-和-align-items-区别" tabindex="-1"><a class="header-anchor" href="#_3-7-align-content-和-align-items-区别" aria-hidden="true">#</a> 3.7 align-content 和 align-items 区别</h3><ul><li><code>align-items</code> 适用于单行情况下，只有上下对齐、居中和拉伸</li><li><code>align-content</code> 适用于 **换行（多行）**情况下（单行情况下无效），可以设置上对齐、下对齐、居中、拉伸以及平分剩余空间等属性值</li></ul><blockquote><p>[!TIP] 单行用 <code>align-items</code>，多行用 <code>align-content</code>。</p></blockquote><h3 id="_3-8-flex-flow-以及小总结" tabindex="-1"><a class="header-anchor" href="#_3-8-flex-flow-以及小总结" aria-hidden="true">#</a> 3.8 flex-flow 以及小总结</h3><p><code>flex-flow</code> 属性是 <code>flex-direction</code> 和 <code>flex-wrap</code> 属性的复合属性。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">flex-flow</span><span class="token punctuation">:</span> row wrap<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>flex-direction</code>：设置主轴方向</li><li><code>justify-container</code>：设置主轴上的子元素排列方式</li><li><code>flex-wrap</code>：设置子元素是否换行</li><li><code>align-content</code>：设置侧轴上的子元素的排列方式（多行）</li><li><code>align-items</code>：设置侧轴上的子元素的排列方式（单行）</li><li><code>flex-flow</code> ：复合属性，相当于同时设置了 <code>flex-direction</code> 和 <code>flow-wrap</code></li></ul><h2 id="_4-flex-布局子项常见属性" tabindex="-1"><a class="header-anchor" href="#_4-flex-布局子项常见属性" aria-hidden="true">#</a> 4. flex 布局子项常见属性</h2><h3 id="_4-1-flex-属性-⭐" tabindex="-1"><a class="header-anchor" href="#_4-1-flex-属性-⭐" aria-hidden="true">#</a> 4.1 flex 属性 ⭐</h3><p><code>flex</code> 属性定义子项目 <strong>分配剩余空间</strong>，用 <code>flex</code> 表示占多少份数。<code>flex</code> 的值可以是整数，可以是百分数。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.item</span> <span class="token punctuation">{</span>
    <span class="token property">flex</span><span class="token punctuation">:</span> &lt;number&gt;<span class="token punctuation">;</span> <span class="token comment">/*default 0*/</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>[!TIP] 例如要平分一个盒子，则不给定子元素宽度（高度），然后给每一个子元素设置属性：<code>flex: 1</code>。</p></blockquote><h3 id="_4-2-align-self" tabindex="-1"><a class="header-anchor" href="#_4-2-align-self" aria-hidden="true">#</a> 4.2 align-self</h3><p><code>align-self</code> 控制子项自己在侧轴上的排列方式。</p><p><code>align-self</code> 属性允许单个项目有与其他项目不一样的对齐方式，可覆盖 <code>align-items</code> 属性。默认值为 <code>auto</code>，表示继承父元素的 <code>align-items</code> 属性，如果没有父元素，则等同于 <code>strech</code>。</p><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td><code>auto</code></td><td>默认值，继承父盒子的 align-items 值。</td></tr><tr><td><code>strech</code></td><td>元素被拉伸以适应容器。</td></tr><tr><td><code>center</code></td><td>元素位于容器的中心</td></tr><tr><td><code>flex-start</code></td><td>元素位于容器的开头</td></tr><tr><td><code>flex-end</code></td><td>元素位于容器的结尾</td></tr></tbody></table><h3 id="_4-3-order" tabindex="-1"><a class="header-anchor" href="#_4-3-order" aria-hidden="true">#</a> 4.3 order</h3><p><code>order</code> 属性定义项目的排列顺序。</p><p>数值越小，排列越靠前，默认为 <code>0</code>。</p><blockquote><p>[!ATTENTION] 注意：和 <code>z-index</code> 不一样。</p></blockquote><h2 id="_5-携程网首页案例制作" tabindex="-1"><a class="header-anchor" href="#_5-携程网首页案例制作" aria-hidden="true">#</a> 5. 携程网首页案例制作</h2><h3 id="_5-1-技术选型" tabindex="-1"><a class="header-anchor" href="#_5-1-技术选型" aria-hidden="true">#</a> 5.1 技术选型</h3><ul><li>方案：单独制作移动端页面</li><li>技术：布局采用flex布局</li></ul><h3 id="_5-2-背景线性突变" tabindex="-1"><a class="header-anchor" href="#_5-2-背景线性突变" aria-hidden="true">#</a> 5.2 背景线性突变</h3><p>语法1：用于移动端，必须带私有前缀 <code>-webkit-</code></p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">-webkit-linear-gradient</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> red<span class="token punctuation">,</span> blue<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">-webkit-linear-gradient</span><span class="token punctuation">(</span>top left<span class="token punctuation">,</span> red<span class="token punctuation">,</span> blue<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,77),f={href:"https://www.aliyundrive.com/s/jKWLJVyshCe",target:"_blank",rel:"noopener noreferrer"},q=e(`<h2 id="_1-rem-基础" tabindex="-1"><a class="header-anchor" href="#_1-rem-基础" aria-hidden="true">#</a> 1. rem 基础</h2><p><code>rem</code>（root em）是一个单位，类似于 <code>em</code>。区别：</p><ul><li><code>em</code> 是相对于父元素字体大小。</li><li><code>rem</code> 的基准是 <strong>相对于html元素的字体大小</strong>。</li></ul><p>比如，根元素（html）设置 <code>font-size: 12px</code>，非根元素设置 <code>width: 2rem</code>，则换成 <code>px</code> 就是 <code>24px</code>。<br> 优点：<strong>通过修改html元素字体的大小来改变页面中元素的大小从而整体控制整个页面</strong>。</p><h2 id="_2-媒体查询" tabindex="-1"><a class="header-anchor" href="#_2-媒体查询" aria-hidden="true">#</a> 2. 媒体查询</h2><h3 id="_2-1-定义" tabindex="-1"><a class="header-anchor" href="#_2-1-定义" aria-hidden="true">#</a> 2.1 定义</h3><p>媒体查询（Media Query）是 CSS3 的新语法。</p><ul><li>使用 <code>@media</code> 查询，可以针对不同的媒体类型定义不同的样式</li><li><code>@media</code> <strong>可以针对不同屏幕尺寸设置不同的样式</strong></li><li>当你重置浏览器大小的过程中，页面也会根据浏览器的宽度和高度重新渲染页面</li><li>目前针对很多苹果手机、安卓手机、平板等设备都用到媒体查询</li></ul><h3 id="_2-2-语法规范" tabindex="-1"><a class="header-anchor" href="#_2-2-语法规范" aria-hidden="true">#</a> 2.2 语法规范</h3><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token atrule"><span class="token rule">@media</span> mediatype <span class="token keyword">and</span>|<span class="token keyword">not</span>|<span class="token keyword">only</span> <span class="token punctuation">(</span>media feature<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
    CSS3-Code<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>以 <code>@media</code> 开头</li><li>mediatype 是媒体类型</li><li>关键字 <code>and</code>、<code>not</code>、<code>only</code></li><li><code>media feature</code> 媒体特性，必须有小括号</li></ul><h4 id="_2-2-1-mediatype-查询类型" tabindex="-1"><a class="header-anchor" href="#_2-2-1-mediatype-查询类型" aria-hidden="true">#</a> 2.2.1 mediatype 查询类型</h4><p>将不同终端设备划分成不同的类型，称为媒体类型。</p><table><thead><tr><th>值</th><th>解释说明</th></tr></thead><tbody><tr><td><code>all</code></td><td>用于所有设备</td></tr><tr><td><code>print</code></td><td>用于打印机和打印浏览</td></tr><tr><td><code>screen</code></td><td>用于电脑屏幕，平板电脑，智能手机等</td></tr></tbody></table><h4 id="_2-2-2-关键字-and-not-only" tabindex="-1"><a class="header-anchor" href="#_2-2-2-关键字-and-not-only" aria-hidden="true">#</a> 2.2.2 关键字 and not only</h4><p>关键字将媒体类型特性连接到一起作为媒体查询的条件。</p><ul><li><code>and</code>：可以将多个类型或多个媒体类型连接到一起成为媒体查询的条件</li><li><code>not</code>：排除某个媒体类型，相当于 “非” 的意思，可以省略</li><li><code>only</code>：指定某个特定的媒体类型，可以省略</li></ul><h4 id="_2-2-3-媒体特性" tabindex="-1"><a class="header-anchor" href="#_2-2-3-媒体特性" aria-hidden="true">#</a> 2.2.3 媒体特性</h4><p>每种媒体类型都具体各自不同的特性，根据不同媒体类型的媒体特性设置不同的展示风格。我们暂且了解三个，注意他们要加小括号包含。</p><table><thead><tr><th>值</th><th>解释</th></tr></thead><tbody><tr><td><code>width</code></td><td>定义输出设备中页面可见区域的宽度</td></tr><tr><td><code>min-width</code></td><td>定义输出设备中页面最小可见区域宽度</td></tr><tr><td><code>max-width</code></td><td>定义输出设备中页面最大可见区域宽度</td></tr></tbody></table><p><strong>媒体查询的价值：媒体查询可以根据不同的屏幕尺寸改变不同的样式。</strong></p><p>举例</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/* 在屏幕上并且最大的宽度是800像素设置我们想要的样式 */</span>
<span class="token atrule"><span class="token rule">@media</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 800px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
    <span class="token selector">body</span> <span class="token punctuation">{</span>
        <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">/* 在屏幕上并且最大的宽度是500像素设置我们想要的样式 */</span>
<span class="token atrule"><span class="token rule">@media</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 500px<span class="token punctuation">)</span></span><span class="token punctuation">{</span>
    <span class="token selector">body</span> <span class="token punctuation">{</span>
        <span class="token property">background-color</span><span class="token punctuation">:</span> purple<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-媒体查询-rem实现元素动态大小变化" tabindex="-1"><a class="header-anchor" href="#_2-3-媒体查询-rem实现元素动态大小变化" aria-hidden="true">#</a> 2.3 媒体查询+rem实现元素动态大小变化</h3><p><code>rem</code> 单位是跟着 <code>html</code> 来走的，有了 <code>rem</code> 页面元素可以设置不同大小尺寸媒体查询可以根据不同设备宽度来修改样式。<br><strong>媒体查询+rem</strong> 就可以实现不同设备宽度，实现页面元素大小的动态变化。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token atrule"><span class="token rule">@media</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 320px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
    <span class="token selector">html</span> <span class="token punctuation">{</span>
        <span class="token property">font-size</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token atrule"><span class="token rule">@media</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 640px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
    <span class="token selector">html</span> <span class="token punctuation">{</span>
        <span class="token property">font-size</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-引入资源-理解" tabindex="-1"><a class="header-anchor" href="#_2-4-引入资源-理解" aria-hidden="true">#</a> 2.4 引入资源（理解）</h3><p>当样式比较繁多的时候，我们可以针对不同的媒体使用不同 stylesheets（样式表）。原理，<strong>就是直接在 link 中判断设备的尺寸，然后引用不同的css文件</strong>。</p><h4 id="_2-4-1-语法规范" tabindex="-1"><a class="header-anchor" href="#_2-4-1-语法规范" aria-hidden="true">#</a> 2.4.1 语法规范</h4><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code>&lt;link rel=<span class="token string">&quot;stylesheet&quot;</span> media=<span class="token string">&quot;mediatype and|not|only (media feature)&quot;</span> href=<span class="token string">&quot;mystylesheet.css&quot;</span>&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>举例</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/* 当屏幕大于 640px，一行显示两个 */</span>
<span class="token comment">/* 小于 640px 的，一行显示一个 */</span>
&lt;link rel=<span class="token string">&quot;stylesheet&quot;</span> href=<span class="token string">&quot;style320.css&quot;</span> media=<span class="token string">&quot;screen and (min-width: 320px)&quot;</span>&gt;
&lt;link rel=<span class="token string">&quot;stylesheet&quot;</span> href=<span class="token string">&quot;style640.css&quot;</span> media=<span class="token string">&quot;screen and (min-width: 640px)&quot;</span>&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>[!TIP] 引入资源就是针对于不同的屏幕尺寸，调用不同的css文件</p></blockquote><h2 id="_3-less-基础" tabindex="-1"><a class="header-anchor" href="#_3-less-基础" aria-hidden="true">#</a> 3. Less 基础</h2><h3 id="_3-1-维护-css-的弊端" tabindex="-1"><a class="header-anchor" href="#_3-1-维护-css-的弊端" aria-hidden="true">#</a> 3.1 维护 CSS 的弊端</h3><p>CSS 是一门非程序式语言，没有变量、函数、SCOPE（作用域）等概念。</p><ul><li>CSS 需要书写大量看似没有逻辑的代码，CSS 冗余度是比较高的。</li><li>不方便维护及扩展，不利于复用。</li><li>CSS 没有很好的计算能力。</li><li>非前端开发工程师来讲，往往会因为缺少 CSS 编写经验而很难写出组织良好且易于维护的 CSS 代码项目。</li></ul><h3 id="_3-2-less-介绍" tabindex="-1"><a class="header-anchor" href="#_3-2-less-介绍" aria-hidden="true">#</a> 3.2 Less 介绍</h3><p>Less（Leaner Style Sheets的缩写）是一门 CSS 扩展语言，也称为 CSS 预处理器。</p><p>作为CSS的一种形式的扩展，它并没有减少 CSS 的功能，而是在现有的 CSS 语法上，为 CSS 加入程序式语言的特性。</p><p>它在CSS的语法基础之上，<strong>引入了变量，Mixin（混入），运算以及函数等功能，大大简化了CSS的编写，并且降低了CSS的维护成本</strong>，就像它的名称所说的那样，Less可以让我们用更少的代码做更多的事情。</p>`,41),w={href:"http://lesscss.cn",target:"_blank",rel:"noopener noreferrer"},y=n("br",null,null,-1),S=e(`<p>实质：<strong>Less是一门 CSS 预处理语言，它扩展了 CSS 的动态特性。</strong></p><h3 id="_3-3-less-使用" tabindex="-1"><a class="header-anchor" href="#_3-3-less-使用" aria-hidden="true">#</a> 3.3 Less 使用</h3><p>我们首先新建一个后缀名为less的文件，在这个less文件里面书写less语句。现阶段学习：</p><ul><li>Less变量</li><li>Less编译</li><li>Less嵌套</li><li>Less运算</li></ul><h3 id="_3-4-less-变量" tabindex="-1"><a class="header-anchor" href="#_3-4-less-变量" aria-hidden="true">#</a> 3.4 Less 变量</h3><p>变量是指没有固定的值，CSS 中一些颜色和数值经常使用。</p><div class="language-less line-numbers-mode" data-ext="less"><pre class="language-less"><code>@变量名<span class="token punctuation">:</span>值<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>举例</p><div class="language-less line-numbers-mode" data-ext="less"><pre class="language-less"><code><span class="token comment">// 定义一个粉色变量</span>
<span class="token variable">@color<span class="token punctuation">:</span></span> pink<span class="token punctuation">;</span>
<span class="token variable">@font14<span class="token punctuation">:</span></span> 14px<span class="token punctuation">;</span>
<span class="token selector">body</span> <span class="token punctuation">{</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token variable">@color</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">div</span> <span class="token punctuation">{</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token variable">@color</span><span class="token punctuation">;</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token variable">@font14</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-4-1-变量命名规范" tabindex="-1"><a class="header-anchor" href="#_3-4-1-变量命名规范" aria-hidden="true">#</a> 3.4.1 变量命名规范</h4><ul><li>必须有 <code>@</code> 前缀</li><li>不能包含特殊字符</li><li>不能以数字开头（除去前缀 <code>@</code> 的部分）</li><li>大小写敏感</li></ul><h3 id="_3-5-less-编译" tabindex="-1"><a class="header-anchor" href="#_3-5-less-编译" aria-hidden="true">#</a> 3.5 Less 编译</h3><p>本质上，Less包含一套自定义的语法及一个解析器，用户根据这些语法定义自己的样式规则，这些规则最终会通过解析器，编译生成对应的CSS文件。</p><p>所以，我们需要把我们的less文件，编译生成为css文件，这样我们的html页面才能使用。</p><p>在 VS Code 中，<strong>使用 Easy Less 插件</strong> 可以即时编译生成 CSS 文件，再引入即可。</p><h3 id="_3-6-less-嵌套" tabindex="-1"><a class="header-anchor" href="#_3-6-less-嵌套" aria-hidden="true">#</a> 3.6 Less 嵌套</h3><p>类似于html元素之间的嵌套，Less 里也可以把选择器嵌套。</p><div class="language-less line-numbers-mode" data-ext="less"><pre class="language-less"><code><span class="token selector">#header</span> <span class="token punctuation">{</span>
    <span class="token selector">.logo</span> <span class="token punctuation">{</span>
        <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>等同于：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">#header .logo</span> <span class="token punctuation">{</span>
     <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-6-1-less-中伪类、交集选择器、伪元素选择器的写法" tabindex="-1"><a class="header-anchor" href="#_3-6-1-less-中伪类、交集选择器、伪元素选择器的写法" aria-hidden="true">#</a> 3.6.1 Less 中伪类、交集选择器、伪元素选择器的写法</h4><p>要在 less 中写伪类、交集选择器、伪元素选择器，则要在内层选择器的前面加上 <code>&amp;</code>。</p><ul><li>内层选择器前面没有 <code>&amp;</code>，则它被解析为父选择器的后代；</li><li>若有 <code>&amp;</code>，则被解析为父元素自身或父元素的伪类。</li></ul><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">a:hover</span> <span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Less嵌套写法：</p><div class="language-less line-numbers-mode" data-ext="less"><pre class="language-less"><code><span class="token selector">a</span> <span class="token punctuation">{</span>
    <span class="token selector">&amp;:hover</span> <span class="token punctuation">{</span>
        <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-7-less-运算-⚡" tabindex="-1"><a class="header-anchor" href="#_3-7-less-运算-⚡" aria-hidden="true">#</a> 3.7 Less 运算 ⚡</h3><p>任何数字、颜色或者变量都可以参与运算，Less 提供了加（<code>+</code>）、减（<code>-</code>）、乘（<code>*</code>）、除（<code>/</code>）算数运算。</p><h4 id="_3-7-1-注意" tabindex="-1"><a class="header-anchor" href="#_3-7-1-注意" aria-hidden="true">#</a> 3.7.1 注意</h4><ul><li>对于除法运算，需要用圆括号括起来</li><li>运算符的作用左右两侧要有空格</li><li>运算数若只有一个带有单位，则最后结果以此为单位</li><li>若有多个单位，则以第一个单位为准</li></ul><h2 id="_4-rem-适配方案" tabindex="-1"><a class="header-anchor" href="#_4-rem-适配方案" aria-hidden="true">#</a> 4. rem 适配方案</h2><h3 id="_4-1-rem-适配方案" tabindex="-1"><a class="header-anchor" href="#_4-1-rem-适配方案" aria-hidden="true">#</a> 4.1 rem 适配方案</h3><ol><li>让一些不能等比自适应的元素，达到当设备尺寸发生改变的时候，等比例适配当前设备。</li><li>使用媒体查询根据不同设备按比例设置html的字体大小，然后页面元素使用rem做尺寸单位，当html字体大小变化元素尺寸也会发生变化，从而达到等比缩放的适配。</li></ol><h3 id="_4-2-rem-实际开发适配方案" tabindex="-1"><a class="header-anchor" href="#_4-2-rem-实际开发适配方案" aria-hidden="true">#</a> 4.2 rem 实际开发适配方案</h3><ol><li>按照设计稿与设备宽度的比例，动态计算并设置html根标签的font-size大小;（媒体查询）</li><li>CSS中，设计稿元素的宽、高、相对位置等取值，按照同等比例换算为rem为单位的值。</li></ol><h3 id="_4-3-rem-适配方案技术使用-市场主流" tabindex="-1"><a class="header-anchor" href="#_4-3-rem-适配方案技术使用-市场主流" aria-hidden="true">#</a> 4.3 rem 适配方案技术使用（市场主流）</h3><h4 id="_4-3-1-方案1" tabindex="-1"><a class="header-anchor" href="#_4-3-1-方案1" aria-hidden="true">#</a> 4.3.1 方案1</h4><ul><li>less</li><li>媒体查询</li><li>rem</li></ul><h4 id="_4-3-2-方案2-推荐" tabindex="-1"><a class="header-anchor" href="#_4-3-2-方案2-推荐" aria-hidden="true">#</a> 4.3.2 方案2（推荐）</h4><ul><li>flexible.js</li><li>rem</li></ul><blockquote><p>[!TIP] 两种方案都存在，方案2更简单，目前不需要了解里面的代码。</p></blockquote><h3 id="_4-4-rem-实际开发适配方案1" tabindex="-1"><a class="header-anchor" href="#_4-4-rem-实际开发适配方案1" aria-hidden="true">#</a> 4.4 rem 实际开发适配方案1</h3><p>rem + 媒体查询 + less技术</p><h4 id="_4-4-1-设计稿常见尺寸宽度" tabindex="-1"><a class="header-anchor" href="#_4-4-1-设计稿常见尺寸宽度" aria-hidden="true">#</a> 4.4.1 设计稿常见尺寸宽度</h4><table><thead><tr><th>设备</th><th>常见宽度</th></tr></thead><tbody><tr><td>iphone45</td><td>640px</td></tr><tr><td><strong>iphone678</strong></td><td><strong>750px</strong></td></tr><tr><td>Android</td><td>常见320px、360px、375px、384px、400px、720px。<strong>大部分4.7~5寸的安卓设备为720px</strong></td></tr></tbody></table><blockquote><p>[!TIP] 一般情况下，我们以一套或两套效果图适应大部分的屏幕，放弃极端屏或对其优雅降级，牺牲一些效果 <strong>现在基本以750为准</strong>。</p></blockquote><h4 id="_4-4-2-动态设置-html-标签-font-size-大小" tabindex="-1"><a class="header-anchor" href="#_4-4-2-动态设置-html-标签-font-size-大小" aria-hidden="true">#</a> 4.4.2 动态设置 html 标签 font-size 大小</h4><ol><li>假设设计稿是750px</li><li><strong>假设我们把整个屏幕划分为15等份（划分标准不一可以是20份也可以是10等份）</strong></li><li>每一份作为 html 字体大小，这里就是 50px</li><li>那么在 320px 设备的时候，字体大小为 320/15 就是 21.33px</li><li>用我们页面元素的大小除以不同的 html 字体大小会发现他们比例还是相同的</li><li>比如我们以 750 为标准设计稿</li><li>一个 100*100像素 的页面元素在750屏幕下，就是 100/50 转换为 rem 是 2rem * 2rem 比例是 1 比 1</li><li>320 屏幕下，html 字体大小为 21.33 则 2rem = 42.66px，此时宽和高都是42.66但是宽和高的比例还是 1 比 1</li><li>但是已经能实现不同屏幕下页面光素盒子等比例缩放的效果</li></ol><h5 id="具体步骤" tabindex="-1"><a class="header-anchor" href="#具体步骤" aria-hidden="true">#</a> 具体步骤</h5><ol><li>首先选一套标准尺寸，例如以 750 为准</li><li>用 <strong>屏幕尺寸</strong> 除以 <strong>划分的份数</strong>，得到 html 里面的文字尺寸大小。此时我们知道，不同屏幕下得到的文字大小是不一样的。</li><li><strong>页面元素的 rem 值</strong> = <strong>页面元素在750像素下的px值</strong> / <strong>html里面的文字大小</strong></li></ol><h3 id="_4-4-rem-实际开发适配方案2" tabindex="-1"><a class="header-anchor" href="#_4-4-rem-实际开发适配方案2" aria-hidden="true">#</a> 4.4 rem 实际开发适配方案2</h3><h2 id="_5-使用适配方案1制作苏宁移动端首页" tabindex="-1"><a class="header-anchor" href="#_5-使用适配方案1制作苏宁移动端首页" aria-hidden="true">#</a> 5. 使用适配方案1制作苏宁移动端首页</h2><h3 id="_5-1-技术选型-1" tabindex="-1"><a class="header-anchor" href="#_5-1-技术选型-1" aria-hidden="true">#</a> 5.1 技术选型</h3><ul><li>方案：单独制作移动页面方案</li><li>技术：布局采用 <code>rem</code> 适配布局（less + rem + 媒体查询）</li><li>设计图：设计图采用 750px 设计尺寸</li></ul><h3 id="_5-2-项目结构" tabindex="-1"><a class="header-anchor" href="#_5-2-项目结构" aria-hidden="true">#</a> 5.2 项目结构</h3><ul><li>css</li><li>images</li><li>upload</li><li>index.css</li></ul><h3 id="_5-3-设置视口标签以及引入初始化样式" tabindex="-1"><a class="header-anchor" href="#_5-3-设置视口标签以及引入初始化样式" aria-hidden="true">#</a> 5.3 设置视口标签以及引入初始化样式</h3><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0, user-scalable=no, maximum-scale=1.0, minimum-sacle=1.0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylesheet<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>css/normalize.css<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-4-设置公共common-less文件" tabindex="-1"><a class="header-anchor" href="#_5-4-设置公共common-less文件" aria-hidden="true">#</a> 5.4 设置公共common.less文件</h3><ol><li>新建common.less设置好最常见的屏幕尺寸，利用媒体查询设置不同的html字体大小 ，因为除了首页其他页面也需要</li><li>我们关心的尺寸有320px、360px、375px、384px、400px、414p、424px、480px、540px、720px、750px</li><li>划分的份数我们定为15等份</li><li>因为我们pc端也可以打开我们苏宁移动端首页，我们默认html字体大小为50px，<strong>注意这句话写到最上面</strong></li></ol><div class="language-less line-numbers-mode" data-ext="less"><pre class="language-less"><code><span class="token comment">// 设置常见屏幕尺寸修改  html 文字大小</span>
<span class="token comment">// PC屏幕下：</span>
<span class="token selector">html</span> <span class="token punctuation">{</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 划分份数：15</span>
<span class="token comment">// 适配屏幕：320px、360px、375px、384px、400px、414p、424px、480px、540px、720px、750px</span>
<span class="token variable">@num<span class="token punctuation">:</span></span> 15<span class="token punctuation">;</span>
<span class="token comment">// 320</span>
<span class="token atrule">@media screen and <span class="token punctuation">(</span>min-width<span class="token punctuation">:</span> 320px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
    <span class="token selector">html</span> <span class="token punctuation">{</span>
        <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>320px <span class="token operator">/</span> <span class="token variable">@num</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 360</span>
<span class="token atrule">@media screen and <span class="token punctuation">(</span>min-width<span class="token punctuation">:</span> 360px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
    <span class="token selector">html</span> <span class="token punctuation">{</span>
        <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>360px <span class="token operator">/</span> <span class="token variable">@num</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-5-新建-index-less-文件" tabindex="-1"><a class="header-anchor" href="#_5-5-新建-index-less-文件" aria-hidden="true">#</a> 5.5 新建 index.less 文件</h3><ol><li>新建 index.less，写首页样式</li><li>将刚才设置好的 common.less 引入到 index.less 里面，语法如下：</li></ol><div class="language-less line-numbers-mode" data-ext="less"><pre class="language-less"><code><span class="token comment">// 在 index.less 中导入 common.less</span>
<span class="token variable">@import</span> <span class="token string">&quot;common&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-rem-适配方案2" tabindex="-1"><a class="header-anchor" href="#_6-rem-适配方案2" aria-hidden="true">#</a> 6. rem 适配方案2</h2><h3 id="_6-1-简洁高效的-rem-适配方案-flexible-js" tabindex="-1"><a class="header-anchor" href="#_6-1-简洁高效的-rem-适配方案-flexible-js" aria-hidden="true">#</a> 6.1 简洁高效的 rem 适配方案 flexible.js</h3><blockquote><p>[!TIP] 技术方案1（less+媒体查询+rem）效果很好，但是过于繁琐。因此介绍第二种 rem 方案。</p></blockquote><p>手机淘宝团队出的简洁高效移动端适配库。<br> 我们再也 <strong>不需要在写不同屏幕的媒体查询</strong>，因为里面js做了处理。<br> 它的原理是把 <strong>当前设备划分为10等份</strong>，但是不同设备下，比例还是一致的。<br> 我们要做的，<strong>就是确定好我们当前设备的html文字大小就可以了</strong>。<br> 比如当前设计稿是750px，那么我们只需要把html文字大小设置为75px(750px/10)就可以里面页面元素rem值：页面元素的px值/ 75。 剩余的，<strong>让flexible.js来去算</strong>。</p>`,68),C={href:"https://github.com/amfe/lib-flexible",target:"_blank",rel:"noopener noreferrer"},z=e(`<h3 id="_6-2-使用适配方案2制作苏宁移动端首页" tabindex="-1"><a class="header-anchor" href="#_6-2-使用适配方案2制作苏宁移动端首页" aria-hidden="true">#</a> 6.2 使用适配方案2制作苏宁移动端首页</h3><ul><li>方案：我们采取单独制作移动页面方案</li><li>技术：布局采取rem适配布局2（flexible.js + rem）</li><li>设计图：本设计图采用 750px 设计尺寸</li></ul><h4 id="_6-2-1-前期准备" tabindex="-1"><a class="header-anchor" href="#_6-2-1-前期准备" aria-hidden="true">#</a> 6.2.1 前期准备</h4><p>引入 normalize.css 和 flexible.js，将相关文件和文件夹创建好。</p><h4 id="_6-2-2-vscode-cssrem-插件" tabindex="-1"><a class="header-anchor" href="#_6-2-2-vscode-cssrem-插件" aria-hidden="true">#</a> 6.2.2 vscode cssrem 插件</h4><p>自动将 <code>px</code> 单位转换成 <code>rem</code> 的插件。<strong>需要手动设置cssroot字体大小为75</strong></p><h4 id="_6-2-3-注意" tabindex="-1"><a class="header-anchor" href="#_6-2-3-注意" aria-hidden="true">#</a> 6.2.3 注意</h4><p>flexible.js 按照屏幕尺寸修改 html 的 <code>font-size</code> 大小，当处于PC端口时，宽度会过大。需要额外设置一个媒体查询：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/* search-content */</span>
<span class="token comment">/* 若设备屏幕超过 750px，则按照 750设计稿布局 */</span>
<span class="token atrule"><span class="token rule">@media</span> screen  <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 750px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
    <span class="token selector">html</span> <span class="token punctuation">{</span>
        <span class="token property">font-size</span><span class="token punctuation">:</span> 75px <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1-响应式开发" tabindex="-1"><a class="header-anchor" href="#_1-响应式开发" aria-hidden="true">#</a> 1. 响应式开发</h2><h3 id="_1-1-响应式开发原理" tabindex="-1"><a class="header-anchor" href="#_1-1-响应式开发原理" aria-hidden="true">#</a> 1.1 响应式开发原理</h3><p>就是使用媒体查询针对不同宽度的设备进行布局和样式的设置，从而适配不同设备的目的。</p><table><thead><tr><th>设备划分</th><th>尺寸区间</th></tr></thead><tbody><tr><td>超小屏幕（手机）</td><td><code>w &lt; 768px</code></td></tr><tr><td>小屏设备（平板）</td><td><code>768px &lt;= w &lt; 992px</code></td></tr><tr><td>中等屏幕（桌面显示器）</td><td><code>992px &lt;= w &lt; 1200px</code></td></tr><tr><td>宽屏设备（大桌面显示器）</td><td><code>w &gt;= 1200px</code></td></tr></tbody></table><h3 id="_1-2-响应式布局容器" tabindex="-1"><a class="header-anchor" href="#_1-2-响应式布局容器" aria-hidden="true">#</a> 1.2 响应式布局容器</h3><p>响应式 <strong>需要一个父级作为布局容器，来配合子级元素来实现变化效果。</strong></p><p>原理就是在不同屏幕下，通过媒体查询来改变这个布局容器的大小，再改变里面子元素的排列方式和大小，从而实现不同屏幕下，看到不同的页面布局和样式变化。</p><p>平时我们的响应式尺寸划分（但是我们也可以根据实际情况自己定义划分）：</p><ul><li>超小屏幕（手机，小于768px）：设置宽度为 <code>100%</code></li><li>小屏幕（平板，大于等于768px）：设置宽度为 <code>750px</code></li><li>中等屏幕（桌面显示器，大于等于992px）：宽度设置为 <code>970px</code></li><li>大屏幕（大桌面显示器，大于等于1200px）：宽度设置为 <code>1170px</code></li></ul><p>代码实现：<br> HTML部分：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 布局容器 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>CSS部分：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.container</span> <span class="token punctuation">{</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>
    <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/* 超小屏幕 小于 768 布局容器宽度为 100% */</span>
<span class="token atrule"><span class="token rule">@media</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 767px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
    <span class="token selector">.container</span> <span class="token punctuation">{</span>
        <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">/* 小屏幕 大于等于 768，布局容器 750px */</span>
<span class="token atrule"><span class="token rule">@media</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 768px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
    <span class="token selector">.container</span> <span class="token punctuation">{</span>
        <span class="token property">width</span><span class="token punctuation">:</span> 750px<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">/* 中等屏幕 */</span>
<span class="token atrule"><span class="token rule">@media</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 992px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
    <span class="token selector">.container</span> <span class="token punctuation">{</span>
        <span class="token property">min-width</span><span class="token punctuation">:</span> 970px<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">/* // 大屏幕 */</span>
<span class="token atrule"><span class="token rule">@media</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 1200px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
    <span class="token selector">.container</span> <span class="token punctuation">{</span>
        <span class="token property">width</span><span class="token punctuation">:</span> 1170px<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-案例-响应式导航" tabindex="-1"><a class="header-anchor" href="#_1-3-案例-响应式导航" aria-hidden="true">#</a> 1.3 案例：响应式导航</h3><ul><li>当我们屏幕大于等于 800 像素，我们给 <code>nav</code> 宽度为 800px，因为里面子盒子需要浮动，所以 <code>nav</code> 需要清除浮动。</li><li><code>nav</code> 里面包含 8 个小 <code>li</code> 盒子，每个盒子的宽度定为 100px，高度为30px，浮动一行显示。</li><li>当我们屏幕缩放，宽度小于 800 像素的时候，<code>nav</code> 盒子宽度修改为 100% 宽度。</li><li><code>nav</code> 里面的8个小 <code>li</code>，宽度修改为 33.33%，这样一行就只能显示 3 个小 <code>li</code> ，剩余下行显示。</li></ul><p>代码： HTML部分:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>导航栏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>导航栏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>导航栏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>导航栏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>导航栏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>导航栏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>导航栏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>导航栏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>CSS部分：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">*</span> <span class="token punctuation">{</span>
    <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
    <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">ul</span> <span class="token punctuation">{</span>
    <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.container</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 750px<span class="token punctuation">;</span>
    <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.container ul li</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 93.75px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>
    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token atrule"><span class="token rule">@media</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 767px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
    <span class="token selector">.container</span> <span class="token punctuation">{</span>
        <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token selector">.container ul li</span> <span class="token punctuation">{</span>
        <span class="token property">width</span><span class="token punctuation">:</span> 33.33%<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-bootstrap-前端开发框架" tabindex="-1"><a class="header-anchor" href="#_2-bootstrap-前端开发框架" aria-hidden="true">#</a> 2. Bootstrap 前端开发框架</h2><h3 id="_2-1-bootstrap-简介" tabindex="-1"><a class="header-anchor" href="#_2-1-bootstrap-简介" aria-hidden="true">#</a> 2.1 Bootstrap 简介</h3><p>Bootstrap 来自 Twitter（推特），是目前最受欢迎的前端框架。Bootstrap 是基于HTML、CSS 和JAVASCRIPT 的，它简洁灵活，使得Web 开发更加快捷。</p>`,31),j={href:"http://www.bootcss.com/",target:"_blank",rel:"noopener noreferrer"},P={href:"http://getbootstrap.com/",target:"_blank",rel:"noopener noreferrer"},L=e(`<p>框架：顾名思义就是一套架构，它有一套比较完整的网页功能解决方案，而且控制权在框架本身，有预制样式库、组件和插件。使用者要按照框架所规定的某种规范进行开发。</p><p>Bootstrap 优点：</p><ul><li>标准化的 html+css 编码规范</li><li>提供了一套简洁、直观、强悍的组件</li><li>有自己的生态圈，不断的更新迭代</li><li>让开发更简单，提高了开发的效率</li></ul><h3 id="_2-2-bootstrap-使用" tabindex="-1"><a class="header-anchor" href="#_2-2-bootstrap-使用" aria-hidden="true">#</a> 2.2 Bootstrap 使用</h3><p>在现阶段我们还没有接触JS相关课程，所以我们只考虑使用它的样式库。 控制权在框架本身，使用者要按照框架所规定的某种规范进行开发。 Bootstrap 使用四步曲：</p><ul><li>创建文件夹结构</li><li>创建 html 骨架结构</li><li>引入相关样式文件</li><li>书写内容</li></ul><ol><li>创建文件夹结构<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>bootstrap
  -css
  -fonts
  -js
css
images
index.html
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>HTML 骨架结构<div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!--要求当前网页使用IE浏览器最高版本的内核来渲染--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>X-UA-Compatible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>IE=edge<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!--视口的设置：视口的宽度和设备一致，默认的缩放比例和PC端一致，用户不能自行缩放--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1, user-scalable=0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!--[if</span> <span class="token attr-name">lt</span> <span class="token attr-name">IE</span> <span class="token attr-name">9]</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 解决ie9以下浏览器对html5新增标签的不识别，并导致CSS不起作用的问题 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!--解决ie9以下浏览器对css3 Media Query 的不识别--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://oss.maxcdn.com/respond/1.4.2/respond.min.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>![endif]--</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>引入相关样式文件<div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- Bootstrap 核心样式--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylesheet<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bootstrap/css/bootstrap.min.css<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li>书写内容 <ul><li>直接拿 Bootstrap 预先定义好的样式来使用</li><li>修改 Bootstrap 原来的样式，注意权重问题</li><li>学好 Bootstrap 的关键在于知道它定义了哪些样式，以及这些样式能实现什么样的效果</li></ul></li></ol><h3 id="_2-3-布局容器" tabindex="-1"><a class="header-anchor" href="#_2-3-布局容器" aria-hidden="true">#</a> 2.3 布局容器</h3><p>Bootstrap 需要为页面内容和栅格系统包裹一个 <code>.container</code> 容器，它提供了两个作此用处的类。</p><ol><li><code>container</code> 类 <ul><li>响应式布局的容器固定宽度</li><li>大屏( &gt;=1200px) 宽度定为1170px</li><li>中屏( &gt;=992px) 宽度定为970px</li><li>小屏( &gt;=768px) 宽度定为750px</li><li>超小屏(100%)</li></ul></li><li><code>container-fluid</code> 类 <ul><li>流式布局容器百分百宽度</li><li>占据全部视口（viewport）的容器。</li></ul></li></ol><h2 id="_3-bootstrap-栅格系统" tabindex="-1"><a class="header-anchor" href="#_3-bootstrap-栅格系统" aria-hidden="true">#</a> 3. Bootstrap 栅格系统</h2><h3 id="_3-1-栅格系统简介" tabindex="-1"><a class="header-anchor" href="#_3-1-栅格系统简介" aria-hidden="true">#</a> 3.1 栅格系统简介</h3><p>栅格系统英文为 “grid systems”，也有人翻译为 “网格系统”，它是指将页面布局划分为等宽的列，然后通过列数的定义来模块化页面布局。</p><p>Bootstrap 提供了一套响应式、移动设备优先的流式栅格系统，随着屏幕或视口（viewport）尺寸的增加，系统会自动分为最多12列。</p><h3 id="_3-2-栅格选型参数" tabindex="-1"><a class="header-anchor" href="#_3-2-栅格选型参数" aria-hidden="true">#</a> 3.2 栅格选型参数</h3><p>栅格系统用于通过一系列的行（row）与列（column）的组合来创建页面布局，你的内容就可以放入这些创建好的布局中。 <img src="https://cdn.jsdelivr.net/gh/Hacker-C/Picture-Bed@main/JavaScript/bootstrap1.1m7bvtbk5nb4.png" alt="bootstrap1" loading="lazy"></p><ul><li>按照不同屏幕划分为 1~12 等份</li><li>行（row）可以去除父容器作用15px的边距</li><li>xs-extra small：超小；sm-small：小；md-medium：中等；lg-large：大；</li><li>列（column）大于12，多余的 “列（column）”所在的元素将被作为一个整体另起一行排列</li><li>每一列默认有左右15像素的 <code>padding</code></li><li>可以同时为一列指定多个设备的类名，以便划分不同份数例如 <code>class=&quot;col-md-4 col-sm-6&quot;</code></li></ul><p>例如，<code>col-lg-3 col-md-4 col-sm-6 col-xm-12</code> 表示随着屏幕尺寸的缩小，每一行能放的盒子变为 4、3、2、1。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 有12个，则可以占满一行 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>row<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>col-lg-3 col-md-4 col-sm-6 col-xm-12<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>col-lg-3 col-md-4 col-sm-6 col-xm-12<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>col-lg-3 col-md-4 col-sm-6 col-xm-12<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>col-lg-3 col-md-4 col-sm-6 col-xm-12<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 有12个，则可以占满一行，不同份数表示了所占比例 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>row<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>col-lg-1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>col-lg-2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>col-lg-3<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>col-lg-6<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 不足12个，则空出多余 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>row<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>col-lg-3<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>col-lg-3<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>col-lg-3<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>col-lg-2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 超出12个，则放到下一行 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>row<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>col-lg-3<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>col-lg-3<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>col-lg-3<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>col-lg-4<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上代码布局效果如下： <img src="https://cdn.jsdelivr.net/gh/Hacker-C/Picture-Bed@main/JavaScript/bootstrap2.4p4qg771eju0.png" alt="bootstrap2" loading="lazy"></p><h3 id="_3-3-列嵌套" tabindex="-1"><a class="header-anchor" href="#_3-3-列嵌套" aria-hidden="true">#</a> 3.3 列嵌套</h3><p>栅格系统内置的栅格系统将内容再次嵌套。简单理解就是一个列内再分成若干份小列。我们可以通过添加一个新的 <code>.row</code> 元素和一系列 <code>.col-sm-*</code> 元素到已经存在的 <code>.col-sm-*</code> 元素内。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>row<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>col-md-4<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>row<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>col-md-6<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>第一小列<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>col-md-6<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>第二小列<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>col-md-4<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>第二列<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>col-md-4<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>第三列<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>布局效果如下： <img src="https://cdn.jsdelivr.net/gh/Hacker-C/Picture-Bed@main/docs/bootstrap3.6h721zqvizg0.png" alt="bootstrap3" loading="lazy"></p><h3 id="_3-4-列偏移" tabindex="-1"><a class="header-anchor" href="#_3-4-列偏移" aria-hidden="true">#</a> 3.4 列偏移</h3><p>使用 <code>.col-md-offset-*</code> 类可以将列向右侧偏移。这些类实际是通过使用 <code>*</code> 选择器为当前元素增加了左侧的边距（margin）。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>row<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>col-md-4<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>col-md-4 col-md-offset-4<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>row<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>col-md-8 col-md-offset-2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>布局效果如下： <img src="https://cdn.jsdelivr.net/gh/Hacker-C/Picture-Bed@main/docs/bootstrap4.6be7qk9e7a00.png" alt="bootstrap4" loading="lazy"></p><h3 id="_3-5-列排序" tabindex="-1"><a class="header-anchor" href="#_3-5-列排序" aria-hidden="true">#</a> 3.5 列排序</h3><p>通过使用 <code>.col-md-push-*</code> 和 <code>.col-md-pull-*</code> 类就可以很容易的改变列（<code>column</code>）的顺序。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>row<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>col-md-4<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>左侧盒子<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>col-md-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>右侧盒子<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>row<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>col-md-4 col-md-push-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>左侧盒子<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>col-md-8 col-md-pull-4<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>右侧盒子<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>布局效果如下： <img src="https://cdn.jsdelivr.net/gh/Hacker-C/Picture-Bed@main/docs/bootstrap5.5cko3xntd2c0.png" alt="bootstrap5" loading="lazy"></p><h3 id="_3-6-响应式工具" tabindex="-1"><a class="header-anchor" href="#_3-6-响应式工具" aria-hidden="true">#</a> 3.6 响应式工具</h3><p>为了加快对移动设备友好的页面开发工作，利用媒体查询功能，并使用这些工具类可以方便的针对不同设备展示 或隐藏页面内容。除了有 <code>.hidden-xm</code> 等响应式隐藏工具类外，还有 <code>.visible-xm</code> 等响应式显示工具类，当屏幕处于超小屏幕（手机）时显示。</p><p><img src="https://cdn.jsdelivr.net/gh/Hacker-C/Picture-Bed@main/docs/bootstrap6.shwuo5yaj4w.png" alt="bootstrap6" loading="lazy"></p><h2 id="_4-阿里百秀首页案例" tabindex="-1"><a class="header-anchor" href="#_4-阿里百秀首页案例" aria-hidden="true">#</a> 4. 阿里百秀首页案例</h2>`,36),B=n("li",null,"技术选型：HTML5/CSS3/Bootstrap3",-1),T={href:"https://github.com/Hacker-C/Alibaixiu",target:"_blank",rel:"noopener noreferrer"},H={href:"https://alibaixiu.vercel.app",target:"_blank",rel:"noopener noreferrer"};function I(E,F){const t=p("ExternalLinkIcon"),l=p("font");return c(),i("div",null,[r,n("blockquote",null,[n("p",null,[a("三星手机官网："),n("a",k,[a("www.samsung.com"),s(t)]),a("。")])]),h,n("p",null,[a("官网："),n("a",m,[a("https://necolas.github.io/normalize.css/"),s(t)])]),v,s(l,{color:"red",size:"4"},{default:d(()=>[a("传统 or CSS3盒子模型？")]),_:1}),g,n("ul",null,[n("li",null,[a("案例模板："),n("a",b,[a("https://m.jd.com/"),s(t)])]),n("li",null,[a("代码参考（本人）："),n("a",x,[a("https://www.aliyundrive.com/s/u8SmJQP1vjy"),s(t)])])]),_,n("blockquote",null,[n("p",null,[a("[!TIP] 携程首页代码以及图片资源: "),n("a",f,[a("https://www.aliyundrive.com/s/jKWLJVyshCe"),s(t)])])]),q,n("p",null,[a("Less中文网址: "),n("a",w,[a("http://lesscss.cn"),s(t)]),y,a(" 常见的CSS预处理器：Sass、Less、Stylus")]),S,n("p",null,[a("flexible.js 项目地址："),n("a",C,[a("https://github.com/amfe/lib-flexible"),s(t)])]),z,n("ul",null,[n("li",null,[a("中文官网："),n("a",j,[a("http://www.bootcss.com/"),s(t)])]),n("li",null,[a("官网："),n("a",P,[a("http://getbootstrap.com/"),s(t)])])]),L,n("ul",null,[B,n("li",null,[a("项目地址："),n("a",T,[a("https://github.com/Hacker-C/Alibaixiu"),s(t)])]),n("li",null,[a("域名访问："),n("a",H,[a("https://alibaixiu.vercel.app"),s(t)])])])])}const J=o(u,[["render",I],["__file","mobile.html.vue"]]);export{J as default};
