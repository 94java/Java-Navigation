import{_ as e}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as c,c as o,a as n,d as t,w as p,b as s,e as l,r as i}from"./app.401b812b.js";const u={},k=n("h1",{id:"并发",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#并发","aria-hidden":"true"},"#"),s(" 并发")],-1),d={class:"table-of-contents"},r=l(`<h2 id="一、基础知识" tabindex="-1"><a class="header-anchor" href="#一、基础知识" aria-hidden="true">#</a> 一、基础知识</h2><ul><li>多线程是指从软件或者硬件上实现多个线程并发执行的技术</li><li>具有多线程能力的计算机因有硬件支持而能够在同一时间执行多个线程，提升性能</li></ul><h3 id="_1、并发和并行" tabindex="-1"><a class="header-anchor" href="#_1、并发和并行" aria-hidden="true">#</a> 1、并发和并行</h3><ul><li>并行：在同一时刻，有多个指令在多个CPU上同时执行</li><li>并发：在同一时刻，有多个指令在单个CPU上交替执行</li></ul><h3 id="_2、进程和线程" tabindex="-1"><a class="header-anchor" href="#_2、进程和线程" aria-hidden="true">#</a> 2、进程和线程</h3><p>进程：就是操作系统中正在运行的一个应用程序</p><ul><li>独立性：进程是一个能独立运行的基本单位，同时也是系统分配资源和调度的独立单位</li><li>动态性：进程的实质是程序的一次执行过程，进程是动态产生，动态消亡的</li><li>并发性：任何进程都可以和其他进程一起并发执行</li></ul><p>线程：是进程中的单个顺序控制流，是一条执行路径</p><ul><li>单线程：一个进程如果只有一条执行路径，则称为单线程程序</li><li>多线程：一个进程如果有多条执行语句，则称为多线程程序</li></ul><h3 id="_3、实现方式" tabindex="-1"><a class="header-anchor" href="#_3、实现方式" aria-hidden="true">#</a> 3、实现方式</h3><h4 id="_3-1-继承thread类的方式进行实现" tabindex="-1"><a class="header-anchor" href="#_3-1-继承thread类的方式进行实现" aria-hidden="true">#</a> 3.1. 继承Thread类的方式进行实现</h4><ul><li><p>定义一个MyThread继承Thread类</p></li><li><p>在MyThread类中重写run()方法</p></li><li><p>创建MyThread类的对象</p></li><li><p>启动线程</p></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// MyThread类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> run<span class="token punctuation">{</span>
        <span class="token comment">// 代码就是线程在开启之后执行的代码</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;线程开启了&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 测试类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 创建两个线程对象</span>
        <span class="token class-name">MyThread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">MyThread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 开启一条线程</span>
        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 开启第二条线程</span>
        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>多线程程序，线程交替进行执行，是随机的，所以每次执行的结果可能都不一样</p></blockquote><p>run()方法和start()方法的区别</p><ul><li><p><code>run()</code>：封装线程执行的代码，直接调用，相当于普遍方法的调用，并没有开启线程</p></li><li><p><code>start()</code>：启动线程，然后由JVM调用此线程的run()方法</p></li></ul><h4 id="_3-2-实现runnable接口的方式进行实现" tabindex="-1"><a class="header-anchor" href="#_3-2-实现runnable接口的方式进行实现" aria-hidden="true">#</a> 3.2. 实现Runnable接口的方式进行实现</h4><ul><li>定义一个类MyRunnable实现Runnable接口</li><li>在MyRunnable类中重写run()方法</li><li>创建MyRunnable类的对象</li><li>创建Thread类的对象，把MyRunnable对象作为构造方法的参数</li><li>启动线程</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// MyRunnable类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 线程启动后执行的代码</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;线程开启了&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 测试类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 创建了一个参数的对象</span>
        <span class="token class-name">MyRunnable</span> mr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 创建了一个线程对象，并把参数传递给这个线程</span>
        <span class="token comment">// 在线程启动之后，执行的就是参数里面的run方法</span>
        <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>mr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token class-name">MyRunnable</span> mr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>mr2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-3-利用callable和future接口方式实现" tabindex="-1"><a class="header-anchor" href="#_3-3-利用callable和future接口方式实现" aria-hidden="true">#</a> 3.3. 利用Callable和Future接口方式实现</h4><ul><li>定义一个MyCallable实现Callable接口</li><li>在MyCallable类中重写call()方法</li><li>创建Mycallable类的对象</li><li>创建Future的实现类FutureTask对象，把Mycallable对象作为构造方法的参数</li><li>创建Thread类的对象，把FutureTask对象作为构造方法的参数</li><li>启动线程</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// MyCallable类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyCallable</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;线程启动了&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 返回值就表示线程运行完毕之后的结果</span>
        <span class="token keyword">return</span> <span class="token string">&quot;完成&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 测试类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 线程开启之后执行里面的call方法</span>
        <span class="token class-name">MyCallable</span> mc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyCallable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 可以获取线程执行完毕之后的结果，也可以作为参数传递给Thread对象</span>
        <span class="token class-name">FutureTack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> ft <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>mc<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 创建线程对象</span>
        <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>ft<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 开启线程</span>
        ft<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取线程执行完毕返回的结果</span>
        <span class="token class-name">String</span> s <span class="token operator">=</span> ft<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">// get方法不能在start方法前执行</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-4-三种方式的对比" tabindex="-1"><a class="header-anchor" href="#_3-4-三种方式的对比" aria-hidden="true">#</a> 3.4. 三种方式的对比</h4><table><thead><tr><th></th><th style="text-align:left;">优点</th><th>缺点</th></tr></thead><tbody><tr><td>实现Runnable、Callable接口</td><td style="text-align:left;">扩展性强，实现该接口的同时还可以继承其他的类</td><td>编程相对复杂，不能直接使用Thread类中的方法</td></tr><tr><td>继承Thread类</td><td style="text-align:left;">编程比较简单，可以直接使用Thread类中的方法</td><td>可扩展性较差，不能再继承其他的类</td></tr></tbody></table><h3 id="_4、线程类的常见方法" tabindex="-1"><a class="header-anchor" href="#_4、线程类的常见方法" aria-hidden="true">#</a> 4、线程类的常见方法</h3><p><strong>获取线程的名称</strong></p><ul><li><code>String getName()</code>：返回此线程的名称</li><li>如果不设置名称，默认Thread-数字</li></ul><p><strong>设置线程的名字</strong></p><ul><li><code>void setName(String name)</code>：将此线程的名称更改为等于参数name</li><li>通过构造方法也可以设置线程名称</li></ul><p><strong>获得当前线程对象</strong></p><ul><li><code>public static Thread currentThread()</code>：返回对当前正在执行的线程对象的引用</li></ul><p><strong>线程休眠</strong></p><ul><li><code>public static void sleep(long time)</code>：让线程休眠指定的时间，单位为毫秒</li></ul><h3 id="_5、线程调度" tabindex="-1"><a class="header-anchor" href="#_5、线程调度" aria-hidden="true">#</a> 5、线程调度</h3><p><strong>多线程的并发运行</strong></p><ul><li>计算机中的CPU，在任意时刻只能执行一条机器指令。每个线程只有获得CPU的使用权才能执行代码。 各个线程轮流获得CPU的使用权，分别执行各自的任务。</li></ul><p><strong>线程有两种调度模型</strong></p><ul><li>分时调度模型：所有线程轮流使用CPU的使用权，平均分配每个线程占用CPU的时间片</li><li>抢占式调度模型：优先让优先级高的线程使用CPU，如果线程的优先级相同，那么会随机选择一个，优先级高的线程获取的CPU时间片相对多一些</li><li>Java采用的是抢占式调度模型</li></ul><p><strong>线程的优先级</strong></p><ul><li><code>public final void setPriority(int Priority)</code>：设置线程的优先级,默认优先级为5,范围为[1,10]</li><li><code>public final int getPriority()</code>：获取线程的优先级</li></ul><h3 id="_6、后台线程-守护线程" tabindex="-1"><a class="header-anchor" href="#_6、后台线程-守护线程" aria-hidden="true">#</a> 6、后台线程/守护线程</h3><ul><li><p><code>public final void setDaemon(boolean on)</code>：设置为守护线程</p></li><li><p>当主要线程执行完毕之后，守护线程也没有继续执行下去的必要了</p><p>但守护线程不会在主线程执行完毕后立即停止，因为他还占有着CPU的 使用权，还会再执行一会</p></li></ul><h2 id="二、线程安全问题" tabindex="-1"><a class="header-anchor" href="#二、线程安全问题" aria-hidden="true">#</a> 二、线程安全问题</h2><h3 id="_1、卖票案例" tabindex="-1"><a class="header-anchor" href="#_1、卖票案例" aria-hidden="true">#</a> 1、卖票案例</h3><p>需求：某电影院目前正在上映国产大片，共有100张票，而它有3个窗口卖票，请设计一个程序模拟该电影院卖票</p><p><strong>思路</strong></p><p>定义一个类Ticket实现Runnable接口，里面定义一个成员变量：<code>private int ticketCount = 100;</code></p><p>在Ticket类中重写run()方法实现卖票，代码步骤如下</p><ul><li>判断票数大于0，就卖票，并告知是哪个窗口卖的</li><li>票数减一</li><li>卖光之后，线程停止</li></ul><p>定义一个测试类TicketDemo，里面有main方法，代码步骤如下</p><ul><li>创建Ticket类的对象</li><li>创建三个Thread类的对象，把Ticekt对象作为构造方法的参数，并给出对应的窗口名称</li><li>启动线程</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Ticket类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Ticket</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>
	<span class="token keyword">private</span> <span class="token keyword">int</span> ticket <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// TODO Auto-generated method stub</span>
		<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>ticket <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
				<span class="token comment">// 卖完了</span>
				<span class="token keyword">break</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
				ticket<span class="token operator">--</span><span class="token punctuation">;</span>
				<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;正在卖票，当前还剩余：&quot;</span> <span class="token operator">+</span> ticket <span class="token operator">+</span> <span class="token string">&quot;张票&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Demo类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token comment">// 为了多个线程共享一个类中的数据，所以只需要创建一个ticket对象</span>
        <span class="token class-name">Ticket</span> ticket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Ticket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		
		<span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>ticket<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>ticket<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">Thread</span> t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>ticket<span class="token punctuation">)</span><span class="token punctuation">;</span>
		
		t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;窗口1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		t2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;窗口2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		t3<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;窗口3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		t3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>卖票案例的思考</strong></p><p>在实际生活中，售票时出票也是需要时间的，所以在出售一张电影票的时候，需要一点时间的延迟，假定每次出票时间为100毫秒，可使用<code>sleep()</code>方法实现</p><p><strong>问题</strong></p><ul><li>相同的票出现了很多次</li><li>出现了负数票数</li></ul><p><strong>原因</strong>：在睡眠期间，其他线程抢占CPU使用权，因为都操作的是同一个数据，导致自减操作的时候出现负数</p><p><strong>卖票案例数据安全问题的解决</strong></p><p>为什么出现问题?（这也是判断多线程程序是否会有数据安全问题的标准）</p><ul><li>多线程操作共享数据</li></ul><p>如何解决多线程安全问题呢？</p><ul><li>基本思想：让程序没有安全问题的环境</li></ul><p>怎么实现呢？</p><ul><li>把多条语句操作共享数据的代码给锁起来，让任意时刻只能有一个线程执行即可</li><li>Java中提供了同步代码块的方式来解决</li></ul><h3 id="_2、同步代码块" tabindex="-1"><a class="header-anchor" href="#_2、同步代码块" aria-hidden="true">#</a> 2、同步代码块</h3><blockquote><p>锁多条语句操作共享数据，可以使用同步代码块来实现</p></blockquote><p><strong>格式</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">synchronized</span><span class="token punctuation">(</span>任意对象<span class="token punctuation">)</span><span class="token punctuation">{</span>			<span class="token comment">// 锁的对象一定要是唯一的</span>
    多条语句操作共享数据的代码
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>锁默认情况是打开的，只要有一个线程进去执行代码了，锁就会关闭</p></li><li><p>当线程执行完毕出来了，锁才会自动打开</p></li></ul><p><strong>同步的好处和弊端</strong></p><ul><li>好处：解决了多线程的数据安全问题</li><li>弊端：当线程很多的时候，因为每个线程都会去判断同步上的锁，这是很耗费资源的，无形中会降低程序的运行效率</li></ul><h3 id="_3、同步方法" tabindex="-1"><a class="header-anchor" href="#_3、同步方法" aria-hidden="true">#</a> 3、同步方法</h3><ul><li>同步方法：就是把synchronized关键字加到方法前</li><li>格式：<code>修饰符 synchronized 返回值类型 方法名(方法参数){ }</code></li></ul><p><strong>同步代码块和同步方法的区别</strong></p><ul><li><p>同步代码块可以锁住指定代码，同步方法是锁住方法中的所有代码</p></li><li><p>同步代码块可以指定锁对象，同步方法不能指定锁对象</p></li><li><p>同步方法的锁对象为：<code>this</code></p><p>同步静态方法的锁对象为：<code>类名.class</code>（表示字节码文件的对象）</p></li></ul><h3 id="_4、lock锁" tabindex="-1"><a class="header-anchor" href="#_4、lock锁" aria-hidden="true">#</a> 4、Lock锁</h3><ul><li><p>虽然可以理解同步代码块和同步方法的锁对象问题，但是并没有直接看到在哪里加上了锁，在哪里释放了锁，为了更清晰的表达如何加锁和释放锁，JDK5以后提供了一个新的锁对象Lock</p><p>Lock实现提供比使用synchronized方法和语句可以获得更广泛的锁定操作</p></li></ul><p><strong>Lock中提供了获得锁和释放锁的方法</strong></p><ul><li><code>void lock()</code>：获得锁</li><li><code>void unlock()</code>：释放锁</li></ul><p>Lock是接口不能直接实例化，要采用它的实现类<code>ReentrantLock</code></p><ul><li>ReentrantLock的构造方法：<code>ReentrantLock()</code></li></ul><h3 id="_5、死锁" tabindex="-1"><a class="header-anchor" href="#_5、死锁" aria-hidden="true">#</a> 5、死锁</h3><ul><li>线程死锁是指由于两个或者多个线程互相持有对方所需要的资源，导致这些线程处于等待状态，无法前往执行</li><li>解决方法：不要写锁的嵌套即可</li></ul><h2 id="三、生产者和消费者" tabindex="-1"><a class="header-anchor" href="#三、生产者和消费者" aria-hidden="true">#</a> 三、生产者和消费者</h2><blockquote><p>生产者消费者模式是一种十分经典的多线程协作的模式，弄懂生产者消费者问题能够让我们对多线程编程的理解更加深刻</p></blockquote><p>等待和唤醒的方法</p><blockquote><p>为了体现生产和消费过程中的等待和唤醒，Java提供了几个方法供我们使用，这几个方法在Object类中</p></blockquote><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>void wait()</td><td>导致当前线程等待，直到另一个线程调用该对象的notify()方法或notifyAll()方法</td></tr><tr><td>void notify()</td><td>唤醒正在等待对象监视器的单个线程</td></tr><tr><td>void notifyAll()</td><td>唤醒正在等待对象监视器的所有线程</td></tr></tbody></table><p><strong>代码实现</strong></p><ul><li>while(true)死循环</li><li>synchronized 锁，锁对象要唯一</li><li>判断，共享数据是否结束</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">/*消费者步骤：
1.判断桌子上是否有汉堡包
2.如果没有就等待
3.如果有就开吃
4.吃完之后，桌子上的汉堡包就没有了
	叫醒等待的生产者继续生产
汉堡包的总数量减一*/</span>

<span class="token comment">/*生产者步骤：
1.判断桌子上是否有汉堡包
	如果有就等待，没有就生成
2.把汉堡包放在桌子上
3.叫醒等待的消费者开吃*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Desk类</span>
<span class="token keyword">package</span> <span class="token class-name">ThreadDemo</span><span class="token punctuation">;</span>

<span class="token keyword">package</span> <span class="token class-name">ThreadDemo</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Desk</span> <span class="token punctuation">{</span>
	<span class="token comment">// 状态：桌上有无汉堡包</span>
	<span class="token keyword">private</span> <span class="token keyword">boolean</span> flag<span class="token punctuation">;</span>
	<span class="token comment">// 数量</span>
	<span class="token keyword">private</span> <span class="token keyword">int</span> count<span class="token punctuation">;</span>
	<span class="token comment">// 锁对象</span>
	<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">public</span> <span class="token class-name">Desk</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> flag<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>flag <span class="token operator">=</span> flag<span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> count<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">public</span> <span class="token class-name">Desk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> flag<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setFlag</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>flag <span class="token operator">=</span> flag<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> count<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCount</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> count<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> lock<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token string">&quot;Desk [flag=&quot;</span> <span class="token operator">+</span> flag <span class="token operator">+</span> <span class="token string">&quot;, count=&quot;</span> <span class="token operator">+</span> count <span class="token operator">+</span> <span class="token string">&quot;, lock=&quot;</span> <span class="token operator">+</span> lock <span class="token operator">+</span> <span class="token string">&quot;]&quot;</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>	
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 吃货类</span>
<span class="token keyword">package</span> <span class="token class-name">ThreadDemo</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Foodie</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>
	<span class="token keyword">private</span> <span class="token class-name">Desk</span> desk<span class="token punctuation">;</span>
	
	<span class="token keyword">public</span> <span class="token class-name">Foodie</span><span class="token punctuation">(</span><span class="token class-name">Desk</span> desk<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>desk <span class="token operator">=</span> desk<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
			<span class="token keyword">synchronized</span><span class="token punctuation">(</span>desk<span class="token punctuation">.</span><span class="token function">getLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
				<span class="token keyword">if</span><span class="token punctuation">(</span>desk<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
					<span class="token keyword">break</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
					<span class="token keyword">if</span><span class="token punctuation">(</span>desk<span class="token punctuation">.</span><span class="token function">isFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>		<span class="token comment">// 桌上有就开吃</span>
						<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;吃货正在吃汉堡包&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
						desk<span class="token punctuation">.</span><span class="token function">setCount</span><span class="token punctuation">(</span>desk<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
						desk<span class="token punctuation">.</span><span class="token function">setFlag</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
						desk<span class="token punctuation">.</span><span class="token function">getLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 叫醒厨师继续生产</span>
					<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>		<span class="token comment">// 如果没有就等待</span>
						<span class="token keyword">try</span> <span class="token punctuation">{</span>
							desk<span class="token punctuation">.</span><span class="token function">getLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
						<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
							<span class="token comment">// TODO Auto-generated catch block</span>
							e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
						<span class="token punctuation">}</span>
					<span class="token punctuation">}</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 厨师类</span>
<span class="token keyword">package</span> <span class="token class-name">ThreadDemo</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cooker</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>
	<span class="token keyword">private</span> <span class="token class-name">Desk</span> desk<span class="token punctuation">;</span>
	
	<span class="token keyword">public</span> <span class="token class-name">Cooker</span><span class="token punctuation">(</span><span class="token class-name">Desk</span> desk<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>desk <span class="token operator">=</span> desk<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
			<span class="token keyword">synchronized</span><span class="token punctuation">(</span>desk<span class="token punctuation">.</span><span class="token function">getLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
				<span class="token keyword">if</span><span class="token punctuation">(</span>desk<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
					<span class="token keyword">break</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
					<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>desk<span class="token punctuation">.</span><span class="token function">isFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>		<span class="token comment">// 桌上没有汉堡包就生产</span>
						<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;厨师正在生产第&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">11</span> <span class="token operator">-</span> desk<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;个汉堡包&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
						desk<span class="token punctuation">.</span><span class="token function">setFlag</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
						desk<span class="token punctuation">.</span><span class="token function">getLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">// 叫醒吃货来吃汉堡包</span>
					<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>			<span class="token comment">// 有就等待</span>
						<span class="token keyword">try</span> <span class="token punctuation">{</span>
							desk<span class="token punctuation">.</span><span class="token function">getLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
						<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
							<span class="token comment">// TODO Auto-generated catch block</span>
							e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
						<span class="token punctuation">}</span>
					<span class="token punctuation">}</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 测试类</span>
<span class="token keyword">package</span> <span class="token class-name">ThreadDemo</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>
	
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token class-name">Desk</span> desk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Desk</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">Foodie</span> fd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foodie</span><span class="token punctuation">(</span>desk<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">Cooker</span> ck <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cooker</span><span class="token punctuation">(</span>desk<span class="token punctuation">)</span><span class="token punctuation">;</span>
		fd<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		ck<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>阻塞队列实现等待唤醒机制</strong></p><p>阻塞队列继承结构：</p><p>Iterable(接口) -&gt; Collection(接口) -&gt; Queue(接口) -&gt; BlockingQueue(接口) -&gt; ArrayBlockingQueue(实现类) / LinkedBlockingQueue(实现类)</p><p>BlockingQueue的核心方法：</p><ul><li><p><code>put(anObject)</code>：将参数放入队列，如果放不进去会阻塞</p></li><li><p><code>take()</code>：取出第一个参数，取不到会阻塞</p></li></ul><p>常见BlockingQueue：</p><ul><li><code>ArrayBlockingQueue</code>：底层是数组，有界</li><li><code>LinkedBlockingQueue</code>：底层是链表，无界。但不是真正的无界，最大为int的最大值</li></ul><p><strong>代码实现</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 吃货类</span>
<span class="token keyword">package</span> <span class="token class-name">ThreadDemo2</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ArrayBlockingQueue</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Foodie</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>
	<span class="token keyword">private</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">;</span>
	
	
	<span class="token keyword">public</span> <span class="token class-name">Foodie</span><span class="token punctuation">(</span><span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> list<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>


	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
			<span class="token keyword">try</span> <span class="token punctuation">{</span>
				<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;吃货吃了一个&quot;</span> <span class="token operator">+</span> list<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token comment">// TODO Auto-generated catch block</span>
				e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 厨师类</span>
<span class="token keyword">package</span> <span class="token class-name">ThreadDemo2</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ArrayBlockingQueue</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cooker</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>
	<span class="token keyword">private</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">;</span>

	<span class="token keyword">public</span> <span class="token class-name">Cooker</span><span class="token punctuation">(</span><span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> list<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
			<span class="token keyword">try</span> <span class="token punctuation">{</span>
				list<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;汉堡包&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;厨师放了一个汉堡包&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token comment">// TODO Auto-generated catch block</span>
				e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	
	
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 测试类</span>
<span class="token keyword">package</span> <span class="token class-name">ThreadDemo2</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ArrayBlockingQueue</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>

	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 创建一个阻塞队列，容量为1</span>
		<span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		
		<span class="token comment">// 创建相应的生产者和消费者</span>
		<span class="token class-name">Foodie</span> fd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foodie</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">Cooker</span> ck <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cooker</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
		
		<span class="token comment">// 开启对应的线程</span>
		ck<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		fd<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四、线程池-volatile" tabindex="-1"><a class="header-anchor" href="#四、线程池-volatile" aria-hidden="true">#</a> 四、线程池&amp;volatile</h2><h3 id="_1、线程状态" tabindex="-1"><a class="header-anchor" href="#_1、线程状态" aria-hidden="true">#</a> 1、线程状态</h3><p><img src="http://images.hellocode.top/线程状态.png" alt="" loading="lazy"></p><p><strong>虚拟机中线程的六种状态</strong></p><ul><li>新建状态（NEW） ------ 创建线程对象</li><li>就绪状态（RUNNABLE） ------ start方法</li><li>阻塞状态（BLOCKED） ------- 无法获得锁对象</li><li>等待状态（WAITING） --------- wait方法</li><li>计时等待（TIMED_WAITING） -------- sleep等方法</li><li>结束状态（TERMINATED） -------- 全部代码运行完毕</li></ul><h3 id="_2、线程池" tabindex="-1"><a class="header-anchor" href="#_2、线程池" aria-hidden="true">#</a> 2、线程池</h3><p>以前写多线程的弊端</p><ul><li>用到线程的时候就创建</li><li>用完之后线程消失</li></ul><p><strong>解决方案</strong></p><ul><li><p>创建一个池子（线程池），池子是空的-------创建Executors中的静态方法</p></li><li><p>有任务需要执行时，才会创建线程对象 当任务执行完毕，线程对象归还给池子----------submit方法</p></li><li><p>所有任务全部执行完毕，关闭连接池---------shutdown方法</p></li></ul><blockquote><p>池子会自动的帮我们创建对象，任务执行完毕，也会自动把线程对象归还池子</p><p>Executors----------可以帮助我们创建线程池对象</p><p>ExecutorService---------可以帮助我们控制线程池</p></blockquote><p><strong>代码实现</strong></p><ul><li><p><code>static ExecutorService newCachedThreadPool()</code>：创建一个默认的线程池，池子中默认是空的，默认最多可容纳int类型的最大值</p></li><li><p><code>static newFixedThreadPool(int nThreads)</code>：创建一个指定最多线程数量的线程池</p></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token class-name">Executor</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutorService</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Executors</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1</span> <span class="token punctuation">{</span>

	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
		<span class="token comment">// 创建一个线程池对象</span>
		<span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// ExecutorService executorService = Executors.newFixedThreadPool()</span>
		<span class="token comment">// 提交任务</span>
		executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>
			<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;执行了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		
		<span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		
		executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>
			<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;执行了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		
		executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>ThreadPoolExecutor</strong></p><p>核心元素</p><ul><li><p>核心线程数量（一旦创建，不能销毁，除非线程池整体被销毁）---------不能小于0</p></li><li><p>线程池中的最大线程数量-------------不能小于等于0，最大数量&gt;=核心线程数量</p></li><li><p>空闲线程最大存活时间-------------不能小于0</p></li><li><p>时间单位-------------时间单位，使用TimeUnit的静态属性</p></li><li><p>任务队列--------不能为null</p></li><li><p>创建线程工厂---------------不能为null</p></li><li><p>任务的拒绝策略-----------------不能为null</p><p>ThreadPoolExecutor.AbortPolicy-----丢弃任务并抛出RejectedExecutionException异常，是默认的策略</p><p>ThreadPoolExecutor.DiscardPolicy----丢弃任务，但是不抛出异常。不推荐的做法</p><p>ThreadPoolExecutor.DiscardOldestPolicy-----抛弃队列中等待最久的任务，然后把当前的任务加入队列中</p><p>ThreadPoolExecutor.CallerRunsPolicy----调用任务的run()方法绕过线程池直接执行</p></li></ul><p>代码实现</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token class-name">ThreadPool</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ArrayBlockingQueue</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Executors</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ThreadPoolExecutor</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThreadPoolDemo</span> <span class="token punctuation">{</span>

	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">ThreadPoolExecutor</span> pool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>
				<span class="token number">2</span><span class="token punctuation">,</span>
				<span class="token number">5</span><span class="token punctuation">,</span>
				<span class="token number">2</span><span class="token punctuation">,</span>
				<span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span>
				<span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
				<span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">defaultThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
				<span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>AbortPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		pool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>
			<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;在执行&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		pool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>
			<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;在执行&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		pool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、volatile" tabindex="-1"><a class="header-anchor" href="#_3、volatile" aria-hidden="true">#</a> 3、Volatile</h3><p><strong>问题描述</strong></p><p>当A线程修改了共享数据时，B线程没有及时获取到最新的值，如果还在使用原先的值，就会出现问题</p><p><strong>JMM</strong></p><ul><li>在Java虚拟机中，堆内存是唯一的，而每一个线程都有自己独立的栈内存</li><li>每一个线程在使用堆里面的变量的时候，都会先拷贝一份到变量的副本中</li><li>在线程中，每一次使用的是从变量的副本中获取的</li></ul><p><strong>Volatile关键字</strong>：强制线程在每次使用的时候，都会看一下共享区域最新的值</p><p><strong>问题解决方案</strong></p><ul><li>Volatile关键字</li><li>synchronized同步代码块（也具有强制线程查看共享数据中的最新值） <ul><li>线程获得锁</li><li>清空变量副本</li><li>拷贝共享变量最新的值到变量副本中</li><li>执行代码</li><li>将修改后变量副本的值赋给共享数据</li><li>释放锁</li></ul></li></ul><h2 id="五、原子性-并发工具类" tabindex="-1"><a class="header-anchor" href="#五、原子性-并发工具类" aria-hidden="true">#</a> 五、原子性&amp;并发工具类</h2><blockquote><p>所谓原子性是指在一次或多次操作中，要么所有的操作全部都得到了执行并且不会受到任何因素的干扰而中断，要么所有的操作都不执行，多个操作是一个不可分割的整体</p></blockquote><ul><li><p><code>count++</code>不是一个原子性操作，也就是说他在执行的过程中，有可能被其他线程打断操作</p></li><li><p>volatile关键字不能保证原子性，只能保证每次线程共享数据的时候是最新值</p></li><li><p>synchronized同步代码块可以保证原子性，但是速度相对比较慢</p></li></ul><h3 id="_1、原子类atomicinteger" tabindex="-1"><a class="header-anchor" href="#_1、原子类atomicinteger" aria-hidden="true">#</a> 1、原子类AtomicInteger</h3><table><thead><tr><th style="text-align:center;">方法名</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">public AtomicInteger()</td><td style="text-align:center;">初始化一个默认值为0的原子型Integer</td></tr><tr><td style="text-align:center;">public AtomicInteger(int initialValue)</td><td style="text-align:center;">初始化一个指定值的原子型Integer</td></tr><tr><td style="text-align:center;">int get()</td><td style="text-align:center;">获取值</td></tr><tr><td style="text-align:center;">int getAndIncrement()</td><td style="text-align:center;">以原子方式将当前值加1，注意，这里返回的是自增前的值</td></tr><tr><td style="text-align:center;">int incrementAndGet()</td><td style="text-align:center;">以原子方式将当前值加1，注意，这里返回的是自增后的值</td></tr><tr><td style="text-align:center;">int addAndGet(int data)</td><td style="text-align:center;">以原子方式将输入的数值与实例中的值(AtomicInteger里的value)相加，并返回结果</td></tr><tr><td style="text-align:center;">int getAndSet(int value)</td><td style="text-align:center;">以原子方式设置为newValue的值，并返回旧值</td></tr></tbody></table><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// MyAtomThread类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAtomThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>
   <span class="token class-name">AtomicInteger</span> ac <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">int</span> count <span class="token operator">=</span> ac<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;已经送了&quot;</span> <span class="token operator">+</span> count <span class="token operator">+</span> <span class="token string">&quot;个冰淇淋&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 测试类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">MyAtomThread</span> atom <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyAtomThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>atom<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>AtomicInteger原理</strong></p><ul><li>自旋锁 + CAS算法</li><li>CAS算法：有3个操作数(内存值V, 旧的预期值A, 要修改的值B) <ul><li>当旧的预期值A == 内存值 此时修改成功，将V改为B</li><li>当旧的预期值A != 内存值 此时修改失败，不做任何操作</li><li>并重新获取现在的最新值(这个重新获取的动作就是自旋)</li></ul></li></ul><h3 id="_2、悲观锁和乐观锁" tabindex="-1"><a class="header-anchor" href="#_2、悲观锁和乐观锁" aria-hidden="true">#</a> 2、悲观锁和乐观锁</h3><p><strong>synchronized和CAS的区别</strong></p><p>相同点：在多线程情况下，都可以保证共享数据的安全性</p><p>不同点</p><ul><li><p>synchronized总是从最坏的角度出发，认为每次获取数据的时候，别人都有可能修改，所以每次操作共享数据之前，都会上锁。（悲观锁）</p></li><li><p>CAS是从乐观的角度出发，假设每次获取数据别人都不会修改，所以不会上锁。只不过在修改共享数据的时候，会检查一下，别人有没有修改过这个数据。（乐观锁）</p><p>如果别人修改过，就再次获取最新值（自旋）</p><p>如果别人没有修改过，就直接修改</p></li></ul><h3 id="_3、并发工具类" tabindex="-1"><a class="header-anchor" href="#_3、并发工具类" aria-hidden="true">#</a> 3、并发工具类</h3><h4 id="_3-1-hashtable" tabindex="-1"><a class="header-anchor" href="#_3-1-hashtable" aria-hidden="true">#</a> 3.1. Hashtable</h4><blockquote><p>HashMap是线程不安全的（多线程环境下可能会存在问题）</p></blockquote><p>为了保证数据的安全性我们可以使用Hashtable，但是Hashtable的效率低下</p><ul><li>Hashtable采取悲观锁synchronized的形式保证数据的安全性</li><li>只要有线程访问，会将整张表全部锁起来，所以Hashtable的效率低下</li></ul><h4 id="_3-2-concurrenthashmap" tabindex="-1"><a class="header-anchor" href="#_3-2-concurrenthashmap" aria-hidden="true">#</a> 3.2. ConcurrentHashMap</h4><blockquote><p>ConcurrentHashMap是线程安全的，而且效率也比较高，继承于Map</p></blockquote><p><strong>JDK1.7原理解析</strong></p><p>创建对象</p><ul><li>创建一个默认长度16，默认加载因子0.75的数组，数组名Segment，这个大数组一旦创建，无法扩容</li><li>再创建一个长度为2的小数组，把地址值赋值给0索引，其它索引都为null</li></ul><p>添加</p><ul><li><p>第一次会根据键的哈希值计算出在大数组中应存入的位置</p></li><li><p>如果为null，则按照模板创建小数组</p><p>创建完毕，会二次哈希，计算出在小数组中应存入的位置，直接存入</p></li><li><p>如果不为null，就会根据记录的地址值找到小数组</p><p>二次哈希，计算出在小数组中应存入的位置</p></li><li><p>如果需要扩容，则将小数组扩容两倍</p></li><li><p>如果不需要扩容，则判断小数组的这个位置有没有元素。如果没有元素，则直接存，如果有元素，则会调用equals方法，比较属性值</p><p>如果equals为true，则不存</p><p>如果equals为false，则形成哈希桶结构</p></li></ul><p><strong>JDK1.8原理解析</strong></p><ul><li>底层结构：哈希表（数组、链表、红黑树的结合体）</li><li>结合CAS机制 + synchronized同步代码块形式保证线程安全</li></ul><p><strong>总结</strong></p><ul><li>如果使用空参构造创建ConcurrentHashMap对象，则什么事情都不做 在第一次添加元素的时候创建哈希表</li><li>计算当前元素应存入的索引</li><li>如果该索引位置为null，则利用CAS算法，将本结点添加到数组中</li><li>如果该索引位置不为null，则利用volatile关键字获得当前位置最新的结点地址，挂在他下面，形成链表</li><li>当链表的长度大于等于8时，自动转换为红黑树</li><li>以链表或者红黑树头结点为锁对象，配合悲观锁保证多线程操作集合时数据的安全性</li></ul><h4 id="_3-3-countdownlatch" tabindex="-1"><a class="header-anchor" href="#_3-3-countdownlatch" aria-hidden="true">#</a> 3.3. CountDownLatch</h4><p>使用场景：让某一条线程等待其他线程执行完毕后再执行</p><table><thead><tr><th style="text-align:center;">方法名</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">public CountDownLatch(int count)</td><td style="text-align:center;">参数传递线程数，表示等待线程数量。并定义了一个计数器</td></tr><tr><td style="text-align:center;">public void await()</td><td style="text-align:center;">让线程等待，当计数器为0时，会唤醒等待的线程</td></tr><tr><td style="text-align:center;">public void countDown()</td><td style="text-align:center;">当前线程执行完毕，会将计数器减一</td></tr></tbody></table><h4 id="_3-4-semaphore" tabindex="-1"><a class="header-anchor" href="#_3-4-semaphore" aria-hidden="true">#</a> 3.4. Semaphore</h4><p>使用场景：可以控制访问特定资源的线程数量</p><p><strong>步骤</strong></p><ul><li><p>创建Semaphore对象：<code>new Semaphore(int n)</code></p><p>n表示最多可发放通行证的数量</p></li><li><p>acquire()方法发放通行证</p></li><li><p>release()方法收回通行证</p></li></ul>`,174);function v(m,b){const a=i("router-link");return c(),o("div",null,[k,n("nav",d,[n("ul",null,[n("li",null,[t(a,{to:"#一、基础知识"},{default:p(()=>[s("一、基础知识")]),_:1}),n("ul",null,[n("li",null,[t(a,{to:"#_1、并发和并行"},{default:p(()=>[s("1、并发和并行")]),_:1})]),n("li",null,[t(a,{to:"#_2、进程和线程"},{default:p(()=>[s("2、进程和线程")]),_:1})]),n("li",null,[t(a,{to:"#_3、实现方式"},{default:p(()=>[s("3、实现方式")]),_:1})]),n("li",null,[t(a,{to:"#_4、线程类的常见方法"},{default:p(()=>[s("4、线程类的常见方法")]),_:1})]),n("li",null,[t(a,{to:"#_5、线程调度"},{default:p(()=>[s("5、线程调度")]),_:1})]),n("li",null,[t(a,{to:"#_6、后台线程-守护线程"},{default:p(()=>[s("6、后台线程/守护线程")]),_:1})])])]),n("li",null,[t(a,{to:"#二、线程安全问题"},{default:p(()=>[s("二、线程安全问题")]),_:1}),n("ul",null,[n("li",null,[t(a,{to:"#_1、卖票案例"},{default:p(()=>[s("1、卖票案例")]),_:1})]),n("li",null,[t(a,{to:"#_2、同步代码块"},{default:p(()=>[s("2、同步代码块")]),_:1})]),n("li",null,[t(a,{to:"#_3、同步方法"},{default:p(()=>[s("3、同步方法")]),_:1})]),n("li",null,[t(a,{to:"#_4、lock锁"},{default:p(()=>[s("4、Lock锁")]),_:1})]),n("li",null,[t(a,{to:"#_5、死锁"},{default:p(()=>[s("5、死锁")]),_:1})])])]),n("li",null,[t(a,{to:"#三、生产者和消费者"},{default:p(()=>[s("三、生产者和消费者")]),_:1})]),n("li",null,[t(a,{to:"#四、线程池-volatile"},{default:p(()=>[s("四、线程池&volatile")]),_:1}),n("ul",null,[n("li",null,[t(a,{to:"#_1、线程状态"},{default:p(()=>[s("1、线程状态")]),_:1})]),n("li",null,[t(a,{to:"#_2、线程池"},{default:p(()=>[s("2、线程池")]),_:1})]),n("li",null,[t(a,{to:"#_3、volatile"},{default:p(()=>[s("3、Volatile")]),_:1})])])]),n("li",null,[t(a,{to:"#五、原子性-并发工具类"},{default:p(()=>[s("五、原子性&并发工具类")]),_:1}),n("ul",null,[n("li",null,[t(a,{to:"#_1、原子类atomicinteger"},{default:p(()=>[s("1、原子类AtomicInteger")]),_:1})]),n("li",null,[t(a,{to:"#_2、悲观锁和乐观锁"},{default:p(()=>[s("2、悲观锁和乐观锁")]),_:1})]),n("li",null,[t(a,{to:"#_3、并发工具类"},{default:p(()=>[s("3、并发工具类")]),_:1})])])])])]),r])}const g=e(u,[["render",v],["__file","concurrency.html.vue"]]);export{g as default};
