import{_ as o}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as p,c as r,d as s,w as e,b as n,a,e as d,r as l}from"./app.d1f70aa1.js";const u={},h=d('<h1 id="css" tabindex="-1"><a class="header-anchor" href="#css" aria-hidden="true">#</a> CSS</h1><h2 id="_1-css-简介" tabindex="-1"><a class="header-anchor" href="#_1-css-简介" aria-hidden="true">#</a> 1. CSS 简介</h2><h3 id="_1-1-html-的局限性" tabindex="-1"><a class="header-anchor" href="#_1-1-html-的局限性" aria-hidden="true">#</a> 1.1 HTML 的局限性</h3><p>HTML 是网友的骨架，只关注内容的语义。例如<code>&lt;h1&gt;</code>表示大标题，<code>&lt;p&gt;</code>表示段落。</p><p>早期的时候，HTML 只能做一些简单的样式，网页非常丑，而且使 HTML 代码臃肿。</p><h3 id="_1-2-css-网页的美容师" tabindex="-1"><a class="header-anchor" href="#_1-2-css-网页的美容师" aria-hidden="true">#</a> 1.2 CSS-网页的美容师</h3>',6),v=a("p",null,"CSS 也是一种标记语言。",-1),b=a("p",null,"CSS 主要用于设置 HTML 页面中的文本内容（字体、大小、对齐方式）、图片的外形（宽高、边框样式、边距等）以及版面的布局和外观显示样式。·",-1),m=a("p",null,"HTML 呈现结构，CSS 决定样式，结构与样式分离。",-1),k=a("h3",{id:"_1-2-css-语法规范",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#_1-2-css-语法规范","aria-hidden":"true"},"#"),n(" 1.2 CSS 语法规范")],-1),g=d('<h3 id="_1-3-css-代码风格" tabindex="-1"><a class="header-anchor" href="#_1-3-css-代码风格" aria-hidden="true">#</a> 1.3 CSS 代码风格</h3><ul><li>展开式</li><li>选择器，属性名，属性关键字全部小写</li><li>空格规范</li></ul><h2 id="_2-css-基础选择器" tabindex="-1"><a class="header-anchor" href="#_2-css-基础选择器" aria-hidden="true">#</a> 2. CSS 基础选择器</h2><h3 id="_2-1-选择器的作用" tabindex="-1"><a class="header-anchor" href="#_2-1-选择器的作用" aria-hidden="true">#</a> 2.1 选择器的作用</h3><p>选择器就是根据不同需求把不同标签选择出来。</p><h3 id="_2-2-选择器分类" tabindex="-1"><a class="header-anchor" href="#_2-2-选择器分类" aria-hidden="true">#</a> 2.2 选择器分类</h3><p>选择器分为基础选择器和复合选择器两大类。</p><ul><li>基础选择器由单个选择器组成</li><li>基础选择器包括：标签选择器、类选择器、id 选择器和通配符选择器</li></ul><h3 id="_2-3-标签选择器" tabindex="-1"><a class="header-anchor" href="#_2-3-标签选择器" aria-hidden="true">#</a> 2.3 标签选择器</h3><p>直接用 HTML 标签名作为选择器，按标签名称分类，<strong>为页面某一类标签指定统一的 CSS 样式。</strong></p>',10),_=d(`<div class="language-HTML line-numbers-mode" data-ext="HTML"><pre class="language-HTML"><code>标签名 {
    属性1： 属性值1;
    属性2： 属性值2;
    属性3： 属性值3;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),x=a("p",null,"标签选择器可以把某一标签全部选择出来，快速为同类型标签设置统一样式。",-1),f=a("p",null,"不能设置差异化样式，只能选择全部当前标签。",-1),y=a("h3",{id:"_2-4-类选择器",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#_2-4-类选择器","aria-hidden":"true"},"#"),n(" 2.4 类选择器")],-1),S=a("p",null,"差异化选择不同标签，单独选一个或者某个标签。",-1),C=a("p",null,[n("使用 "),a("code",null,"class"),n(" 属性来调用 class 类，样式点定义，结构类调用，一个或多个，开发最常用。")],-1),w=a("p",null,[n("类选择器用 "),a("code",null,"."),n(" 号显示。")],-1),z=d(`<ol><li>类选择器用 <code>.</code> 标识，紧跟类名。</li><li>小写，使用 <code>-</code> 连接单词。</li><li>不要用纯数字、中文。</li><li>命名有意义。</li></ol><h3 id="_2-4-1-类选择器-多类名" tabindex="-1"><a class="header-anchor" href="#_2-4-1-类选择器-多类名" aria-hidden="true">#</a> 2.4.1 类选择器-多类名</h3><p>类名间用空格分开</p><div class="language-HTML line-numbers-mode" data-ext="HTML"><pre class="language-HTML"><code>&lt;p class=&quot;class-name1 class-name2&quot;&gt;&lt;/p&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-5-id-选择器" tabindex="-1"><a class="header-anchor" href="#_2-5-id-选择器" aria-hidden="true">#</a> 2.5 id 选择器</h3><p>id 选择器可以为标有特定 id 的 HTML 元素指定特定的样式。</p><p>HTML 元素以 id 属性来设置 id 选择器，用 <code>#</code> 来定义。</p><div class="language-HTML line-numbers-mode" data-ext="HTML"><pre class="language-HTML"><code>#id名 {
    属性1: 属性值1;
    ...
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>样式 <code>#</code> 定义，结构 id 调用，别人切勿使用。</p>`,9),M=a("ol",null,[a("li",null,"类选择器可以被多个元素调用。"),a("li",null,"id 选择器只能允许一个标签调用。"),a("li",null,"类选择器使用的较多，id 选择器用于唯一特性的标签。")],-1),L=a("h3",{id:"_2-6-通配符选择器",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#_2-6-通配符选择器","aria-hidden":"true"},"#"),n(" 2.6 通配符选择器")],-1),H=d(`<div class="language-HTML line-numbers-mode" data-ext="HTML"><pre class="language-HTML"><code>* {
    属性1: 属性值1;
    ...
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>用 <code>*</code> 定义通配符选择器，选取页面中所有标签。</li><li>不需要调用，自动给所有标签。</li><li>特殊情况使用</li></ul><div class="language-HTML line-numbers-mode" data-ext="HTML"><pre class="language-HTML"><code>* {
    margin: 0;
    padding: 0;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-7-基础选择器总结" tabindex="-1"><a class="header-anchor" href="#_2-7-基础选择器总结" aria-hidden="true">#</a> 2.7 基础选择器总结</h3><table><thead><tr><th>基础选择器</th><th>作用</th><th>特点</th><th>使用情况</th><th>用法</th></tr></thead><tbody><tr><td>标签选择器</td><td>选中所有相同标签</td><td>不能差异化选择</td><td>较多</td><td><code>p{color:red;}</code></td></tr><tr><td>类选择器</td><td>选出一个或多个标签</td><td>可以根据需求选择</td><td>较多</td><td><code>.nav {color: red;}</code></td></tr><tr><td>id 选择器</td><td>一次只能选出一个标签</td><td>一个 id 属性在页面中只能出现一次</td><td>一般配合 js 使用</td><td><code>#nav {color: red;}</code></td></tr><tr><td>通配符选择器</td><td>选择所有标签元素</td><td>选择的太多，有部分不需要</td><td>特殊情况使用</td><td><code>* {color: red; }</code></td></tr></tbody></table><ul><li>每个选择器都有自己的使用场景，都要掌握。</li><li>如果是修改样式，类选择器是使用最多的。</li></ul><h2 id="_3-css-字体属性" tabindex="-1"><a class="header-anchor" href="#_3-css-字体属性" aria-hidden="true">#</a> 3. CSS 字体属性</h2><h3 id="_3-1-字体系列" tabindex="-1"><a class="header-anchor" href="#_3-1-字体系列" aria-hidden="true">#</a> 3.1 字体系列</h3><p>CSS 使用 <code>font-family</code> 属性定义文本字体系列。 尽量使用默认字体，保证不同浏览器的兼容性。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">body</span> <span class="token punctuation">{</span>
  <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">&quot;微软雅黑&quot;</span><span class="token punctuation">,</span> Arial<span class="token punctuation">,</span> Helvetica<span class="token punctuation">,</span> sans-serif<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-字体大小" tabindex="-1"><a class="header-anchor" href="#_3-2-字体大小" aria-hidden="true">#</a> 3.2 字体大小</h3><p>CSS 使用 <code>font-size</code> 属性定义字体大小。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">body</span> <span class="token punctuation">{</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> 16px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>px</code> 大小是我们网页常用单位</li><li>谷歌浏览器默认是 <code>16px</code></li><li>可以给 <code>body</code> 指定整个页面文字大小</li></ul><h3 id="_3-3-字体粗细" tabindex="-1"><a class="header-anchor" href="#_3-3-字体粗细" aria-hidden="true">#</a> 3.3 字体粗细</h3><p>CSS 使用 <code>font-weight</code> 属性设置字体粗细</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">p</span> <span class="token punctuation">{</span>
  <span class="token property">font-weight</span><span class="token punctuation">:</span> 700<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17),T=a("code",null,"400",-1),q=a("code",null,"normal",-1),E=a("code",null,"700",-1),P=a("code",null,"bold",-1),F=d(`<table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>normal</td><td>默认值</td></tr><tr><td>bold</td><td>定义粗体</td></tr><tr><td>100-900</td><td>400 等价于 normal，700 等价于 bold，无单位</td></tr></tbody></table><h3 id="_3-4-文字样式" tabindex="-1"><a class="header-anchor" href="#_3-4-文字样式" aria-hidden="true">#</a> 3.4 文字样式</h3><p>CSS 使用 <code>font-style</code> 属性设置文本风格。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>p { font-style: italic; }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>normal</td><td>正常显示</td></tr><tr><td>italic</td><td><em>斜体</em></td></tr></tbody></table>`,5),I=a("h3",{id:"_3-5-字体复合属性写法",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#_3-5-字体复合属性写法","aria-hidden":"true"},"#"),n(" 3.5 字体复合属性写法")],-1),G=a("p",null,"将各种字体属性写在同一选择器下，节约代码。",-1),B=d(`<p>严格遵守顺序，且 <code>font-sieze</code> 和 <code>font-family</code> 必须有。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">body</span> <span class="token punctuation">{</span>
  <span class="token property">font</span><span class="token punctuation">:</span> font-style font-weight font-size/line-hight font-family<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-6-字体属性总结" tabindex="-1"><a class="header-anchor" href="#_3-6-字体属性总结" aria-hidden="true">#</a> 3.6 字体属性总结</h3><table><thead><tr><th>字体属性</th><th>表示</th><th>注意</th></tr></thead><tbody><tr><td>font-size</td><td>字号</td><td>单位是 <code>px</code></td></tr><tr><td>font-family</td><td>字体</td><td>按照团队约定来写</td></tr><tr><td>font-weight</td><td>字体粗细</td><td>400=normal，700=bold</td></tr><tr><td>font-style</td><td>字体样式</td><td>italic，normal，常用 normal</td></tr><tr><td>font</td><td>属性连写</td><td>顺序不能变，字体和字号属性必须有</td></tr></tbody></table><h2 id="_4-css-文本属性" tabindex="-1"><a class="header-anchor" href="#_4-css-文本属性" aria-hidden="true">#</a> 4. CSS 文本属性</h2><p>CSS Text（文本）属性定义文本外观，比如颜色、对齐、装饰、缩进、行间距等。</p><h3 id="_4-1-文本颜色" tabindex="-1"><a class="header-anchor" href="#_4-1-文本颜色" aria-hidden="true">#</a> 4.1 文本颜色</h3><p><code>color</code> 属性定义文本颜色。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">div</span> <span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),D=d(`<table><thead><tr><th>表示颜色</th><th>属性值</th></tr></thead><tbody><tr><td>预定义的颜色值</td><td>red,green,pink</td></tr><tr><td>十六进制</td><td>#FF0000，#FF6600</td></tr><tr><td>RGB 代码</td><td>rgb(255,0,0)</td></tr></tbody></table><p>实际开发中，最常用的是十六进制。</p><h3 id="_4-2-对齐文本" tabindex="-1"><a class="header-anchor" href="#_4-2-对齐文本" aria-hidden="true">#</a> 4.2 对齐文本</h3><p><code>text-align</code> 属性用于设置元素文本内容的对齐方式。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">div</span> <span class="token punctuation">{</span>
  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>属性值</th><th>解释</th></tr></thead><tbody><tr><td>left</td><td>左对齐（默认）</td></tr><tr><td>right</td><td>右对齐</td></tr><tr><td>center</td><td>居中对齐</td></tr></tbody></table><h3 id="_4-3-装饰文本" tabindex="-1"><a class="header-anchor" href="#_4-3-装饰文本" aria-hidden="true">#</a> 4.3 装饰文本</h3><p><code>text-decoration</code> 属性规定添加到文本的修饰。可以给文本添加下划线、删除线、上划线等。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">text-decoration</span><span class="token punctuation">:</span> underline<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>none</td><td>默认，无装饰（最常用）</td></tr><tr><td>underline</td><td>下划线，a 标签自带（常用）</td></tr><tr><td>overline</td><td>上划线。（几乎不用）</td></tr><tr><td>line-through</td><td>删除线。（不常用）</td></tr></tbody></table><h3 id="_4-4-文本缩进" tabindex="-1"><a class="header-anchor" href="#_4-4-文本缩进" aria-hidden="true">#</a> 4.4 文本缩进</h3><p><code>text-indent</code>定义段落首行缩进。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">p</span> <span class="token punctuation">{</span>
  <span class="token property">text-indet</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>em</code> 是一个相对单位，<code>1em</code> 就是一个字符所占大小。当 <code>text-indent=2em</code>，则恰好缩进两个文字。</p><h3 id="_4-5-行间距" tabindex="-1"><a class="header-anchor" href="#_4-5-行间距" aria-hidden="true">#</a> 4.5 行间距</h3><p><code>line-height</code> 设置行间的距离，行间距=文本高度+上间距+下间距</p><h3 id="_4-6-文本属性总结" tabindex="-1"><a class="header-anchor" href="#_4-6-文本属性总结" aria-hidden="true">#</a> 4.6 文本属性总结</h3><table><thead><tr><th>属性</th><th>表示</th><th>注意</th></tr></thead><tbody><tr><td>color</td><td>文本颜色</td><td>通常十六进制缩写</td></tr><tr><td>text-align</td><td>文本对齐</td><td></td></tr><tr><td>text-indent</td><td>文本缩进</td><td>记住 <code>text-indent: 2em;</code></td></tr><tr><td>text-decoration</td><td>文本装饰</td><td>记住下划线和去除下划线</td></tr><tr><td>line-height</td><td>行高</td><td></td></tr></tbody></table><h2 id="_5-css-引用方式" tabindex="-1"><a class="header-anchor" href="#_5-css-引用方式" aria-hidden="true">#</a> 5. CSS 引用方式</h2><p>按照 CSS 书写的位置不同，CSS 样式表可以分为三大类：</p><ol><li>行内样式表（行内式）</li><li>内部样式表（嵌入式）</li><li>外部样式表（链接式）</li></ol><h3 id="_5-1-内部样式表" tabindex="-1"><a class="header-anchor" href="#_5-1-内部样式表" aria-hidden="true">#</a> 5.1 内部样式表</h3><p>将 CSS 代码写在 HTML 页面内部，单独放在一个 <code>&lt;style&gt;</code> 标签中。</p><ul><li><code>&lt;style&gt;</code> 理论上可以放在 HTML 文档中任何一个地方，一般放在 <code>&lt;head&gt;</code> 标签中。</li><li>方便控制整个页面中的元素样式。</li></ul><p>练习时使用，实际开发不用。</p><h3 id="_5-2-行内样式表" tabindex="-1"><a class="header-anchor" href="#_5-2-行内样式表" aria-hidden="true">#</a> 5.2 行内样式表</h3><p>行内样式表（内联样式表）是在元素标签内部的 <code>style</code> 属性中设定 CSS 样式，适合修改简单样式。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span> <span class="token property">font-size</span><span class="token punctuation">:</span> 12px</span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>行内样式表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>设置当前标签样式</li><li>书写繁琐，不推荐大量使用。</li></ul><h3 id="_5-3-外部样式表" tabindex="-1"><a class="header-anchor" href="#_5-3-外部样式表" aria-hidden="true">#</a> 5.3 外部样式表</h3><p>实际开发中都是外部样式表，适用于样式比较多的情况。 核心：样式单独写到 CSS 文件中，再将 CSS 文件引入到 HTML 页面中。</p>`,31),J=d(`<div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylesheet<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>css文件路径<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_6-emmet-语法" tabindex="-1"><a class="header-anchor" href="#_6-emmet-语法" aria-hidden="true">#</a> 6. Emmet 语法</h2><ul><li>快速生成 HTML 结构代码</li><li>快速生成 CSS 样式代码</li></ul><h2 id="_7-复合选择器" tabindex="-1"><a class="header-anchor" href="#_7-复合选择器" aria-hidden="true">#</a> 7. 复合选择器</h2><p>由基础选择器组合而成。</p><ul><li>后代选择器</li><li>子选择器</li><li>并集选择器</li><li>伪类选择器</li></ul><h3 id="_2-1-后代选择器-重要" tabindex="-1"><a class="header-anchor" href="#_2-1-后代选择器-重要" aria-hidden="true">#</a> 2.1 后代选择器（重要）</h3><p>后代选择器又称为包含选择器，可以选择父元素里的子元素。写法是将外层标签写在前面，内层标签写在后面，中间空格分开。 <strong>语法</strong></p><div class="language-CSS line-numbers-mode" data-ext="CSS"><pre class="language-CSS"><code>元素1 元素2 { 样式声明; }

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>上述语法表示选择元素 1 里面所有的元素 2</li><li>可以连续嵌套，比如可以是孙子等</li><li>元素 1、2 可以是任何基础标签</li></ul><h3 id="_2-2-子选择器-重要" tabindex="-1"><a class="header-anchor" href="#_2-2-子选择器-重要" aria-hidden="true">#</a> 2.2 子选择器（重要）</h3><p>子元素选择器（子选择器）只能选择作为元素作为元素的最近一级子元素。简单理解就是选亲儿子。</p><p><strong>语法</strong></p><div class="language-CSS line-numbers-mode" data-ext="CSS"><pre class="language-CSS"><code>元素1 &gt; 元素2 { 样式声明; }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>元素之间用大于号 <code>&gt;</code> 隔开</li><li>1 为父级。二为子级，最终选择的是元素 2</li><li>元素 2 必须是亲儿子。</li></ul><h3 id="_2-3-并集选择器" tabindex="-1"><a class="header-anchor" href="#_2-3-并集选择器" aria-hidden="true">#</a> 2.3 并集选择器</h3><p>并集选择器可以选择多组标签，同时为他们定义相同的样式。通常用于集体声明。</p><p>并集选择器是各选择器通过英文逗号 <code>,</code> 连接而成，任何形式的选择器都可以作为并集选择器的一部分。</p><p><strong>语法</strong></p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">元素1, 元素2</span> <span class="token punctuation">{</span> 样式声明<span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-4-伪类选择器" tabindex="-1"><a class="header-anchor" href="#_2-4-伪类选择器" aria-hidden="true">#</a> 2.4 伪类选择器</h3><p>伪类选择器用于向某些选择器添加特殊的效果。 伪类选择器书写最大特点是用冒号 <code>:</code> 表示。 伪类选择器种类多，比如链接伪类选择器、结构选择器等。</p><h4 id="_2-4-1-链接伪类选择器" tabindex="-1"><a class="header-anchor" href="#_2-4-1-链接伪类选择器" aria-hidden="true">#</a> 2.4.1 链接伪类选择器</h4><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">a</span><span class="token punctuation">:</span>link <span class="token comment">/*选择所有未被访问的链接*/</span>
<span class="token property">a</span><span class="token punctuation">:</span>visited <span class="token comment">/*选择所有已被访问的链接*/</span>
<span class="token property">a</span><span class="token punctuation">:</span>hover <span class="token comment">/*选择鼠标指针位于其上的链接*/</span>
<span class="token property">a</span><span class="token punctuation">:</span>active <span class="token comment">/*选择活动链接（鼠标按下未弹起的链接）*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意事项</strong></p><ol><li>确保样式生效，要按照 LVHA 的顺序声明：link,visited,hover, active。</li><li>a 链接在浏览器中有默认样式，所以实际开发都需要给链接单独指定样式。</li></ol><p><strong>开发中实际写法</strong></p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">a</span> <span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> gray<span class="token punctuation">;</span>
  <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">a:hover</span> <span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> #369<span class="token punctuation">;</span>
  <span class="token property">text-decoration</span><span class="token punctuation">:</span> underline<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-4-2-focus-伪类选择器" tabindex="-1"><a class="header-anchor" href="#_2-4-2-focus-伪类选择器" aria-hidden="true">#</a> 2.4.2 focus 伪类选择器</h4><p><code>:focus</code> 伪类选择器用于获取焦点的表单元素。 焦点就是光标，一般情况 <code>&lt;input&gt;</code> 类表单元素才能获取，因此这个选择器也主要针对表单元素来说。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">input:focus</span> <span class="token punctuation">{</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-4-3-其他标准伪类选择器" tabindex="-1"><a class="header-anchor" href="#_2-4-3-其他标准伪类选择器" aria-hidden="true">#</a> 2.4.3 其他标准伪类选择器</h4>`,32),N=a("code",null,"first-child",-1),V=a("p",null,[a("code",null,":first-child"),n(" 是 CSS 伪类，表示父元素的第一个子元素。")],-1),j=a("code",null,"last-child",-1),A=a("p",null,[a("code",null,":last-child"),n(" CSS 伪类 代表父元素的最后一个子元素。")],-1),U=a("code",null,"nth-child(n)",-1),W=a("p",null,[a("code",null,":nth-child(an+b)"),n(" 这个 CSS 伪类首先找到所有当前元素的兄弟元素，然后按照位置先后顺序从 1 开始排序，选择的结果为 CSS 伪类 "),a("code",null,":nth-child"),n("括号中表达式 "),a("code",null,"(an+b)"),n(" 匹配到的元素集合 "),a("code",null,"(n=0，1，2，3...)")],-1),O=a("code",null,":not(p)",-1),R=a("p",null,[a("code",null,":not()"),n(" 用来匹配不符合一组选择器的元素。由于它的作用是防止特定的元素被选中，它也被称为反选伪类（negation pseudo-class）。")],-1),X=a("code",null,"::after (:after)",-1),Y=d(`<p>CSS 伪元素 <code>::after</code> 用来创建一个伪元素，作为已选中元素的最后一个子元素。通常会配合 <code>content</code> 属性来为该元素添加装饰内容。这个虚拟元素默认是行内元素。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.exciting-text::after</span> <span class="token punctuation">{</span>
  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">&quot;&lt;- 让人兴兴兴奋!&quot;</span><span class="token punctuation">;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们几乎可以用想要的任何方法给 <code>content</code> 属性里的文字和图片的加上样式.</p>`,3),K=a("code",null,"::before (:before)",-1),Q=d(`<p>CSS 中，<code>::before</code> 创建一个伪元素，其将成为匹配选中的元素的第一个子元素。常通过 <code>content</code> 属性来为一个元素添加修饰性的内容。此元素默认为行内元素。 使用 <code>::before</code> 伪元素的一个简单示例就是用于加入引号。</p><p>HTML</p><div class="language-HTML line-numbers-mode" data-ext="HTML"><pre class="language-HTML"><code>&lt;q&gt;一些引用&lt;/q&gt;, 他说, &lt;q&gt;比没有好。&lt;/q&gt;.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>CSS</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">q::before</span> <span class="token punctuation">{</span>
  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">&quot;«&quot;</span><span class="token punctuation">;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">q::after</span> <span class="token punctuation">{</span>
  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">&quot;»&quot;</span><span class="token punctuation">;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-5-复合选择器总结" tabindex="-1"><a class="header-anchor" href="#_2-5-复合选择器总结" aria-hidden="true">#</a> 2.5 复合选择器总结</h3><table><thead><tr><th>选择器</th><th>作用</th><th>特征</th><th>使用情况</th><th>隔开符号及用法</th></tr></thead><tbody><tr><td>后代选择器</td><td>用来选择后代元素</td><td>可以是子孙后代</td><td>较多</td><td>符号是空格 <code>.nav a</code></td></tr><tr><td>子代选择器</td><td>选择最近一级元素</td><td>只能选亲儿子</td><td>较少</td><td>符号是大于 <code>.nav&gt;p</code></td></tr><tr><td>并集选择器</td><td>选择某些相同样式的元素</td><td>可以用于集体声明</td><td>较多</td><td>符号是逗号，<code>.nav, a</code></td></tr><tr><td>链接伪类选择器</td><td>选择不同状态的链接</td><td>跟链接相关</td><td>较多</td><td>重点记住<code>a{}</code>和<code>a:hover{}</code></td></tr><tr><td>:focus 选择器</td><td>选择获得光标的表单</td><td>跟表单相关</td><td>较少</td><td>记住<code>input:focus</code>用法</td></tr></tbody></table><h2 id="_8-元素显示模式" tabindex="-1"><a class="header-anchor" href="#_8-元素显示模式" aria-hidden="true">#</a> 8. 元素显示模式</h2><h3 id="_3-1-什么是元素显示模式" tabindex="-1"><a class="header-anchor" href="#_3-1-什么是元素显示模式" aria-hidden="true">#</a> 3.1 什么是元素显示模式</h3><p>作用：网页的标签非常多，不同地方使用不同，了解其特点可以更好布局。</p><p>HTML 元素分为块元素和行内元素。</p><h3 id="_3-2-块元素" tabindex="-1"><a class="header-anchor" href="#_3-2-块元素" aria-hidden="true">#</a> 3.2 块元素</h3><p>常见的块元素有 <code>h1-h6</code>、<code>p</code>、<code>div</code>、<code>ul</code>、<code>ol</code>、<code>li</code>等。 块级元素的特点：</p><ol><li>独占一行。</li><li>高度、宽度、外边距以及内边距都可以控制。</li><li>宽度默认是容器（父级宽度）的 100%。</li><li>是一个容器及盒子，里面可以方行内或块级元素。</li></ol><p>注意：</p><ul><li>文字类的标签内不能放块级元素。</li><li>文字类元素有 <code>p</code>，<code>h1-h6</code>，尤其不能放 <code>div</code> 元素。</li></ul><h3 id="_3-3-行内元素" tabindex="-1"><a class="header-anchor" href="#_3-3-行内元素" aria-hidden="true">#</a> 3.3 行内元素</h3><p>常见行内元素：<code>a</code>、<code>strong</code>、<code>b</code>、<code>em</code>、<code>i</code>、<code>del</code>、<code>s</code>、<code>ins</code>、<code>u</code>、<code>span</code>，典型行内元素是 <code>span</code>，行内元素也叫内联元素。</p><p>行内元素的特点：</p><ol><li>相邻行内元素在一行上，一行可以显示多个。</li><li>高、宽直接设置是无效的。</li><li>默认宽度就是它本身内容宽度。</li><li>行内元素只能容纳文本或其他行内元素。</li></ol><p><strong>注意</strong></p><ul><li>a 链接里面不能放链接</li><li>特殊情况链接 a 里面可以放块级元素，但是给 a 转换一下块级模式最安全。</li></ul><h3 id="_3-4-行内块元素" tabindex="-1"><a class="header-anchor" href="#_3-4-行内块元素" aria-hidden="true">#</a> 3.4 行内块元素</h3><p>在行内元素中有几个特殊标签——<code>img</code>, <code>input</code>、<code>td</code>，它们同时具有块元素和行内元素的特点。</p><p>有些资料称为行内块元素。</p><p>行内块元素的特点：</p><ol><li>和相邻元素（行内块）在一行上，之间存在空白缝隙，一行可以显示多个。</li><li>默认宽度是本身内容宽度。</li><li>高度、行高、外边距、内边距都可以控制（块级元素特点）。</li></ol><h3 id="_3-5-元素显示模式总结" tabindex="-1"><a class="header-anchor" href="#_3-5-元素显示模式总结" aria-hidden="true">#</a> 3.5 元素显示模式总结</h3><p>| 元素模式 | 元素排列 | 设置样式 | 默认宽度 | 包含 | | ---------- | -------------------------- | ------------------ | ------------ | ------------------------ | --- | | 块级元素 | 一行只能放一个块级元素 | 可以设置高度宽度 | 容器的 100% | 可以包含任何标签 | | 行内元素 | 一行可以放多个行内元素 | 不可以设置宽度高度 | 本身内容宽度 | 容纳文本或者其他行内元素 | | 行内块元素 | 一行可以放置多个行内块元素 | 可以设置高度宽度 | 本身内容宽度 | | a |</p><h3 id="_3-6-元素模式转换" tabindex="-1"><a class="header-anchor" href="#_3-6-元素模式转换" aria-hidden="true">#</a> 3.6 元素模式转换</h3><p>特殊情况下，需要将一个元素的模式转换为另外一宗模式，使其具有另外一种模式的特性。 比如想要增加链接 a 的触发范围。</p><p>行内元素可以转换为块元素，块元素也能转换为行内元素。</p><p>行内-&gt;块级</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">a</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>块级-&gt;行内</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">div</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> inline<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>行内/块级-&gt; 行内块元素</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">span</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-7-一个小技巧——单行文字垂直居中" tabindex="-1"><a class="header-anchor" href="#_3-7-一个小技巧——单行文字垂直居中" aria-hidden="true">#</a> 3.7 一个小技巧——单行文字垂直居中</h3><p>解决方案：让文字的行高等于盒子的高度。</p><p>原理分析：行高=文字本身高度+上空隙+下空隙=盒子高度</p><p>当行高小于盒子高度，则文字偏上；当行高大于盒子高度，文字偏下。</p><h2 id="_9-css-的背景" tabindex="-1"><a class="header-anchor" href="#_9-css-的背景" aria-hidden="true">#</a> 9. CSS 的背景</h2><p>CSS 背景属性可以给元素添加背景样式。</p><p>背景属性可以设置背景颜色、背景图片、背景平铺、背景图片位置、背景图像固定等。</p><h3 id="_4-1-背景颜色" tabindex="-1"><a class="header-anchor" href="#_4-1-背景颜色" aria-hidden="true">#</a> 4.1 背景颜色</h3><p><code>background-color</code> 定义了元素的背景颜色。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">background-color</span><span class="token punctuation">:</span> 颜色值<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>一般而言，颜色默认值是 <code>transparent</code>（透明），我们也可以指定背景颜色为透明色或其他色。</p><h3 id="_4-2-背景图片" tabindex="-1"><a class="header-anchor" href="#_4-2-背景图片" aria-hidden="true">#</a> 4.2 背景图片</h3><p><code>background-image</code> 属性描述了元素的背景图像，实际开发用于 logo 或者一些装饰性开发的小图片或者是超大的背景图片，优点是便于控制位置。（也用于精灵图）</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">background-image</span><span class="token punctuation">:</span> none|<span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>图片url<span class="token punctuation">)</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-3-背景平铺" tabindex="-1"><a class="header-anchor" href="#_4-3-背景平铺" aria-hidden="true">#</a> 4.3 背景平铺</h3><p>若需要在 HTML 页面上对背景图进行平铺，可以使用 <code>background-repeat</code> 属性。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">background-repeat</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>默认<span class="token punctuation">)</span> | no-repeat | repeat-x | repeat-y<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>页面元素·既可以添加背景图片，也可以添加背景颜色，图片会覆盖颜色。</p><h3 id="_4-4-背景图片位置" tabindex="-1"><a class="header-anchor" href="#_4-4-背景图片位置" aria-hidden="true">#</a> 4.4 背景图片位置</h3><p><code>background-position</code> 可以改变图片在背景中的位置。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">background-position</span><span class="token punctuation">:</span> x y<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数 x 和 y 指 x 左边和 y 坐标，可以使用方位名词或者精确定位。</p><table><thead><tr><th>参数值</th><th>说明</th></tr></thead><tbody><tr><td>length</td><td>百分数 / 由浮点数字和单位字符组成的长度值</td></tr><tr><td>position</td><td>top / center / bottom / left / center / right 方位名词</td></tr></tbody></table><p><strong>1.参数是方位名词</strong></p><ul><li><p>若两个值都是方位名词，则两个值前后顺序无关，比如<code>left top</code>和<code>top left</code> 效果一致。</p></li><li><p>若只指定了一个方位名词，另一个值省略，则第二个值默认居中对齐。</p></li></ul><p><strong>2.参数是精确单位</strong></p><ul><li>第一个必定是 x 坐标。第二个是 y 坐标</li><li>若只指定一个数值，则另一个必定是 y 轴居中</li></ul><p><strong>3.参数是混合单位</strong></p><ul><li>若是混合单位，则第一个值是 x 坐标，第二个值是 y 坐标。</li></ul><h3 id="_4-5-背景图像固定" tabindex="-1"><a class="header-anchor" href="#_4-5-背景图像固定" aria-hidden="true">#</a> 4.5 背景图像固定</h3><p><code>background-attachment</code> 属性设置背景图像是否随着页面其余部分滚动。</p><p><code>background-attachment</code> 后期可以制作视差滚动效果。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">background-attachment</span><span class="token punctuation">:</span> scroll | fixed<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>scroll</td><td>背景图像随着对象内容滚动</td></tr><tr><td>fixed</td><td>背景图像固定</td></tr></tbody></table><h3 id="_4-6-背景属性复合写法" tabindex="-1"><a class="header-anchor" href="#_4-6-背景属性复合写法" aria-hidden="true">#</a> 4.6 背景属性复合写法</h3><p>简化代码，将属性写在同一个属性 <code>background</code> 下。 一般按照约定顺序编写。</p><p>background 背景颜色 背景图片地址 背景平铺 背景图像滚动 背景图片位置</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">background</span><span class="token punctuation">:</span> transparent <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>image.jpg<span class="token punctuation">)</span></span> repeat-y fixed top<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-7-背景颜色半透明" tabindex="-1"><a class="header-anchor" href="#_4-7-背景颜色半透明" aria-hidden="true">#</a> 4.7 背景颜色半透明</h3><p>CSS3 提供 <code>background: rgba(r,g,b,a)</code> 属性设置图片透明度。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.3<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>CSS3 新增属性，IE9+支持</li></ul><h2 id="_10-css-的三大特性" tabindex="-1"><a class="header-anchor" href="#_10-css-的三大特性" aria-hidden="true">#</a> 10. CSS 的三大特性</h2><p>CSS 有三个非常重要的特性：层叠性、继承性、优先级。</p><h3 id="_5-1-层叠性" tabindex="-1"><a class="header-anchor" href="#_5-1-层叠性" aria-hidden="true">#</a> 5.1 层叠性</h3><p>相同选择器设置相同的样式，此时一个样式就会覆盖另一个冲突的样式。层叠性主要解决样式冲突的问题。</p><p>层叠性原则：</p><ul><li>样式冲突：遵循的原则是就近原则，哪个样式离结构近，就执行哪个样式</li><li>样式不冲突，不会层叠</li></ul><h3 id="_5-2-继承性" tabindex="-1"><a class="header-anchor" href="#_5-2-继承性" aria-hidden="true">#</a> 5.2 继承性</h3><p>CSS 中子标签会继承父标签的某些样式，如文本颜色和字号。</p><ul><li>恰当使用继承可以简化代码，降低 CSS 的复杂性</li><li>子元素可以继承父元素的样式（text-, font-, line-这些元素开头的可以继承，以及 color 属性）</li></ul><h4 id="_5-2-1-行高的继承性" tabindex="-1"><a class="header-anchor" href="#_5-2-1-行高的继承性" aria-hidden="true">#</a> 5.2.1 行高的继承性</h4><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">body</span> <span class="token punctuation">{</span>
  <span class="token property">font</span><span class="token punctuation">:</span> 12px/1.5 Microsoft Yahei<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>行高可以跟单位也可以不跟</li><li>如果子元素没有设置行高，则会继承父元素的行高为 1.5</li><li>此时子元素的行高是：当前子元素的文字大小*1.5</li><li>body 行高 1.5 这样写法最大优势就是里面的子元素可以根据文字大小自动调整行高</li></ul><h3 id="_5-3-优先级" tabindex="-1"><a class="header-anchor" href="#_5-3-优先级" aria-hidden="true">#</a> 5.3 优先级</h3><p>当一个元素指定多个选择器时，就会有有优先级的产生。</p><ul><li>选择器相同，则执行层叠性</li><li>选择器不同，则根据选择器权重执行</li></ul><p>选择器权重如下所示。</p><table><thead><tr><th>选择器</th><th>选择器权重</th></tr></thead><tbody><tr><td>继承或者<code>*</code></td><td><code>0,0,0,0</code></td></tr><tr><td>元素选择器</td><td><code>0,0,0,1</code></td></tr><tr><td>类选择器，伪类选择器</td><td><code>0,0,1,0</code></td></tr><tr><td>ID 选择器</td><td><code>0,1,0,0</code></td></tr><tr><td>行内样式 <code>style=&quot;&quot;</code></td><td><code>1,0,0,0</code></td></tr><tr><td><code>!important</code></td><td>∞ 无穷大</td></tr></tbody></table><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">p</span> <span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> pink <span class="token important">!important</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意</p><ul><li>继承的权重为 0，即使加了 important 权重也还是 0。</li><li>a 链接，浏览器默认指定了一个样式，蓝色，下划线，不会继承父级样式</li></ul><p><strong>复合选择器权重的叠加</strong></p><p>权重可以叠加，需要计算权重，但是没有进位。</p><h2 id="_11-盒子模型" tabindex="-1"><a class="header-anchor" href="#_11-盒子模型" aria-hidden="true">#</a> 11. 盒子模型</h2><h3 id="_1-1-看透网页本质" tabindex="-1"><a class="header-anchor" href="#_1-1-看透网页本质" aria-hidden="true">#</a> 1.1 看透网页本质</h3><p>网页布局过程：</p><ol><li>准备网页元素，网页元素基本都是盒子 box</li><li>利用 CSS 设置好盒子样式，然后摆放到相应位置。</li><li>往盒子里放东西。</li></ol><p>本质：利用 CSS 摆盒子。</p><h3 id="_1-2-盒子模型-box-model-组成" tabindex="-1"><a class="header-anchor" href="#_1-2-盒子模型-box-model-组成" aria-hidden="true">#</a> 1.2 盒子模型（Box Model）组成</h3><p>CSS 盒子模型本质上是一个盒子，封装周围的 HTML 元素，包括：边框、外边距、内边距和实际内容。</p><p><img src="https://s3.ax1x.com/2021/01/29/yilgJO.gif" alt="box-model" loading="lazy"></p><h3 id="_1-3-边框-border" tabindex="-1"><a class="header-anchor" href="#_1-3-边框-border" aria-hidden="true">#</a> 1.3 边框（border）</h3><p>border 可以设置元素边框。边框有三个组成：<code>border-width</code>、<code>border-style</code>、<code>border-color</code></p><p>语法</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/*属性可连写*/</span>
<span class="token property">border</span><span class="token punctuation">:</span> border-width || border-style || border-color<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>border-width</td><td>定义边框粗细，单位 px</td></tr><tr><td>border-style</td><td>边框样式</td></tr><tr><td>border-color</td><td>边框颜色</td></tr></tbody></table><p><strong>边框属性简写</strong></p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/*习惯顺序*/</span>
<span class="token property">border</span><span class="token punctuation">:</span> 5px solid pink<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>边框属性分写</strong></p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/*注意层叠性*/</span>
<span class="token property">border-top</span><span class="token punctuation">:</span> 1px solid red<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-4-表格的细线边框" tabindex="-1"><a class="header-anchor" href="#_1-4-表格的细线边框" aria-hidden="true">#</a> 1.4 表格的细线边框</h3><p><code>border-collapse</code> 属性控制浏览器绘制表格边框的方式。它控制相邻单元格的边框。</p><p>语法</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">border-collapse</span><span class="token punctuation">:</span> collapse<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>collapse 是合并的意思</li><li><code>border-collapse:collapse;</code> 表示将相邻边框合并在一起</li></ul><h3 id="_1-5-边框会影响盒子实际大小" tabindex="-1"><a class="header-anchor" href="#_1-5-边框会影响盒子实际大小" aria-hidden="true">#</a> 1.5 边框会影响盒子实际大小</h3><p>边框会额外增加盒子的实际大小，因此有两种方案解决。</p><ol><li>测量盒子大小的时候，不测边框。</li><li>若测量的时候包含了边框，则需要 width/height-边框宽度。</li></ol><h3 id="_1-6-内边距-padding" tabindex="-1"><a class="header-anchor" href="#_1-6-内边距-padding" aria-hidden="true">#</a> 1.6 内边距 padding</h3><p><code>padding</code> 属性设置内边距，即边框与内容之间的距离。</p><ul><li><code>padding-left</code>: 左内边距</li><li><code>padding-right</code>: 右内边距</li><li><code>padding-top</code>: 上内边距</li><li><code>padding-bottotm</code>: 下内边距</li></ul><p><strong>padding 属性简写</strong></p><p><code>padding</code> 的值的个数：</p><ul><li>1 个值：上下左右</li><li>2 个值：上下，左右</li><li>3 个值：上，左右，下</li><li>4 个值：上，右，下，左，顺时针</li></ul><p><strong>padding 会影响盒子实际大小</strong></p><p>当给盒子指定了 <code>padding</code> 值以后，发生了两件事情：</p><ol><li>内容和边框有了距离，增加内边距</li><li>padding 值影响了盒子实际大小</li></ol><p>也就是说，当盒子已经有了宽度和高度，再指定内边距，会撑大盒子。</p><p>要保证盒子和效果图一样大，则让 <code>width/height</code>-多出来的内边距大小即可。</p><h3 id="_1-7-box-sizing-属性解决方案" tabindex="-1"><a class="header-anchor" href="#_1-7-box-sizing-属性解决方案" aria-hidden="true">#</a> 1.7 box-sizing 属性解决方案</h3><p>CSS 中的 <code>box-sizing</code> 属性定义了 <code>user agent</code> 应该如何计算一个元素的总宽度和总高度。</p><p>在设置了一个盒子的 <code>width/height</code> 后，再设置其 <code>border/padding</code> 会影响盒子实际大小。当进行响应式布局时，这个尤其烦人。</p><p>box-sizing 属性可以被用来调整这些表现。</p><ul><li><code>content-box</code> 是默认值。如果你设置一个元素的宽为<code>100px</code>，那么这个元素的内容区会有 <code>100px</code> 宽，并且任何边框和内边距的宽度都会被增加到最后绘制出来的元素宽度中。<div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">box-sizing</span><span class="token punctuation">:</span> content-box<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><code>border-box</code> 告诉浏览器：你想要设置的边框和内边距的值是包含在 <code>width</code> 内的。也就是说，如果你将一个元素的 <code>width</code> 设为 <code>100px</code>，那么这 100px 会包含它的 <code>border</code> 和 <code>padding</code>，内容区的实际宽度是 <code>width</code> 减去 <code>(border + padding)</code> 的值。大多数情况下，这使得我们更容易地设定一个元素的宽高。<div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>尺寸计算公式： <code>width = border + padding + 内容的宽度</code><code>height = border + padding + 内容的高度</code></li></ul><p>若盒子没有指定 <code>width/height</code> 属性，则此时 <code>padding</code> 不会撑开盒子大小。</p><h3 id="_1-8-外边距" tabindex="-1"><a class="header-anchor" href="#_1-8-外边距" aria-hidden="true">#</a> 1.8 外边距</h3><p><code>margin</code> 属性用于设置外边距，即控制盒子与盒子之间的距离。</p><ul><li><code>margin-left</code>: 左外边距</li><li><code>margin-right</code>: 右外边距</li><li><code>margin-top</code>: 上外边距</li><li><code>margin-bottotm</code>: 下外边距</li></ul><p><code>margin</code> 简写方式与 <code>padding</code> 一致。</p><h3 id="_1-9-外边距典型应用" tabindex="-1"><a class="header-anchor" href="#_1-9-外边距典型应用" aria-hidden="true">#</a> 1.9 外边距典型应用</h3><p>外边距可以让块级盒子 <strong>水平居中</strong>，但是必须满足两个条件：</p><ol><li>盒子必须指定宽度（width）</li><li>盒子左右的外边距都设置为 <code>auto</code></li></ol><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.header</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 960px<span class="token punctuation">;</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使行内元素或行内块元素水平居中</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_1-10-外边距合并" tabindex="-1"><a class="header-anchor" href="#_1-10-外边距合并" aria-hidden="true">#</a> 1.10 外边距合并</h3><h4 id="_1-相邻元素垂直外边距的合并" tabindex="-1"><a class="header-anchor" href="#_1-相邻元素垂直外边距的合并" aria-hidden="true">#</a> 1. 相邻元素垂直外边距的合并</h4><p>当上下相邻块元素相遇时，若上面的元素有下外边距，下面的元素有上外边距，则他们之间的垂直间距不是 <code>margin-bottotm</code> 与 <code>margin-top</code> 之和。取两个值中的较大者这种现象被称为相邻元素垂直外边距的合并。</p><h4 id="_2-嵌套块元素垂直外边距的塌陷" tabindex="-1"><a class="header-anchor" href="#_2-嵌套块元素垂直外边距的塌陷" aria-hidden="true">#</a> 2. 嵌套块元素垂直外边距的塌陷</h4><p>对于两个嵌套关系的块元素，父元素有上外边距同时子元素也有上外边距，此时父元素会塌陷较大的外边距值。</p><p>解决方案</p><ol><li>为父元素定义上边框</li><li>为父元素定义上内边距</li><li>为父元素添加 <code>overflow:hidden</code></li></ol><h3 id="_1-11-清除内外边距" tabindex="-1"><a class="header-anchor" href="#_1-11-清除内外边距" aria-hidden="true">#</a> 1.11 清除内外边距</h3><p>网页元素很多都带有默认内外边距，而且不同浏览器默认的也不一致，因此在布局前，要先清除网页元素的内外边距。</p><p>语法</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">*</span> <span class="token punctuation">{</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：行内元素为了照顾兼容性，尽量只设置左右内外边距，不要设置上下内外边距。但是转换为块级和行内块元素就可以设置。</p><h2 id="_12-ps-基本操作" tabindex="-1"><a class="header-anchor" href="#_12-ps-基本操作" aria-hidden="true">#</a> 12. PS 基本操作</h2><ul><li>文件-&gt;打开：打开测量的图片</li><li><kbd>Ctrl+r</kbd> ：打开标尺，或者视图-&gt;标尺</li><li>鼠标拖动标尺可将标尺移动到PS图片上</li><li>右击标尺，将单位改为像素</li><li><kbd>Ctrl+-</kbd>：放大/缩小视图</li><li>按住空格键，鼠标可以拖动PS视图</li><li>用选区拖动，可以测量大小</li><li><kbd>Ctrl+D</kbd> 可以取消选区，或者在旁边空白处点击一下也可以取消选区</li></ul><h2 id="_13-圆角边框" tabindex="-1"><a class="header-anchor" href="#_13-圆角边框" aria-hidden="true">#</a> 13. 圆角边框</h2><p>CSS3 新增 <strong>圆角边框</strong> 属性，盒子可以变成圆角。</p><p><code>border-radius</code> 属性用于设置元素的外边框圆角。</p><p>语法</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">border-radius</span><span class="token punctuation">:</span> length<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>原理</p><p>（椭）圆与边框的交集形成的圆角效果。</p><p>参数</p><ul><li>参数值可以为数值或百分比的形式</li><li>若是正方形，想要设置一个圆，则将数值修改为高度或者宽度的一般即可，或者直接写为 50%</li><li>若是矩形，设置为 height 的一半就可以做</li><li>简写属性，跟四个值，分别代表左上角、右上角、右下角、左下角</li><li>分开来写：<code>border-top-left-radius</code>、<code>border-top-right-radius</code>、<code>border-bottom-right-radius</code>、<code>border-bottom-left-radius</code></li></ul><h2 id="_14-盒子阴影" tabindex="-1"><a class="header-anchor" href="#_14-盒子阴影" aria-hidden="true">#</a> 14. 盒子阴影</h2><p>CSS3 新增盒子阴影，使用 <code>box-shadow</code> 属性。</p><p>语法</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">bxo-shadow</span><span class="token punctuation">:</span> h-shadow v-shadow blur spread color inset<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>h-shadow</td><td>必需，水平阴影的位置，允许负值</td></tr><tr><td>v-shadow</td><td>必需，垂直阴影的位置，允许负值</td></tr><tr><td>blur</td><td>可选，模糊距离</td></tr><tr><td>spread</td><td>可选，阴影的尺寸</td></tr><tr><td>color</td><td>可选，阴影的颜色</td></tr><tr><td>inset</td><td>可选，将外部阴影改为内部阴影（默认是外部阴影）</td></tr></tbody></table><p>注意：</p><ol><li>默认是外阴影，但是不可以写这个单词（outset）</li><li>盒子阴影不占空间，不会影响其他盒子排列</li></ol><h2 id="_15-文字阴影" tabindex="-1"><a class="header-anchor" href="#_15-文字阴影" aria-hidden="true">#</a> 15. 文字阴影</h2><p>CSS3 中，使用 <code>text-shadow</code> 属性设置文本阴影。</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>h-shadow</td><td>必需，水平阴影位置。允许负值。</td></tr><tr><td>v-shadow</td><td>必须，垂直阴影。允许负值。</td></tr><tr><td>blur</td><td>可选，模糊距离。</td></tr><tr><td>color</td><td>可选，阴影颜色。</td></tr></tbody></table><h2 id="_16-浮动-float" tabindex="-1"><a class="header-anchor" href="#_16-浮动-float" aria-hidden="true">#</a> 16. 浮动（float）</h2><h3 id="_1-1-传统网页布局方式" tabindex="-1"><a class="header-anchor" href="#_1-1-传统网页布局方式" aria-hidden="true">#</a> 1.1 传统网页布局方式</h3><p>网页布局的本质——用 CSS 来摆放盒子，把盒子放到相应位置。</p><p>CSS 提供了三种传统布局方式：</p><ul><li>普通流</li><li>浮动</li><li>定位</li></ul><h3 id="_1-2-标准流-普通流-文档流" tabindex="-1"><a class="header-anchor" href="#_1-2-标准流-普通流-文档流" aria-hidden="true">#</a> 1.2 标准流（普通流/文档流）</h3><p>所谓的标准流，就是标签按照规定好的默认方式排列。</p><ol><li>块级元素会独占一行，从上到下顺序排列 常用元素：div、hr、p、h1-h6、ul、ol、dl、form、table</li><li>行内元素会按照顺序，从左到右顺序排列，碰到父元素边缘则自动换行。 常用元素：span、a、i、em</li></ol><p>标准流是最基本的布局方式。</p><p>以上三种方式都是来摆放盒子的，盒子摆到合适位置，布局自然就完成了。</p><p>实际开发中，一个页面基本包含三种布局方式。</p><h3 id="_1-3-为什么需要浮动" tabindex="-1"><a class="header-anchor" href="#_1-3-为什么需要浮动" aria-hidden="true">#</a> 1.3 为什么需要浮动？</h3><p>很多布局效果，标准流没办法完成，此时就可以利用浮动完成布局。浮动可以改变元素标签默认排列方式。</p><p>浮动最典型应用：让多个块级元素一行显示。</p><p>网页布局第一准则：多个块级元素纵向排列找标准流，多个块级元素找浮动。</p><p>网页布局第二准则：先设置盒子大小，再设置盒子位置。</p><h3 id="_1-4-什么是浮动" tabindex="-1"><a class="header-anchor" href="#_1-4-什么是浮动" aria-hidden="true">#</a> 1.4 什么是浮动？</h3><p><code>float</code> 属性用于创建浮动框，将其移动到一边，直到左边缘或右边缘及包含块或另一个浮动框的边缘。</p><p>语法</p><div class="language-CSS line-numbers-mode" data-ext="CSS"><pre class="language-CSS"><code>选择器 { float: 属性值; }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>none</td><td>元素不浮动</td></tr><tr><td>left</td><td>元素向左浮动</td></tr><tr><td>right</td><td>元素向右浮动</td></tr></tbody></table><h3 id="_1-5-浮动特性-重点" tabindex="-1"><a class="header-anchor" href="#_1-5-浮动特性-重点" aria-hidden="true">#</a> 1.5 浮动特性（重点）</h3><p>加了浮动之后的元素，会具有一些特性。</p><ol><li>浮动元素会脱离标准流</li><li>浮动元素会一行内显示并且元素顶部对齐</li><li>浮动的元素会具有行内块元素的特性</li></ol><p><strong>重要特性</strong></p><ol><li><p>脱离文档流的控制（浮）移动到指定位置（动），脱标 脱离文档流的盒子，会漂浮在文档流的盒子上面，不占位置。</p></li><li><p>如果多个盒子都设置了浮动，则它们会按照属性值一行显示并且顶端对齐排列。 浮动的元素是相互贴在一起的（没有间隙），若父级宽度放不下盒子，多出的盒子会另起一行对齐。</p></li><li><p>浮动元素具有行内块元素特性。 任何元素都可以浮动，设置了后元素都具有行内块元素性质。</p><ul><li>若块级元素没有设置宽度，则默认和父级一样宽</li><li>浮动盒子中间无间隙，紧挨着</li><li>行内块元素同理</li></ul></li></ol><h3 id="_1-6-浮动元素经常和标准流父级元素搭配使用" tabindex="-1"><a class="header-anchor" href="#_1-6-浮动元素经常和标准流父级元素搭配使用" aria-hidden="true">#</a> 1.6 浮动元素经常和标准流父级元素搭配使用</h3><p>为了约束元素位置，一般采取：</p><p>先用标准流父元素上下排列位置，之后内部子元素采取浮动排列左右位置，符合网页布局第一准则。</p><h2 id="_2-常见网页布局" tabindex="-1"><a class="header-anchor" href="#_2-常见网页布局" aria-hidden="true">#</a> 2. 常见网页布局</h2><ol><li><p>浮动和标准流的父盒子搭配</p><p>先用标准流的父元素排列上下位置，之后内部子元素采取浮动排列左右位置。</p></li><li><p>一个元素浮动了，理论上其余兄弟元素也要浮动</p><p>一个盒子里有多个盒子，其中一个盒子浮动，其他兄弟也应该浮动，防止引起问题。</p><p>浮动的盒子只会影响浮动盒子后面的标准流，不会引起前面的标准流。</p></li></ol><h2 id="_3-清除浮动" tabindex="-1"><a class="header-anchor" href="#_3-清除浮动" aria-hidden="true">#</a> 3. 清除浮动</h2><h3 id="_3-1-为什么需要清除浮动" tabindex="-1"><a class="header-anchor" href="#_3-1-为什么需要清除浮动" aria-hidden="true">#</a> 3.1 为什么需要清除浮动</h3><p>由于父级盒子很多情况下，不方便给高度，当时盒子浮动又不占有位置，最后父级盒子高度为 0 时，就会影响下面的盒子，对后面元素排版产生影响。</p><h3 id="_3-2-清除浮动的本质" tabindex="-1"><a class="header-anchor" href="#_3-2-清除浮动的本质" aria-hidden="true">#</a> 3.2 清除浮动的本质</h3><ul><li>清除浮动的本质是清除浮动元素造成的影响</li><li>如果父盒子本身具有高度，则不需要清除浮动</li><li>清除浮动之后，父级会根据浮动的子盒子自动检测高度，父级有了高度，就不会影响下面的标准流了。</li></ul><h3 id="_3-3-清除浮动" tabindex="-1"><a class="header-anchor" href="#_3-3-清除浮动" aria-hidden="true">#</a> 3.3 清除浮动</h3><p>语法：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">选择器:</span> <span class="token punctuation">{</span>
  <span class="token property">clear</span><span class="token punctuation">:</span> 属性值<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>left</td><td>不允许左侧有浮动元素</td></tr><tr><td>right</td><td>不允许右侧有浮动元素</td></tr><tr><td>both</td><td>同时清除左右两侧浮动</td></tr></tbody></table><p>清除浮动策略：闭合浮动</p><p>方法：</p><ol><li><strong>额外标签法（隔墙法）</strong>，是 W3C 推荐的方法</li><li>父级添加 overflow 属性</li><li>父级添加 after 伪元素</li><li>父级添加双伪元素</li></ol><h3 id="_3-4-清除浮动-1-——额外标签法" tabindex="-1"><a class="header-anchor" href="#_3-4-清除浮动-1-——额外标签法" aria-hidden="true">#</a> 3.4 清除浮动（1）——额外标签法</h3><p>也成为隔墙法，是 W3C 推荐的方法。</p><p>额外标签法是在最后一个浮动元素末尾添加一个 <strong>空块级元素</strong>，给其赋以属性 <code>clear:both;</code>。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
  <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>clear<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>优点：通俗易懂，书写方便</li><li>缺点：添加许多无意义的标签，结构化差</li></ul><p>总结</p><ol><li><p>清除浮动的本质</p><p>清除浮动的本质是清除浮动元素脱离标准流造成的影响</p></li><li><p>清除浮动的策略</p><p><strong>闭合浮动</strong>，只让浮动在父盒子内部影响，不影响父盒子外面的其他盒子。</p></li><li><p>使用场景</p><p>实际开发中可能会遇到，但是不常用。</p></li></ol><h3 id="_3-5-清除浮动-2-——父级添加-overflow" tabindex="-1"><a class="header-anchor" href="#_3-5-清除浮动-2-——父级添加-overflow" aria-hidden="true">#</a> 3.5 清除浮动（2）——父级添加 overflow</h3><p>可以给父级添加 <code>overflow</code> 属性，将其属性设置为 <code>hidden</code>、<code>auto</code>或<code>scroll</code>。</p><p>注意是给父元素添加代码：</p><ul><li>优点：代码简洁</li><li>缺点：无法显示溢出部分</li></ul><h3 id="_3-6-清除浮动-3-——-after-伪元素法" tabindex="-1"><a class="header-anchor" href="#_3-6-清除浮动-3-——-after-伪元素法" aria-hidden="true">#</a> 3.6 清除浮动（3）——:after 伪元素法</h3><p>实际上也是额外标签法的一种。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.clearfix</span> <span class="token punctuation">{</span>
  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>
  <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.clearfix</span> <span class="token punctuation">{</span>
  <span class="token comment">/*IE6、7专有*/</span>
  *<span class="token property">zoom</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-7-清除浮动-4-——双伪元素法" tabindex="-1"><a class="header-anchor" href="#_3-7-清除浮动-4-——双伪元素法" aria-hidden="true">#</a> 3.7 清除浮动（4）——双伪元素法</h3><p>语法</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.clearfix::before,
.clearfix::after</span> <span class="token punctuation">{</span>
  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> table<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.clearfix::after</span> <span class="token punctuation">{</span>
  <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.clearfix</span> <span class="token punctuation">{</span>
  *<span class="token property">zoom</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>优点：代码更简洁</li><li>缺点：照顾低版本浏览器</li><li>代表网站：小米、腾讯</li></ul><h3 id="_3-8-清除浮动总结" tabindex="-1"><a class="header-anchor" href="#_3-8-清除浮动总结" aria-hidden="true">#</a> 3.8 清除浮动总结</h3><p>为什么需要清除浮动？</p><ol><li>父级没高度</li><li>子盒子浮动了</li><li>影响下面布局了，应该清除浮动。</li></ol><h2 id="_4-ps-切图" tabindex="-1"><a class="header-anchor" href="#_4-ps-切图" aria-hidden="true">#</a> 4. PS 切图</h2><h3 id="_4-1-常见的图片格式" tabindex="-1"><a class="header-anchor" href="#_4-1-常见的图片格式" aria-hidden="true">#</a> 4.1 常见的图片格式</h3><ol><li>JS 图像格式：JPEG（JPG）对色彩的信息保留较好，高清，颜色较多，产品类的图片经常用到 jpg 格式的。</li><li>gif 图像格式，GIF 格式最多只能存储 256 色，所以通常用来显示简单图形及字体，但是可以保存透明背景和动画效果，实际上经常用于一些图片小动画效果。</li><li>png 图像格式是一种新兴的网络图形格式，结合了 GIF 和 JPEG 的特点，具有存储形式的特点，能够保存透明背景。如果想要切成背景透明的图片，请先择 png 格式。</li><li>PSD 图像格式是 Photoshop 的专用格式，里面可以存放图层、通道、遮罩等多种设计稿。对我们前端人员来说，最大的优点是我们可以上面复制文字，获得图片，还可以测量大小和距离。</li></ol><h3 id="_4-2-图层切图" tabindex="-1"><a class="header-anchor" href="#_4-2-图层切图" aria-hidden="true">#</a> 4.2 图层切图</h3><p>最简单的切图方式：鼠标点击设置为移动工具-&gt;点击图层-&gt;快速导出为 PNG。</p><h3 id="_4-3-合并图层" tabindex="-1"><a class="header-anchor" href="#_4-3-合并图层" aria-hidden="true">#</a> 4.3 合并图层</h3><p>但是很多情况下，需要合并图层并导出：</p><ol><li>按住 <kbd>shift</kbd> 选中需要合并的图层：图层菜单-&gt;合并图层（<kbd>Ctrl+E</kbd>）</li><li>右击-&gt;快速导出为 PNG</li></ol><p>最好的方法是：与美工设计沟通。</p><h3 id="_4-4-切片切图" tabindex="-1"><a class="header-anchor" href="#_4-4-切片切图" aria-hidden="true">#</a> 4.4 切片切图</h3><ol><li><p>利用切片工具手动划出切片范围</p><p>若要切出透明 logo.png，则需要将图层下拉至最下面，然后点击小眼睛使背景消失。</p></li><li><p>文件菜单-&gt;导出-&gt;存储为 web 设备所用格式-&gt;选择我们要的图片格式-&gt;存储。</p></li></ol><h3 id="_4-5-ps-cutterman-插件切图" tabindex="-1"><a class="header-anchor" href="#_4-5-ps-cutterman-插件切图" aria-hidden="true">#</a> 4.5 PS Cutterman 插件切图</h3><p>Cutterman 是一款在 PS 中的插件，能够自动将你需要的图层进行输出，以替代传统的手动“导出为 web 所用格式”以及使用切片工具进行挨个切图的繁琐流程。</p><h2 id="_5-学成在线案例" tabindex="-1"><a class="header-anchor" href="#_5-学成在线案例" aria-hidden="true">#</a> 5. 学成在线案例</h2><h3 id="_5-1-准备素材和工具" tabindex="-1"><a class="header-anchor" href="#_5-1-准备素材和工具" aria-hidden="true">#</a> 5.1 准备素材和工具</h3><h3 id="_5-2-结构与样式分离" tabindex="-1"><a class="header-anchor" href="#_5-2-结构与样式分离" aria-hidden="true">#</a> 5.2 结构与样式分离</h3><h3 id="_5-3-css-属性书写顺序-重点" tabindex="-1"><a class="header-anchor" href="#_5-3-css-属性书写顺序-重点" aria-hidden="true">#</a> 5.3 CSS 属性书写顺序（重点）</h3><ol><li>布局定位属性</li><li>自身属性</li><li>文本属性</li><li>其他属性</li></ol><h3 id="_5-4-开始" tabindex="-1"><a class="header-anchor" href="#_5-4-开始" aria-hidden="true">#</a> 5.4 开始</h3><p>1.定版心</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.w</span> <span class="token punctuation">{</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> 1200px auto<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.导航栏注意点：</p><p>实际开发中，不会直接用链接 a 而是用 li 包含链接（li+a）的做法。</p><ol><li><p>li+a 语义更清晰，一看就是有条理的列表型内容。</p></li><li><p>如果直接用 a，搜索引擎容易辨别为有堆砌关键字嫌疑（故意堆砌关键字容易被搜索引擎有降权的风险），从而影响网站排名。</p></li><li><p>让导航栏一行显示，给 <code>li</code> 加浮动，因为 li 是块级元素，需要一行显示。</p></li><li><p>这个 nav 导航栏可以不给宽度，将来可以继续添加其余文字。</p></li><li><p>因为导航栏里面文字不一样多，所以最好给链接 a 左右 padding 撑开盒子，而不是指定宽度。</p></li><li><p>浮动的盒子不会有外边距合并的问题.</p></li></ol><h2 id="定位" tabindex="-1"><a class="header-anchor" href="#定位" aria-hidden="true">#</a> 定位</h2><h3 id="_1-为什么需要定位" tabindex="-1"><a class="header-anchor" href="#_1-为什么需要定位" aria-hidden="true">#</a> 1. 为什么需要定位</h3><p>一些固定盒子的效果，标准流或浮动都无法快速实现，此时需要定位来实现。所以：</p><ol><li><p>浮动可以让多个块级盒子一行没有缝隙排列显示，经常用于横向排列盒子</p></li><li><p>定位则是可以让盒子自由的在某个盒子内移动位置或者固定屏幕中某个位置，并且可以压住其他盒子。</p></li></ol><h3 id="_2-定位组成" tabindex="-1"><a class="header-anchor" href="#_2-定位组成" aria-hidden="true">#</a> 2. 定位组成</h3><p>定位：将盒子定在某一个位置，所以定位也是在摆放盒子，按照定位的方式移动盒子。定位=定位模式+边偏移。</p><p>定位模式用于指定一个元素在文档中的定位方式。边偏移则决定了该元素的最终位置。</p><h4 id="_2-1-定位模式" tabindex="-1"><a class="header-anchor" href="#_2-1-定位模式" aria-hidden="true">#</a> 2.1 定位模式</h4><p>定位模式决定元素的定位方式，它通过 CSS 的 position 属性来设置，其值可以分为四个值：</p><table><thead><tr><th>值</th><th>语义</th></tr></thead><tbody><tr><td>static</td><td>静态定位</td></tr><tr><td>relative</td><td>相对定位</td></tr><tr><td>absolute</td><td>绝对定位</td></tr><tr><td>fixed</td><td>固定定位</td></tr></tbody></table><h4 id="_2-2-边偏移" tabindex="-1"><a class="header-anchor" href="#_2-2-边偏移" aria-hidden="true">#</a> 2.2 边偏移</h4><p>边偏移就是定位的盒子移动到最终位置。有 top， bottom， left 和 right 4 个属性</p><table><thead><tr><th>边偏移属性</th><th>示例</th><th>描述</th></tr></thead><tbody><tr><td>top</td><td><code>top:80px</code></td><td>顶端偏移量，定义元素相对于其父元素上边线的距离。</td></tr><tr><td>bottom</td><td><code>bottom: 80px</code></td><td>底部偏移量，定义元素相对于其父元素下边线的距离。</td></tr><tr><td>left</td><td><code>left： 80px</code></td><td>左侧偏移量，定义元素相对于其父元素左边线的距离。</td></tr><tr><td>right</td><td><code>right: 80px</code></td><td>右侧偏移量，定义元素相对于其父元素右边线的距离。</td></tr></tbody></table><h3 id="_3-静态定位-static-了解" tabindex="-1"><a class="header-anchor" href="#_3-静态定位-static-了解" aria-hidden="true">#</a> 3. 静态定位 static (了解)</h3><p>静态定位是元素的默认定位方式，无定位的意思。语法：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">选择器</span> <span class="token punctuation">{</span>
  <span class="token property">position</span><span class="token punctuation">:</span> static<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>静态定位按照标准流特性摆放位置，它没有边偏移静态定位在布局时很少用到。</p><h3 id="_4-相对定位-relative-重要" tabindex="-1"><a class="header-anchor" href="#_4-相对定位-relative-重要" aria-hidden="true">#</a> 4. 相对定位 relative（重要）</h3><p>相对定位是元素在移动位置的时候，是相对于它原来的位置来说的（自恋型）。</p><p>语法：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">选择器</span> <span class="token punctuation">{</span>
  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>相对定位的特点：（务必记住）</strong></p><ol><li><p>它是相对于自己原来的位置来移动的（移动位置的时候参照点是自己原来的位置）。</p></li><li><p>原来在标准流的位置继续占有，后面的盒子仍然以标准流的方式对待它。（不脱标，继续保留原来位置因此，相对定位并没有脱标。它最典型的应用是给绝对定位当爹的。</p></li></ol><h3 id="_5-绝对定位-absolute-重要" tabindex="-1"><a class="header-anchor" href="#_5-绝对定位-absolute-重要" aria-hidden="true">#</a> 5. 绝对定位 absolute （重要）</h3><p>绝对定位是元素在移动位置的时候，是相对于它祖先元素来说的（拼爹型）。</p><p>语法：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">选择器</span> <span class="token punctuation">{</span>
  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>绝对定位的特点： （务必记住）</p><ol><li><p>如果 <strong>没有祖先元素</strong> 或者 <strong>祖先元素没有定位</strong>，则以 <strong>浏览器</strong> 为准定位（ Document 文档）。</p></li><li><p>如果祖先元素有定位（相对、绝对、固定定位） ，则以最近一级的有定位祖先元素为参考点移动位置。</p></li><li><p>绝对定位不再占有原先的位置。（脱标）</p></li></ol><h3 id="_6-子绝父相的由来" tabindex="-1"><a class="header-anchor" href="#_6-子绝父相的由来" aria-hidden="true">#</a> 6. 子绝父相的由来</h3><p>弄清楚这个口诀，就明白了绝对定位和相对定位的使用场景。</p><p>这个“子绝父相”太重要了，是我们学习定位的口诀，是定位中最常用的一种方式这句话的意思是：子级是绝对定位的话，父级要用相对定位</p><ul><li><p>子级绝对定位，不会占有位置，可以放到父盒子里面的任何一个地方，不会影响其他的兄弟盒子。</p></li><li><p>父盒子需要加定位限制子盒子在父盒子内显示。</p></li><li><p>父盒子布局时，需要占有位置，因此父亲只能是相对定位。</p><p>这就是子绝父相的由来，所以相对定位经常用来作为绝对定位的父级。 总结：因为父级需要占有位置，因此是相对定位，子盒子不需要占有位置，则是绝对定位</p></li></ul><h3 id="_7-固定定位-fixed-重要" tabindex="-1"><a class="header-anchor" href="#_7-固定定位-fixed-重要" aria-hidden="true">#</a> 7. 固定定位 fixed （重要）</h3><p>固定定位是元素固定于浏览器可视区的位置。主要使用场景：可以在浏览器页面滚动时元素的位置不会改变。</p><p>语法：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">选择器</span> <span class="token punctuation">{</span>
  <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>固定定位的特点： （务必记住）</p><ol><li>以浏览器的可视窗口为参照点移动元素。 <ul><li>跟父元素没有任何关系</li><li>不随滚动条滚动</li></ul></li><li>固定定位不 占有原先的位置。 固定定位也是脱标的，其实固定定位也可以看做是一种特殊的绝对定位。</li></ol><p>固定定位小技巧：固定在版心右侧位置。</p><ol><li>让固定定位的盒子 left： 50%，走到浏览器可视区（也可以看做版心）的一半位置。</li><li>让固定定位的盒子 margin—left）板心宽度的一半距离。多走版心宽度的一半位置就可以让固定定位的盒子贴着版心右侧对弃了</li></ol><h3 id="_8-粘性定位-sticky-了解" tabindex="-1"><a class="header-anchor" href="#_8-粘性定位-sticky-了解" aria-hidden="true">#</a> 8. 粘性定位 sticky (了解)</h3><p>粘性定位可以被认为是相对定位和固定定位的混合。Sticky 粘性的 语法：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">选择器</span> <span class="token punctuation">{</span>
  <span class="token property">position</span><span class="token punctuation">:</span> sticky<span class="token punctuation">;</span>
  <span class="token property">top</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>粘性定位的特点：</p><ol><li>以浏览器的可视窗口为参照点移动元素（固定定位特点）</li><li>粘性定位占有原先的位置（相对定位特点）</li><li>必须添加 top， left， right， bottom 其中一个才有效跟页面滚动搭配使用。兼容性较差， IE 不支持。</li></ol><h3 id="_9-定位叠放次序-z-index" tabindex="-1"><a class="header-anchor" href="#_9-定位叠放次序-z-index" aria-hidden="true">#</a> 9. 定位叠放次序 z-index</h3><p>在使用定位布局时，可能会出现盒子重叠的情况。此时，可以使用 z—index 来控制盒子的前后次序（z 轴）</p><p>语法：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">选择器</span> <span class="token punctuation">{</span>
  <span class="token property">z-index</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>数值可以是正整数、负整数或 0，默认是 auto ，数值越大，盒子越靠上</li><li>如果属性值相同，则按照书写顺序，后来居上</li><li>数字后面不能加单位</li><li>只有定位的盒子才有 z—index 属性</li></ul><h3 id="_10-定位的拓展" tabindex="-1"><a class="header-anchor" href="#_10-定位的拓展" aria-hidden="true">#</a> 10. 定位的拓展</h3><h4 id="_10-1-绝对定位的盒子居中" tabindex="-1"><a class="header-anchor" href="#_10-1-绝对定位的盒子居中" aria-hidden="true">#</a> 10.1 绝对定位的盒子居中</h4><p>加了绝对定位的盒子不能通过 margin：0auto 水平居中，但是可以通过以下计算方法实现水平和垂直居中。</p><ul><li>left： 50% ：让盒子的左侧移动到父级元素的水平中心位置。</li><li>margin—left：—100px； ：让盒子向左移动自身宽度的一半。</li></ul><h4 id="_10-2-定位特殊特性" tabindex="-1"><a class="header-anchor" href="#_10-2-定位特殊特性" aria-hidden="true">#</a> 10.2 定位特殊特性</h4><p>绝对定位和固定定位也和浮动类似。</p><ol><li>行内元素添加绝对或者固定定位，可以直接设置高度和完度。</li><li>块级元素添加绝对或者固定定位，如果不给宽度或者高度，默认大小是内容的大小。</li></ol><h4 id="_10-3-脱标的盒子不会触发外边距塌陷" tabindex="-1"><a class="header-anchor" href="#_10-3-脱标的盒子不会触发外边距塌陷" aria-hidden="true">#</a> 10.3 脱标的盒子不会触发外边距塌陷</h4><p>浮动元素、绝对定位（固定定位）元素的都不会触发外边距合并的问题。</p><h4 id="_10-4-绝对定位-固定定位-会完全压住盒子" tabindex="-1"><a class="header-anchor" href="#_10-4-绝对定位-固定定位-会完全压住盒子" aria-hidden="true">#</a> 10.4 绝对定位（固定定位）会完全压住盒子</h4><p>浮动元素不同，只会压住它下面标准流的盒子，但是不会压住下面标准流盒子里面的文字（图片）但是绝对定位（固定定位）会压住下面标准流所有的内容。</p><p>浮动之所以不会压住文字，因为浮动产生的目的最初是为了做文字环绕效果的。文字会围绕浮动元素</p><h3 id="_11-网页布局总结" tabindex="-1"><a class="header-anchor" href="#_11-网页布局总结" aria-hidden="true">#</a> 11. 网页布局总结</h3><p>通过盒子模型, 清楚知道大部分 html 标签是一个盒子。 通过 CSS 浮动、定位可以让每个盒子排列成为网页。 一个完整的网页, 是标准流、浮动、定位一起完成布局的, 每个都有自己的专门用法。</p><ol><li>标准流 可以让盒子上下排列或者左右排列, 垂直的块级盒子显示就用标准流布局。</li><li>浮动 可以让多个块级元素一行显示或者左右对齐盒子, 多个块级盒子水平显示就用浮动布局。</li><li>定位 定位最大的特点是有层叠的概念, 就是可以让多个盒子前后暑压来显示。如果元素自由在某个盒子内移动就用定位布局。</li></ol><h3 id="_12-元素的显示与隐藏" tabindex="-1"><a class="header-anchor" href="#_12-元素的显示与隐藏" aria-hidden="true">#</a> 12. 元素的显示与隐藏</h3><p>类似网站广告，当我们点击关闭就不见了，但是我们重新刷新页面，会重新出现！本质：让一个元素在页面中隐藏或者显示出来。</p><h4 id="_12-1-display-属性" tabindex="-1"><a class="header-anchor" href="#_12-1-display-属性" aria-hidden="true">#</a> 12.1 display 属性</h4><ul><li><code>display</code> 属性用于设置一个元素应如何显示。</li><li><code>display： none;</code> 隐藏对象</li><li><code>display ： block;</code> 除了转换为块级元素之外，同时还有显示元素的意思 display 隐藏元素后，不再占有原来的位置。</li></ul><p>后面应用及其广泛，搭配 JS 可以做很多的网页特效。</p><h4 id="_12-2-visibility-可见性" tabindex="-1"><a class="header-anchor" href="#_12-2-visibility-可见性" aria-hidden="true">#</a> 12.2 visibility 可见性</h4><ul><li>visibility 属性用于指定一个元素应可见还是隐藏。- - visibility : visible;元素可视</li><li>visibility : hidden;元素隐藏</li><li>visibility 隐藏元素后，继续占有原来的位置</li></ul><p>如果隐藏元素想要原来位置，就用 <code>visibility ： hidden</code> 如果隐藏元素不想要原来位置，就用 <code>display ： none</code> （用处更多重点）</p><h4 id="_12-3-overflow-溢出" tabindex="-1"><a class="header-anchor" href="#_12-3-overflow-溢出" aria-hidden="true">#</a> 12.3 overflow 溢出</h4><p>overflow 属性指定了如果内容溢出一个元素的框（超过其指定高度及宽度）时，会发生什么。</p><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>visible</td><td>不剪切内容也不添加滚动条</td></tr><tr><td>hidden</td><td>不显示超过对象尺寸的内容</td></tr><tr><td>scroll</td><td>超出的部分隐藏掉不管超出内容否，总是显示滚动条</td></tr><tr><td>auto</td><td>超出自动显示滚动条，不超出不显示滚动条</td></tr></tbody></table><p>一般情况下，我们都不想让溢出的内容显示出来，因为溢出的部分会影响布局。但是如果有定位的盒子，请慎用<code>overflowhidden</code> 因为它会隐藏多余的部分。</p><h2 id="css-高级" tabindex="-1"><a class="header-anchor" href="#css-高级" aria-hidden="true">#</a> CSS 高级</h2><h3 id="_1-1-精灵图" tabindex="-1"><a class="header-anchor" href="#_1-1-精灵图" aria-hidden="true">#</a> 1.1 精灵图</h3><p>一个网页中往往会应用很多小的背景图像作为修饰，当网页中的图像过多时，服务器就会频繁地接收和发送请求图片，造成服务器请求压力过大，这将大大降低页面的加载速度。</p><p>因此，为了有效地减少服务器接收和发送请求的次数，提高页面的加载速度，出现了 CSS 精灵技术（也称 CSS Sprites. CSS 雪碧）。</p><h3 id="_1-2-精灵图的使用" tabindex="-1"><a class="header-anchor" href="#_1-2-精灵图的使用" aria-hidden="true">#</a> 1.2 精灵图的使用</h3><p>使用精灵图核心总结：</p><ol><li>精灵图主要针对于小的背景图片使用。</li><li>主要借助于背景位置来实现———background—position.</li><li>一般情况下精灵图都是负值。（千万注意网页中的坐标： x 轴右边走是正值，左边走是负值， y 轴同理。）</li></ol><h3 id="_2-1-字体图标的产生" tabindex="-1"><a class="header-anchor" href="#_2-1-字体图标的产生" aria-hidden="true">#</a> 2.1 字体图标的产生</h3><p>字体图标使用场景：主要用于显示网页中通用、常用的一些小图标精灵图是有诸多优点的，但是缺点很明显。</p><ol><li>图片文件还是比较大的。</li><li>图片本身放大和缩小会失真。</li><li>一旦图片制作完毕想要更换非常复杂。 此时，有一种技术的出现很好的解决了以上问题，就是字体图标 iconfont 字体图标可以为前端工程师提供一种方便高效的图标使用方式，展示的是图标，本质属于字体。</li></ol><h3 id="_2-2-字体图标的优点" tabindex="-1"><a class="header-anchor" href="#_2-2-字体图标的优点" aria-hidden="true">#</a> 2.2 字体图标的优点</h3><p>轻量级：一个图标字体要比一系列的图像要小。一旦字体加载了，图标就会马上渲染出来，减少了服务器请求灵活性：本质其实是文字，可以很随意的改变颜色、产生阴影、透明效果、旋转等</p><p>兼容性：几乎支持所有的浏览器，请放心使用 注意：字体图标不能替代精灵技术，只是对工作中图标部分技术的提升和优化。</p><p>总结：</p><ol><li>如果遇到一些结构和样式比较简单的小图标，就用字体图标。</li><li>如果遇到一些结构和样式复杂一点的小图片，就用精灵图。</li></ol><h3 id="_2-3-字体图标的下载" tabindex="-1"><a class="header-anchor" href="#_2-3-字体图标的下载" aria-hidden="true">#</a> 2.3 字体图标的下载</h3>`,369),Z={href:"http://icomoon.io",target:"_blank",rel:"noopener noreferrer"},$=a("p",null,"IcoMoon 成立于 2011 年，推出了第一个自定义图标字体生成器，它允许用户选择所需要的图标，使它们成一字型。该字库内容种类繁多，非常全面，唯一的遗憾是国外服务器，打开网速较慢。",-1),aa={href:"http://www.iconfont.cn",target:"_blank",rel:"noopener noreferrer"},na=d(`<h4 id="_2-4-iconmoon-字体图标使用方法" tabindex="-1"><a class="header-anchor" href="#_2-4-iconmoon-字体图标使用方法" aria-hidden="true">#</a> 2.4 IconMoon 字体图标使用方法</h4><ol><li>选择字体并下载</li><li>将下载文件中的 fonts 文件夹复制到项目根目录下</li><li>字体声明，将 <code>style.css</code> 文件中的开头的字体声明代码赋值到 html 中</li><li>给 <code>span</code> 声明字体：<div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">span</span> <span class="token punctuation">{</span>
  <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">&quot;icomoon&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>打开 <code>demo.html</code>，复制页面中的方框图标到 html 代码中即可。</li></ol><p>如何更新/添加字体图标？</p><p>上传 <code>selections.json</code>，添加字体图标，重新生成。下载，更换 <code>@font-face</code> 内容。</p><h3 id="_3-css-三角图形" tabindex="-1"><a class="header-anchor" href="#_3-css-三角图形" aria-hidden="true">#</a> 3. CSS 三角图形</h3><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.box1</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">border</span><span class="token punctuation">:</span> 10px solid transparent<span class="token punctuation">;</span>
  <span class="token property">border-left-color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>
  <span class="token comment">/* 照顾兼容性 */</span>
  <span class="token property">line-height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-css-用户界面样式" tabindex="-1"><a class="header-anchor" href="#_4-css-用户界面样式" aria-hidden="true">#</a> 4. CSS 用户界面样式</h3><h4 id="_4-1-鼠标样式-cursor" tabindex="-1"><a class="header-anchor" href="#_4-1-鼠标样式-cursor" aria-hidden="true">#</a> 4.1 鼠标样式 cursor</h4><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">cursor</span><span class="token punctuation">:</span> default | pointer | move | text | not-allowed<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_4-2-取消表单轮廓和文本域缩放" tabindex="-1"><a class="header-anchor" href="#_4-2-取消表单轮廓和文本域缩放" aria-hidden="true">#</a> 4.2 取消表单轮廓和文本域缩放</h4><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">input</span> <span class="token punctuation">{</span>
  <span class="token property">outline</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">textarea</span> <span class="token punctuation">{</span>
  <span class="token property">outline</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
  <span class="token property">resize</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-vertical-align-的应用" tabindex="-1"><a class="header-anchor" href="#_5-vertical-align-的应用" aria-hidden="true">#</a> 5. vertical-align 的应用</h3><p><code>vertical-align</code> 指定行内/行内块元素的元素的垂直对齐方式。</p><h4 id="_5-1-图片、表单和文字对齐-vertical-align" tabindex="-1"><a class="header-anchor" href="#_5-1-图片、表单和文字对齐-vertical-align" aria-hidden="true">#</a> 5.1 图片、表单和文字对齐 vertical-align</h4><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">img</span> <span class="token punctuation">{</span>
  <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">li</span> <span class="token punctuation">{</span>
  <span class="token property">disaplay</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>
  <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-2-解决图片底部默认空白缝隙问题" tabindex="-1"><a class="header-anchor" href="#_5-2-解决图片底部默认空白缝隙问题" aria-hidden="true">#</a> 5.2 解决图片底部默认空白缝隙问题</h4><p>bug ：图片底侧会有一个空白缝隙，原因是行内块元素会和文字的基线对齐。主要解决方法有两种：</p><ol><li>给图片添加 <code>vertical—align: middle topl bottom;</code> 等。（提倡使用的）</li><li>把图片转换为块级元素 <code>display: block；</code></li></ol><h3 id="_6-溢出的文字省略号显示" tabindex="-1"><a class="header-anchor" href="#_6-溢出的文字省略号显示" aria-hidden="true">#</a> 6. 溢出的文字省略号显示</h3><h4 id="_6-1-单行文本溢出显示省略号—必须满足三个条件" tabindex="-1"><a class="header-anchor" href="#_6-1-单行文本溢出显示省略号—必须满足三个条件" aria-hidden="true">#</a> 6.1 单行文本溢出显示省略号—必须满足三个条件</h4><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/*1·先强制一行内显示文本*/</span>
<span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span>
默认normal 自动换行）
<span class="token comment">/*2·超出的部分隐藏*/</span>
<span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
<span class="token comment">/*3.文字用省略号替代超出的部分*/</span>
<span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-margin-负值巧妙利用" tabindex="-1"><a class="header-anchor" href="#_7-margin-负值巧妙利用" aria-hidden="true">#</a> 7. margin 负值巧妙利用</h3><ol><li><p>解决并排盒子之间的边框宽度加倍问题。 原理：让每个盒子压住前面的盒子，边框叠加。</p></li><li><p>鼠标移动边框颜色变化效果。</p></li></ol><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/*如果盒子没有定位，则鼠标经过添加相对定位即可*/</span>
<span class="token selector">ul li:hover</span> <span class="token punctuation">{</span>
  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid orange<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*若li都有定位，则使用 z-index 提高层级*/</span>
<span class="token selector">ul li</span> <span class="token punctuation">{</span>
  <span class="token property">z-index</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid orange<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-文字围绕浮动元素巧妙运用" tabindex="-1"><a class="header-anchor" href="#_8-文字围绕浮动元素巧妙运用" aria-hidden="true">#</a> 8. 文字围绕浮动元素巧妙运用</h3><p>原理：浮动元素不会遮住文字。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">div</span> <span class="token punctuation">{</span>
  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-行内块元素巧妙运用" tabindex="-1"><a class="header-anchor" href="#_9-行内块元素巧妙运用" aria-hidden="true">#</a> 9. 行内块元素巧妙运用</h3><p>行内块元素布局当前页码和 <code>pre</code>，<code>next</code>盒子，使用 <code>text-align: center</code> 居中。</p><h3 id="_10-css-初始化" tabindex="-1"><a class="header-anchor" href="#_10-css-初始化" aria-hidden="true">#</a> 10. CSS 初始化</h3><p>不同浏览器对有些标签的默认值是不同的，为了消除不同浏览器对 HTML 文本呈现的差异，照顾浏览器的兼容，我们需要对 CSS 初始化</p><p>简单理解： CSS 初始化是指重设浏览器的样式。（也称为 CSS reset ）每个网页都必须首先进行 CSS 初始化。 这里我们以京东 css 初始化代码为例。</p><p>Unicode 编码字体： 把中文字体的名称用相应的 Unicode 编码来代替，这样就可以有效的避免浏览器解释 CSS 代码时候出现乱码的问题。</p><p>比如： 黑体：<code>\\9ED1\\4F53</code> 宋体：<code>\\5B8B\\4F53</code> 微软雅黑：<code>\\5FAE\\8F6F196C519ED1</code></p>`,34);function sa(ea,ta){const t=l("font"),i=l("big"),c=l("ExternalLinkIcon");return p(),r("div",null,[h,s(t,{color:"red",size:"4"},{default:e(()=>[n("CSS")]),_:1}),n(" 是"),s(t,{color:"red",size:"4"},{default:e(()=>[n(" 层叠样式表（Cascading Style Sheets）")]),_:1}),n("的简称。"),v,b,m,k,s(t,{color:"red",size:"4"},{default:e(()=>[n("CSS 规则由两个部分组成：选择器和一条或多条声明。")]),_:1}),g,s(t,{color:"red",size:"4"},{default:e(()=>[n("语法")]),_:1}),_,s(t,{color:"green",size:"4"},{default:e(()=>[n("优点")]),_:1}),x,s(t,{color:"blue",size:"4"},{default:e(()=>[n("缺点")]),_:1}),f,y,S,s(t,{color:"red",size:"4"},{default:e(()=>[n("语法")]),_:1}),C,w,s(t,{color:"red",size:"4"},{default:e(()=>[n("注意")]),_:1}),z,s(t,{color:"red",size:"4"},{default:e(()=>[n("id 选择器与类选择器的区别")]),_:1}),M,L,s(t,{color:"red",size:"4"},{default:e(()=>[n("语法")]),_:1}),H,s(t,{color:"red",size:"4"},{default:e(()=>[n("实际开发中，更常用数字来表示加粗或变细")]),_:1}),n("。"),T,n("为"),q,n("，"),E,n(" 为 "),P,n("。"),F,s(t,{color:"red",size:"4"},{default:e(()=>[n("注意：平常很少给字体加斜体，而是给斜体标签（em,i）给位不倾斜字体。")]),_:1}),I,G,s(t,{color:"green",size:"4"},{default:e(()=>[n("规则")]),_:1}),B,s(t,{color:"red",size:"4"},{default:e(()=>[n("属性值")]),_:1}),D,s(t,{color:"green",size:"4"},{default:e(()=>[n("引入格式")]),_:1}),J,a("p",null,[s(i,null,{default:e(()=>[n("1."),N]),_:1})]),V,a("p",null,[s(i,null,{default:e(()=>[n("2. "),j]),_:1})]),A,a("p",null,[s(i,null,{default:e(()=>[n("3. "),U]),_:1})]),W,a("p",null,[s(i,null,{default:e(()=>[n("4. "),O]),_:1})]),R,a("p",null,[s(i,null,{default:e(()=>[n("5. "),X]),_:1})]),Y,a("p",null,[s(i,null,{default:e(()=>[n("6. "),K]),_:1})]),Q,a("p",null,[n("推荐下载网站： icomoon 字库 "),a("a",Z,[n("http://icomoon.io"),s(c)])]),$,a("p",null,[n("阿里 iconfont 字库 "),a("a",aa,[n("http://www.iconfont.cn"),s(c)]),n(" 这个是阿里妈妈 M2UX 的一个 iconfont 字体图标字库，包含了淘宝图标库和阿里妈妈图标库。可以使用 Al 制作图标上传生成。重点是，免费！")]),na])}const la=o(u,[["render",sa],["__file","css.html.vue"]]);export{la as default};
