import{_ as t}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c as n,a as s,b as l,d as c,e as a,r as i}from"./app.d1f70aa1.js";const r={},d=a('<h1 id="计算机网络" tabindex="-1"><a class="header-anchor" href="#计算机网络" aria-hidden="true">#</a> 计算机网络</h1><h2 id="一、计算机概述" tabindex="-1"><a class="header-anchor" href="#一、计算机概述" aria-hidden="true">#</a> 一、计算机概述</h2><h3 id="_1、各种网络" tabindex="-1"><a class="header-anchor" href="#_1、各种网络" aria-hidden="true">#</a> 1、各种网络</h3><ul><li>网络(<code>Network</code>)由若干**结点(Node)<strong>和连接这些结点的</strong>链路(Link)**组成</li><li>多个网络还可以通过路由器互连起来，这样就构成了一个覆盖范围更大的网络，即互联网(互连网)。因此，互联网是&quot;<strong>网络的网络(Network of Networks)</strong>&quot;</li><li>**因特网(Internet)**是世界上最大的互连网络【小写<code>i</code>的<code>internet</code>是通用名词，互连的网络都叫<code>internet</code>】</li></ul><h3 id="_2、isp" tabindex="-1"><a class="header-anchor" href="#_2、isp" aria-hidden="true">#</a> 2、ISP</h3><blockquote><p>因特网服务提供者(<code>Internet Service Provider</code>)</p></blockquote><p><strong>普通用户如何接入因特网？</strong></p><blockquote><p>通过<code>ISP</code>接入因特网。<code>ISP</code>可以从因特网管理机构申请到成块的<code>IP</code>地址，同时拥有通信线路以及路由器等连网设备，任何机构和个人只要向<code>ISP</code>交纳规定的费用，就可以从<code>ISP</code>得到所需要的<code>IP</code>地址。互联网上的主机都必须有<code>IP</code>地址才能通信</p></blockquote><p><img src="http://images.hellocode.top/202211171419748.png" alt="uBXlYmagVoEebrt" loading="lazy"></p><p><strong>基于ISP的三层结构的因特网</strong></p><blockquote><p>层数越小覆盖越多</p></blockquote><p><img src="http://images.hellocode.top/202211171432409.png" alt="2" loading="lazy"></p><h3 id="_3、因特网的组成" tabindex="-1"><a class="header-anchor" href="#_3、因特网的组成" aria-hidden="true">#</a> 3、因特网的组成</h3><ul><li><strong>边缘部分</strong>：由所有连接在因特网上的<strong>主机</strong>组成，这部分是<strong>用户直接使用</strong>的，用来进行<strong>通信</strong>(传送数据、音频或视频)和资源共享</li><li><strong>核心部分</strong>：由<strong>大量网络</strong>和连接这些网络的<strong>路由器</strong>组成。这部分是<strong>为边缘部分提供服务</strong>的(提供连通性和交换)</li></ul><p><img src="http://images.hellocode.top/202211171432159.png" alt="3" loading="lazy"></p><h3 id="_4、三种交换方式" tabindex="-1"><a class="header-anchor" href="#_4、三种交换方式" aria-hidden="true">#</a> 4、三种交换方式</h3><h4 id="_4-1-电路交换-circuit-switching" tabindex="-1"><a class="header-anchor" href="#_4-1-电路交换-circuit-switching" aria-hidden="true">#</a> 4.1. 电路交换(Circuit Switching)</h4><p><strong>1. 电路交换怎么出现的？</strong></p><blockquote><p>电话问世后，人们发现所有电话之间都两两相连是不现实的。因此可以用一个中间设备将讲话接入，根据需要进行转发</p></blockquote><p><img src="http://images.hellocode.top/202211171433989.png" alt="4" loading="lazy"></p><p><strong>2. 什么是电路交换？</strong></p><blockquote><p>电话交换机接通电话线的方式称为电路交换<br>从通信资源分配角度来看，交换(<code>Switch</code>)就是按照某种方式动态地分配传输线路的资源</p></blockquote><p><strong>3. 电路交换三个步骤</strong></p><ol><li>建立连接(分配通信资源)：例如在使用电路交换打电话前，必须先拨号请求建立连接，当被叫用户听到电话交换机送来的拨号音并拿起电话后，从主叫端到被叫端就建立了一条连接，也就是一条<em>专用的</em>物理通路。这条连接保证了双方通话时所需的通信资源，而这些资源在双方通信中不会被其他用户占用</li><li>通话(一直占用通信资源)：分配的资源始终被占用</li><li>释放连接(归还通信资源)</li></ol><p><img src="http://images.hellocode.top/202211171433988.png" alt="5" loading="lazy"></p><p><strong>优点</strong></p><ol><li>通信时延小：通信线路为通信双方专用的，数据直达</li><li>有序传输：通信双方只有一条专用通信线路，数据只在这一线路上传输，不存在失序问题</li><li>没有冲突：不同的通信双方拥有不同的信道，不会出现争用物理通道的问题</li><li>适用范围广：适用于传输模拟信号，也适用于传输数字信号</li><li>实时性强：时延小所以实时性强</li><li>控制简单</li></ol><p><strong>缺点</strong></p><ol><li>建立连接时间长</li><li>线路独占，适用效率低</li><li>灵活性差：只要连接所建立的物理通路中的任何一点出现了故障，就必须重新拨号建立新的连接</li><li>难以规格化：不同类型、不同规格、不同速率的终端很难互相进行通信，也难以差错控制</li></ol><h4 id="_4-2-分组交换-packet-switching" tabindex="-1"><a class="header-anchor" href="#_4-2-分组交换-packet-switching" aria-hidden="true">#</a> 4.2. 分组交换(Packet Switching)</h4><ul><li>发送方：①构建分组 ②发送分组</li><li>路由器：①缓存分组 ②转发分组</li><li>接收方：①接收分组 ②还原报文</li></ul><p><img src="http://images.hellocode.top/202211171433451.png" alt="6" loading="lazy"></p><p><strong>优点</strong></p><ol><li>无需建立连接</li><li>线路利用率高</li><li>简化存储管理：因为分组大小固定，管理起来就容易一些</li><li>加速传输：因为分组是逐个传输，这样前一个交换机的转发操作与后一个交换机的存储操作可同时进行</li><li>减少出错率和重复数据量：分组比报文小，因此出错概率也会比较小，即使出错也只需要重传出错的这一小部分即可</li></ol><p><strong>缺点</strong></p><ol><li>引起了转发时延</li><li>需要传输额外信息量(分组头部信息)</li><li>当分组交换采用数据报服务时，可能会出现失序、丢失、重复分组。分组到达目的结点时，需要重新还原成原始报文，比较麻烦。若分组交换采用虚电路服务，虽然没有分组失序问题，但有呼叫建立，数据传输和虚电路释放三个过程</li></ol><h4 id="_4-3-报文交换-message-switching" tabindex="-1"><a class="header-anchor" href="#_4-3-报文交换-message-switching" aria-hidden="true">#</a> 4.3. 报文交换(Message Switching)</h4><blockquote><p>报文交换与分组交换类似，不过对报文没有限制大小，现如今多使用分组交换。</p></blockquote><p><strong>优点</strong></p><ol><li>无需建立连接</li><li>动态分配线路</li><li>提高线路可靠性：如果某条线路出现故障，会重新选择另一条线路</li><li>提高线路利用率：通信双方在不同的时间分段占用物理线路</li><li>提供多目标服务：一个报文可以同时发送给多个目的地址</li></ol><p><strong>缺点</strong></p><ol><li>引起转发时延：报文在节点交换机上要经历存储转发的过程</li><li>需要较大的存储转发空间：因为报文大小没有限制</li><li>需要传输额外信息量：有头部等信息</li></ol><h4 id="_4-4-三种交换对比" tabindex="-1"><a class="header-anchor" href="#_4-4-三种交换对比" aria-hidden="true">#</a> 4.4. 三种交换对比</h4><blockquote><p>纵坐标为时间，分组交换相对报文交换分的更小，可以减少时延，防止过长时间占用线路以及方便排错</p></blockquote><p><img src="http://images.hellocode.top/202211171433967.png" alt="7" loading="lazy"></p><h3 id="_5、计算机网络" tabindex="-1"><a class="header-anchor" href="#_5、计算机网络" aria-hidden="true">#</a> 5、计算机网络</h3><h4 id="_5-1-定义" tabindex="-1"><a class="header-anchor" href="#_5-1-定义" aria-hidden="true">#</a> 5.1. 定义</h4><blockquote><p>一些互相连接的、自治的计算机的集合</p></blockquote><ul><li><strong>互连</strong>：指计算机之间可以通过有线或无线的方式进行数据通信</li><li><strong>自治</strong>：指独立的计算机，它有自己的硬件和软件，可以单独运行使用</li><li><strong>集合</strong>：指至少需要两台计算机</li></ul><h4 id="_5-2-分类" tabindex="-1"><a class="header-anchor" href="#_5-2-分类" aria-hidden="true">#</a> 5.2. 分类</h4><p><strong>按交换技术</strong>：①电路交换网络 ②报文交换网络 ③分组交换网络</p><p><strong>按使用者</strong>：①公用网 ②专用网</p><p><strong>按传输介质</strong>：①有线网络 ②无线网络</p><p><strong>按覆盖范围：</strong> <em>①广域网WAN ②城域网MAN ③局域网LAN ④个域网PAN</em></p><p><strong>按拓扑结构</strong>：①总线型网络 ②星型网络 ③环型网络 ④网状型网络</p><h4 id="_5-3-性能指标" tabindex="-1"><a class="header-anchor" href="#_5-3-性能指标" aria-hidden="true">#</a> 5.3. 性能指标</h4><blockquote><p>性能指标可以从不同的方面来度量计算机网络的性能</p></blockquote><h5 id="_1-速率" tabindex="-1"><a class="header-anchor" href="#_1-速率" aria-hidden="true">#</a> 1. 速率</h5><blockquote><p>连接在计算机网络上的主机在数字信道上传送比特的速率，也称为比特率或数据率</p></blockquote><p><strong>常用数据率单位</strong></p><p><img src="http://images.hellocode.top/202211171434485.png" alt="8" loading="lazy"></p><p><strong>比特</strong></p><blockquote><p>计算机中的数据量单位，也是信息论中信息量的单位。一个比特就是二进制数字中的一个<code>1</code>或<code>0</code>.</p></blockquote><p><strong>常用数据量</strong></p><p><img src="http://images.hellocode.top/202211171434476.png" alt="9" loading="lazy"></p><h5 id="_2-带宽" tabindex="-1"><a class="header-anchor" href="#_2-带宽" aria-hidden="true">#</a> 2. 带宽</h5><p><strong>带宽在模拟信号系统中的意义</strong></p><blockquote><p>信号所包含的各种不同频率成分所占据的频率范围</p><p>单位：<code>Hz（kHz，MHz，GHz）</code></p></blockquote><p><strong>带宽在计算机网络中的意义</strong></p><blockquote><p>用来表示网络的<strong>通信线路</strong>所能传送数据的能力，因此网络带宽表示在单位时间内从网络中的某一点到另一点所能通过的&quot;最高数据率&quot;</p><p>单位：<code>b/s（kb/s，Mb/s，Gb/s，Tb/s）</code></p></blockquote><p><strong>一条通信线路的&quot;频带宽度&quot;越宽，其所传输数据的&quot;最高数据率&quot;也越高</strong></p><h5 id="_3-吞吐量" tabindex="-1"><a class="header-anchor" href="#_3-吞吐量" aria-hidden="true">#</a> 3. 吞吐量</h5><blockquote><p>吞吐量表示在<strong>单位时间内通过某个网络(或信道、接口)的数据量。<br><strong>吞吐量被经常用于对现实世界中的网络的一种测量，以便知道实际上到底有多少数据量能够通过网络。<br>吞吐量</strong>受网络的带宽或额定速率的限制</strong></p></blockquote><h5 id="_4-时延" tabindex="-1"><a class="header-anchor" href="#_4-时延" aria-hidden="true">#</a> 4. 时延</h5><blockquote><p>在处理过程中所需要的时间</p></blockquote><p><img src="http://images.hellocode.top/202211171434883.png" alt="10" loading="lazy"></p><p><img src="http://images.hellocode.top/202211171434283.png" alt="11" loading="lazy"></p><h5 id="_5-时延带宽积" tabindex="-1"><a class="header-anchor" href="#_5-时延带宽积" aria-hidden="true">#</a> 5. 时延带宽积</h5><p><img src="http://images.hellocode.top/202211171434460.png" alt="12" loading="lazy"></p><h5 id="_6-往返时间" tabindex="-1"><a class="header-anchor" href="#_6-往返时间" aria-hidden="true">#</a> 6. 往返时间</h5><blockquote><p>在许多情况下，因特网上的信息不仅仅单方向传输，而是双向交互<br>我们有时很需要知道双向交互一次所需要的时间<br>因此，往返时间<code>RTT(Round-Trip Time)</code>也是一个重要的性能指标</p></blockquote><h5 id="_7-利用率" tabindex="-1"><a class="header-anchor" href="#_7-利用率" aria-hidden="true">#</a> 7. 利用率</h5><blockquote><p><strong>信道利用率</strong>：用来表示某信道有百分之几的时间是被利用的(有数据通过)<br><strong>网络利用率</strong>：全网络的信道利用率的加权平均</p></blockquote>',83),p=s("ul",null,[s("li",null,[s("p",null,[l("根据排队论，当某信道的利用率增大时，该信道引起的时延也会迅速增加。因此"),s("strong",null,"信道利用率不是越高越好")])]),s("li",null,[s("p",null,[l("如果令**"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"D"),s("mn",null,"0")])]),s("annotation",{encoding:"application/x-tex"},"D_0")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8333em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"D"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.0278em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"0")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])]),l("表示网络空闲时的时延**，"),s("strong",null,"D表示网络当前的时延"),l("，那么在适当的假定条件下，可以用下面的简单公式来表示"),s("code",null,"D"),l("、"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"D"),s("mn",null,"0")])]),s("annotation",{encoding:"application/x-tex"},"D_0")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8333em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"D"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.0278em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"0")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])]),l("和"),s("strong",null,"利用率U"),l("之间的关系")]),s("pre",null,[s("code",null,`  																	$D=\\dfrac{D_0}{1-U}$
`)]),s("p",null,[s("img",{src:"http://images.hellocode.top/202211171434876.png",alt:"13",loading:"lazy"})]),s("p",null,[l("当网络利用率"),s("code",null,"U"),l("到"),s("code",null,"50%"),l("时，时延急剧增大。")]),s("p",null,[l("当网络利用率接近"),s("code",null,"100%"),l("时，时延趋于无穷大")]),s("p",null,"但是也不能使信道利用率过低，这回使宝贵的通信资源被浪费")])],-1),m=a('<p>因此一些拥有较大主干网的<code>ISP</code>通常会控制它们的信道利用率不超过<code>50%</code>。如果超过了，就要准备扩容，增大线路带宽</p><h5 id="_8-丢包率" tabindex="-1"><a class="header-anchor" href="#_8-丢包率" aria-hidden="true">#</a> 8. 丢包率</h5><blockquote><p>丢包率即分组丢失率，是指在一定的时间范围内，传输过程中<strong>丢失的分组数量与总分组数量的比率</strong><br>具体可分为：接口丢包率、结点丢包率、链路丢包率、路径丢包率、网络丢包率等</p></blockquote><p><em>丢包率是网络运维人员非常关心的一个网络性能指标，但对于普通用户来说往往并不关心这个指标，因为他们意识不到丢包</em></p><p><strong>分组丢失的两种情况</strong></p><ul><li>分组在传输过程中出现误码，被结点丢弃</li><li>分组到达一台队列已满的分组交换机时被丢弃，在通信量较大时就可能造成网络拥塞</li></ul><p><strong>丢包率反映了网络的拥塞情况</strong></p><ul><li>无拥塞时路径丢包率为<code>0</code></li><li>轻度拥塞时路径丢包率为<code>1%~4%</code></li><li>严重拥塞时路径丢包率为<code>5%~15%</code></li></ul><h4 id="_5-4-体系结构" tabindex="-1"><a class="header-anchor" href="#_5-4-体系结构" aria-hidden="true">#</a> 5.4. 体系结构</h4><p><img src="http://images.hellocode.top/202211171435560.png" alt="1" loading="lazy"></p><h5 id="_1-分层的必要性" tabindex="-1"><a class="header-anchor" href="#_1-分层的必要性" aria-hidden="true">#</a> 1. 分层的必要性</h5><blockquote><p>在平常编程时，我们总是喜欢利用不同的类实现不同的功能，最后进行整合实现真正的功能。这样的好处是让结构更加清晰，维护也更加简单。计算机网络分层同理，在计算机网络上实现不同进程的通信需要解决众多问题，分层便于维护与管理</p></blockquote><p><img src="http://images.hellocode.top/202211171442622.png" alt="0" loading="lazy"></p><h5 id="_2-分层举例" tabindex="-1"><a class="header-anchor" href="#_2-分层举例" aria-hidden="true">#</a> 2. 分层举例</h5><blockquote><p>当我们利用浏览器发送网页请求到服务器并发生响应的过程中，数据会怎么变化呢？</p></blockquote><p><img src="http://images.hellocode.top/202211171443424.png" alt="1" loading="lazy"></p><p><strong>浏览器发送</strong></p><ul><li>应用层按照<code>HTTP协议</code>的规定构建一个HTTP请求报文(请求要干什么)。应用层将<code>HTTP请求</code>的报文交给运输层处理</li><li>运输层给<code>HTTP请求</code>报文添加一个TCP首部(区分应用进程)，使之成为<code>TCP报文段</code>。运输层将<code>TCP报文段</code>交给网络层处理</li><li>网络层给<code>TCP报文段</code>添加一个IP首部(使之可以在互联网上传输)，使之成为<code>IP数据报</code>。网络层将<code>IP数据报</code>交付给数据链路层处理</li><li>数据链路层给<code>IP数据报</code>添加一个首部(让其能在一段链路上传输，能被相应主机接收)和一个尾部(让目的主机检查所接收到的帧是否有误码)，使之成为帧。数据链路层将帧交给物理层</li><li>物理层将帧看作比特流，如果网络是以太网，它还会在帧上加前导码(让目的主机做好接收帧的准备)。接着将比特流变成相应信号发送到传输媒体</li></ul><p><strong>路由器转发</strong></p><ul><li>物理层收到信号将其变为比特流，去掉前导码后，将其交付给数据链路层(交付的实际是帧)</li><li>数据链路层将帧去掉首部和尾部后，将其交付给网络层(交付的实际是IP数据报)</li><li>网络层解析<code>IP数据报</code>首部，从中提取目的网络地址，然后查找自身路由表，确定转发端口。接着数据链路层封装，物理层再封装，将比特流变成信号发送出去。</li></ul><p><strong>服务器接收</strong></p><ul><li>物理层收到信号将其变为比特流，去掉前导码后，将其交付给数据链路层(交付的实际是帧)</li><li>数据链路层收到帧后，去除首部和尾部，将其交付给网络层(交付的实际是IP数据报)</li><li>网络层收到<code>IP数据报</code>后，去除<code>IP首部</code>，将其交付给运输层(交付的实际是TCP报文)</li><li>运输层收到<code>TCP报文</code>后，从中得知是与哪个端口上的进程通信，去除<code>TCP头部</code>后，交付给应用层(交付的实际是HTTP请求报文)</li><li>应用层收到<code>HTTP请求</code>报文后，将其解析给对应进程，并执行相关操作，返回HTTP响应报文</li></ul><h4 id="_5-5-专用术语" tabindex="-1"><a class="header-anchor" href="#_5-5-专用术语" aria-hidden="true">#</a> 5.5. 专用术语</h4><h5 id="_1-实体" tabindex="-1"><a class="header-anchor" href="#_1-实体" aria-hidden="true">#</a> 1. 实体</h5><blockquote><p>任何可发送或接收信息的硬件或者软件进程</p></blockquote><p><strong>对等实体</strong>：收发双方相同层次中的实体</p><p><img src="http://images.hellocode.top/202211171443543.png" alt="2" loading="lazy"></p><h5 id="_2-协议" tabindex="-1"><a class="header-anchor" href="#_2-协议" aria-hidden="true">#</a> 2. 协议</h5><blockquote><p>控制两个对等实体进行逻辑通信(这种通信实际上不存在，只是便于我们考虑问题)的规则的集合</p></blockquote><p><img src="http://images.hellocode.top/202211171443898.png" alt="3" loading="lazy"></p><p><strong>三要素</strong></p><ul><li>语法：定义所交换信息的格式(即报文格式)</li><li>语义：定义收发双方所要完成的操作(即收，发任务需要各自定义)</li><li>同步：定义收发双方的时序关系(如先建立侦听才可以通信是有先后顺序的)</li></ul><h5 id="_3-服务" tabindex="-1"><a class="header-anchor" href="#_3-服务" aria-hidden="true">#</a> 3. 服务</h5><ul><li>在协议控制下，两个对等实体间的逻辑通信使得本层能够向上一层提供服务(也就是说通过协议完成本层的内容后就可以向上提供服务)</li><li>要实现本层协议，还需要使用下面一层所提供的服务</li><li>协议是&quot;水平的&quot;，服务是**&quot;<strong>垂直的</strong>&quot;**</li><li>实体看得见相邻下层所提供的的服务，但是并不知道实现该服务的具体协议。也就是说，下面的协议对上面的实体是&quot;透明&quot;的<code>(就像手机为我们提供服务，但是我们并不知道具体是如何实现的)</code></li></ul><p>服务访问点：在同一系统中相邻两层的实体交换信息的逻辑接口(就像Web里的request域，后端前端都能取到)，用于区分不同的服务类型</p><ul><li>数据链路层的服务访问点为帧的&quot;类型&quot;字段</li><li>网络层的服务访问点位IP数据报首部中的&quot;协议字段&quot;</li><li>运输层的服务访问点为&quot;端口号&quot;</li></ul><p>**服务原语：**上层使用下层所提供的服务必须通过与下层交换一些命令，这些命令称为服务原语</p><p><img src="http://images.hellocode.top/202211171443794.png" alt="4" loading="lazy"></p><p><strong>协议数据单元PDU(横向)</strong>：对等层次之间传送的数据包称为该层的协议数据单元</p><ul><li>物理层是比特流；数据链路层是帧；网络层是IP数据报或分组……</li></ul><p><strong>服务数据单元SDU(竖向)</strong>：同一系统内，层与层之间交换的数据报称为服务数据单元</p><ul><li>物理层往上送是比特流；数据链路层往下送是帧……</li></ul><p><em>多个SDU可用合成为一个PDU；一个SDU页可以划分为几个PDU</em></p><h2 id="二、物理层" tabindex="-1"><a class="header-anchor" href="#二、物理层" aria-hidden="true">#</a> 二、物理层</h2><blockquote><p>考虑怎样才能在连接各种计算机的传输媒体上传输数据比特流<br>物理层为数据链路层屏蔽了各种传输媒体的差异，使数据链路层只需要考虑如何完成本层的协议和服务，而不必考虑网络具体的传输媒体是什么</p></blockquote><h3 id="_1、物理层协议主要任务" tabindex="-1"><a class="header-anchor" href="#_1、物理层协议主要任务" aria-hidden="true">#</a> 1、物理层协议主要任务</h3><ul><li>机械特性：指明接口所用接线器的形状和尺寸、引脚数目和排列、固定和锁定装置</li><li>电气特性：指明在接口电缆的各条线上出现的电压范围</li><li>功能特性：指明某条线上出现的某一电平的电压表示何种意义</li><li>过程特性：指明对于不同功能的各种可能事件的出现顺序</li></ul><h3 id="_2、传输媒体" tabindex="-1"><a class="header-anchor" href="#_2、传输媒体" aria-hidden="true">#</a> 2、传输媒体</h3><h4 id="_2-1-导引型传输媒体" tabindex="-1"><a class="header-anchor" href="#_2-1-导引型传输媒体" aria-hidden="true">#</a> 2.1. 导引型传输媒体</h4><blockquote><p>有摸得到的实物进行传导信号的方式</p></blockquote><h5 id="_1同轴电缆" tabindex="-1"><a class="header-anchor" href="#_1同轴电缆" aria-hidden="true">#</a> ①同轴电缆</h5><blockquote><p>电缆各层都是同轴心的，因此称同轴电缆</p></blockquote><p><img src="http://images.hellocode.top/202211171443183.png" alt="5" loading="lazy"></p>',53),h=s("p",null,[l("基带同轴电缆(50"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",{mathvariant:"normal"},"Ω")]),s("annotation",{encoding:"application/x-tex"},"\\Omega")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord"},"Ω")])])]),l(")：数字传输，过去用于局域网"),s("br"),l("宽带同轴电缆(75"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",{mathvariant:"normal"},"Ω")]),s("annotation",{encoding:"application/x-tex"},"\\Omega")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord"},"Ω")])])]),l(")：模拟传输，目前主要用于有线电视")],-1),g=a('<p>同轴电缆价格较贵且布线不够灵活和方便，随着集线器的出现，在局域网领域基本上都是采用双绞线作为传输媒体</p><h5 id="_2双绞线" tabindex="-1"><a class="header-anchor" href="#_2双绞线" aria-hidden="true">#</a> ②双绞线</h5><blockquote><p>把两根互相绝缘的铜导线并排放在一起，然后按照一定规则绞合起来就构成了双绞线，这是一种古老且常用的传输媒体</p></blockquote><p><strong>常用绞合线类别、带宽和典型应用</strong></p><p><img src="http://images.hellocode.top/202211171443404.png" alt="6" loading="lazy"></p><p><strong>UTP</strong></p><blockquote><p>无屏蔽双绞线<code>UTP</code>电缆</p></blockquote><ul><li>蓝线和蓝白线绞合</li><li>橙线和橙白线绞合</li><li>绿线和绿白线绞合</li><li>棕线和棕白线绞合</li></ul><p>作用：①抵御部分来自外界的电磁波干扰 ②减少相邻导线的电磁干扰</p><p><strong>STP</strong></p><blockquote><p>屏蔽双绞线<code>STP</code>电缆，其与<code>UTP</code>相比增加了金属丝编织的屏蔽层，提高了抗电磁干扰能力</p></blockquote><h5 id="_3★光纤" tabindex="-1"><a class="header-anchor" href="#_3★光纤" aria-hidden="true">#</a> ③★光纤</h5><blockquote><p>光纤很细，因此必须将其做成结实的光缆。一根光缆少则一根光纤，多则可包括数百根</p></blockquote><p><img src="http://images.hellocode.top/202211171443596.png" alt="7" loading="lazy"></p><p><strong>原理</strong></p><p><img src="http://images.hellocode.top/202211171443444.png" alt="8" loading="lazy"></p><p>如果全反射一直进行，则光就会沿着光纤一直传输下去。</p><p>实际上只要入射角大于某个临界角度就可以发生全反射，因此多条不同角度的光可以在光线里一起传输，这种光纤称作<strong>多模光纤</strong></p><p><img src="http://images.hellocode.top/202211171444586.png" alt="9" loading="lazy"></p><ul><li>由于色散(模式、材料、波导色散)，光在多模光纤中传输一定距离后必然产生失真(脉冲展宽)</li><li>因此多模光纤只适合近距离传输(建筑物内)</li><li>发送光源可使用发光二极管(便宜)；接收检测可用光电二极管</li></ul><p>若光纤直径减小到只有一个光的波长，则光纤就像一根波导一样，可使光线一直向前传播，而不会产生多次反射，这样的光纤称作<em>单模光纤</em></p><p><img src="http://images.hellocode.top/202211171444352.png" alt="10" loading="lazy"></p><ul><li>没有模式色散，在<code>1.31</code>微米波长附近，材料色散和波导色散大小相等符号相反，两者正好抵消</li><li>单模光纤适合长距离传输且衰减小，但其制造成本高，对光源要求高</li><li>发送光源需要使用激光发生器(贵)；接收检测用激光检波器</li></ul><p><strong>纤芯直径</strong></p><ul><li>多模光纤：<code>50</code>微米，<code>62.5</code>微米</li><li>单模光纤：<code>9</code>微米</li><li>纤芯外包层：<code>125</code>微米</li></ul><p><strong>工作波长</strong></p><ul><li>0.85微米(衰减较大)</li><li>1.30微米(衰减较小)</li><li>1.55微米(衰减较小)</li></ul><p><strong>优点</strong></p><ul><li>通信容量大(<code>25000~30000GHz</code>的带宽)</li><li>传输损耗小，远距离传输时更加经济</li><li>抗雷电和抗电磁干扰性能好。这在大电流脉冲干扰环境下尤为重要</li><li>无串音干扰，保密性好，不易被窃听</li><li>体积小，重量轻</li></ul><p><strong>缺点</strong></p><ul><li>割接需要专用设备</li><li>光电接口价格较贵</li></ul><h4 id="_2-2-非导引型传输媒体" tabindex="-1"><a class="header-anchor" href="#_2-2-非导引型传输媒体" aria-hidden="true">#</a> 2.2. 非导引型传输媒体</h4><blockquote><p>传导信号的东西摸不到</p></blockquote><p><img src="http://images.hellocode.top/202211171444747.png" alt="11" loading="lazy"></p><p><img src="http://images.hellocode.top/202211171444698.png" alt="12" loading="lazy"></p><h5 id="_1无线电波" tabindex="-1"><a class="header-anchor" href="#_1无线电波" aria-hidden="true">#</a> ①无线电波</h5><blockquote><p>低频和中频频段用地面波传播；高频和甚高频靠电离层(地球上方<code>100~500</code>千米高空的带电离子层)反射</p></blockquote><h5 id="_2★微波" tabindex="-1"><a class="header-anchor" href="#_2★微波" aria-hidden="true">#</a> ②★微波</h5><blockquote><p>微波会穿透电离层进入宇宙，因此其不能通过电离层反射到很远的地方</p></blockquote><p><strong>地面微波接力通信</strong></p><blockquote><p>微波是<strong>直线传播</strong>的，而地球表面是个曲面，因此传播距离受到限制，一般只有<code>50KM</code>左右；如果采用<code>100</code>米高的天线塔，则传播距离可增大到<code>100</code>公里。<br>为实现远距离通信，必须在一个微波通信信道的两个终端之间建立若干个中继站，<strong>中继站把前一阵送来的信号经过放大后再发送到下一站</strong></p></blockquote><p><strong>卫星通信</strong></p><blockquote><p>在地球站之间，利用位于约<code>36000KM</code>高空的人造同步地球卫星作为中继器的一种微波接力，其最大特点是通信距离远，传播时延大(约<code>250~300ms</code>)。低轨道卫星通信系统也已经正在部署</p></blockquote><h5 id="_3红外线" tabindex="-1"><a class="header-anchor" href="#_3红外线" aria-hidden="true">#</a> ③红外线</h5><ul><li>点对点无线传输</li><li>直线传播，中间不能有障碍物，传输距离短</li><li>传输速率低(<code>4Mb/s~16Mb/s</code>)</li></ul><h5 id="_4可见光" tabindex="-1"><a class="header-anchor" href="#_4可见光" aria-hidden="true">#</a> ④可见光</h5><blockquote><p>即光源作为信号源，前景好，暂时未被大范围应用</p></blockquote><h3 id="_3、传输方式" tabindex="-1"><a class="header-anchor" href="#_3、传输方式" aria-hidden="true">#</a> 3、传输方式</h3><h4 id="_3-1-串行-并行传输" tabindex="-1"><a class="header-anchor" href="#_3-1-串行-并行传输" aria-hidden="true">#</a> 3.1. 串行/并行传输</h4><blockquote><p>串行传输是指数据是<code>1</code>个比特<code>1</code>个比特依次发送的，发送端与接收端之间只用<code>1</code>条数据传输线即可<br>并行传输是指一次发送<code>n</code>个比特而不是一个比特，在发送端和接收端之间要有<code>n</code>条传输线路</p></blockquote><p>在计算机网络中，数据在传输线路上的传输时串行传输；而计算机内部(如CPU和内存)多使用并行传输</p><h4 id="_3-2-同步传输" tabindex="-1"><a class="header-anchor" href="#_3-2-同步传输" aria-hidden="true">#</a> 3.2. 同步传输</h4><blockquote><p>数据块以稳定的比特流形式传输，字节之间没有间隔。接收端在每个比特信号的中间时刻(有区分<code>0,1</code>的标志)进行检测，以判别接收到的是比特<code>0</code>还是<code>1</code>。<br>由于不同设备的时钟频率存在一定差异，不可能完全相同，在传输大量数据的过程中，所产生的判别时刻的累计误差会导致接收端对比特信号的判别错位。因此需要采取方法使双方的时钟保持同步</p></blockquote><p><strong>收发双方时钟同步方法</strong></p><ul><li>外同步：在收发双方之间加一条单独的时钟信号线</li><li>内同步：发送端将时钟同步信号编码到发送数据中一起传输(如曼彻斯特编码)</li></ul><h4 id="_3-3-异步传输" tabindex="-1"><a class="header-anchor" href="#_3-3-异步传输" aria-hidden="true">#</a> 3.3. 异步传输</h4><blockquote><p>以字节为独立的传输单位，字节间的时间间隔不是固定的，接收端仅在每个字节的起始处对字节内的比特实现同步，为此通常传送前要在每个字节前后加上起始位和结束位。</p></blockquote><ul><li>异步是指字节之间异步(字节之间的时间间隔不固定)</li><li>字节中的每个比特仍然要同步(各比特的持续时间是相同的)</li></ul><h4 id="_3-4-单工-半双工-全双工" tabindex="-1"><a class="header-anchor" href="#_3-4-单工-半双工-全双工" aria-hidden="true">#</a> 3.4. 单工/半双工/全双工</h4><ul><li>单工通信：通信双方只有一个数据传输方向(无线电广播)</li><li>半双工通信：通信双方可以相互传输数据，但不能同时进行(对讲机)</li><li>全双工通信：通信双方可以同时发送和接收消息(电话)</li></ul><p>单工需要一条信道；其他的需要两条(一个方向一条)</p><h3 id="_4、编码与调制" tabindex="-1"><a class="header-anchor" href="#_4、编码与调制" aria-hidden="true">#</a> 4、编码与调制</h3><ul><li>消息(<code>message</code>)包括文字、图片、音频和视频</li><li>数据是运送消息的实体；计算机中的网卡将比特<code>1</code>和<code>0</code>变换成相应电信号发送到网线，即信号。</li><li>信号是数据的电磁表现，由信源(网卡)发出的原始电信号称为基带信号</li><li>基带信号又分为数字基带信号(CPU和内存传输的信号)和模拟基带信号(麦克风收到声音后转变的电信号)</li></ul><blockquote><p>信号需要在信道中进行传输，信道可分为数字信道和模拟信道</p><p><img src="http://images.hellocode.top/202211171444229.png" alt="13" loading="lazy"></p><p>如果使用信道复用技术，传输媒体里可以有多个信道</p><p>在不改变信号性质的前提下，仅对基带信号的波形进行变换，称为编码。编码后产生的信号还是数字信号，可以在数字信道中传输</p><p>把基带信号的频率范围搬移到较高的频段，并转换为模拟信号，称为调制。调制后产生的信号还是模拟信号，可以在模拟信道中传输</p></blockquote><p><img src="http://images.hellocode.top/202211171444315.png" alt="14" loading="lazy"></p><h4 id="_4-1-常用编码" tabindex="-1"><a class="header-anchor" href="#_4-1-常用编码" aria-hidden="true">#</a> 4.1. 常用编码</h4><p><img src="http://images.hellocode.top/202211171444392.png" alt="15" loading="lazy"></p><h5 id="_1不归零编码" tabindex="-1"><a class="header-anchor" href="#_1不归零编码" aria-hidden="true">#</a> ①不归零编码</h5><blockquote><p>正电平代表比特<code>1</code>，负电平代表比特<code>0</code>。在整个码元时间内，电平不会出现零电平</p></blockquote><p><strong>这种编码方式如何区分连续几个相同电平呢？</strong></p><blockquote><p>这要求发送方发送和接收方接收严格同步，这就需要额外一根传输线来传输时钟信号。接收方按照时钟节拍逐个接收码元。但是对于计算机网络，多的线不如拿来传输数据，因此由于存在同步问题，<strong>计算机中的数据传输不使用不归零编码</strong></p></blockquote><h5 id="_2归零编码" tabindex="-1"><a class="header-anchor" href="#_2归零编码" aria-hidden="true">#</a> ②归零编码</h5><blockquote><p><strong>每个码元传输结束后信号都要&quot;归零&quot;</strong>，所以接收方只要在信号归零后进行采样即可，不需要单独的时钟信号。</p><p>实际上，归零编码相当于把时钟信号用&quot;归零&quot;方式编码在了数据之内，这称为&quot;<strong>自同步</strong>&quot;信号</p><p>归零编码中的大部分<strong>数据带宽</strong>都用来传输&quot;归零&quot;而<strong>浪费</strong>掉了(编码效率低)</p></blockquote><h5 id="_3曼彻斯特编码" tabindex="-1"><a class="header-anchor" href="#_3曼彻斯特编码" aria-hidden="true">#</a> ③曼彻斯特编码</h5><blockquote><p>码元的中间时刻既表示时钟，又表示数据。根据<strong>正负跳变来区分比特</strong></p></blockquote><p><em><strong>具体如何根据跳变实现同步？</strong></em></p><blockquote><p>第一次数据跳变的时间记录下来【即半个码元的时间】，此后每过一个码元的时间就进行检测，根据跳变方向决定数据为<code>0</code>还是<code>1</code>。</p></blockquote><h5 id="_4差分曼彻斯特编码" tabindex="-1"><a class="header-anchor" href="#_4差分曼彻斯特编码" aria-hidden="true">#</a> ④差分曼彻斯特编码</h5><blockquote><p>①跳变仅表示时钟 ②码元开始处电平是否发生变化表示数据。<br><strong>比曼彻斯特变化少，更适合较高的传输速率</strong></p></blockquote><h4 id="_4-2-基本调制方法" tabindex="-1"><a class="header-anchor" href="#_4-2-基本调制方法" aria-hidden="true">#</a> 4.2. 基本调制方法</h4><p><img src="http://images.hellocode.top/202211171444769.png" alt="16" loading="lazy"></p><p><strong>如上一个码元对应一个比特，如何能让1个码元包含多个比特呢？</strong></p>',82),u=s("blockquote",null,[s("p",null,[l("可以使用混合调制。正弦信号"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"A"),s("mi",null,"sin"),s("mo",null,"⁡"),s("mi",null,"ω"),s("mo",{stretchy:"false"},"("),s("mi",null,"x"),s("mo",null,"+"),s("mstyle",{displaystyle:"true",scriptlevel:"0"},[s("mfrac",null,[s("mi",null,"φ"),s("mi",null,"ω")])]),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"A\\sin \\omega(x+\\dfrac{\\varphi}{\\omega})")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal"},"A"),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mop"},"sin"),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"ω"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"x"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.7936em","vertical-align":"-0.686em"}}),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.1076em"}},[s("span",{style:{top:"-2.314em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"ω")])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.677em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"φ")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.686em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})]),s("span",{class:"mclose"},")")])])]),l("，相位和频率是相关的，因此二者不可同时做修改"),s("br"),l("通常情况下，相位和振幅可以结合起来其一调制，称为"),s("strong",null,"正交振幅调制QAM")])],-1),b=a('<p><strong>QAM-16</strong></p><ul><li><code>12</code>种相位</li><li>每种相位有<code>1</code>或<code>2</code>种振幅可选</li><li>可以调制出<code>16</code>种码元(波形)，即<code>16</code>个形状可以用<code>4</code>个二进制位排列组合表示，所以一个码元可以对应<code>4比特</code></li><li>码元与<code>4</code>个比特的对应关系要采用<strong>格雷码</strong>【任意两个相邻码元只有一位不同】</li></ul><p><img src="http://images.hellocode.top/202211171444520.png" alt="17" loading="lazy"></p><h3 id="_5、信道的极限容量" tabindex="-1"><a class="header-anchor" href="#_5、信道的极限容量" aria-hidden="true">#</a> 5、信道的极限容量</h3><blockquote><p>通信质量较差的信道在传输信号的过程中会发生<strong>严重失真</strong>(无法识别原信号)<strong>【码间串扰】</strong></p></blockquote><p><strong>失真因素</strong></p><ul><li>码元传输速率</li><li>信号传输距离</li><li>噪声干扰</li><li>传输媒体质量</li></ul><p><img src="http://images.hellocode.top/202211171445012.png" alt="18" loading="lazy"></p><p><img src="http://images.hellocode.top/202211171445932.png" alt="19" loading="lazy"></p><ul><li>在信道带宽一定的情况下，根据奈氏准则和香农公式，要想提高信息的传输速率就必须采用<strong>多元制</strong>【更好的调制方法】和努力<strong>提高信道中的信噪比</strong></li><li>自从香农公式发布后，各种新的信号处理和调制方法就不断出现，其目的都是为了<strong>尽可能地接近香农公式给出的传输速率极限</strong></li></ul><p><strong>例题</strong></p><p><img src="http://images.hellocode.top/202211171445591.png" alt="20" loading="lazy"></p><p><img src="http://images.hellocode.top/202211171445075.png" alt="21" loading="lazy"></p><p><img src="http://images.hellocode.top/202211171445180.png" alt="22" loading="lazy"></p><h2 id="三、数据链路层" tabindex="-1"><a class="header-anchor" href="#三、数据链路层" aria-hidden="true">#</a> 三、数据链路层</h2><h3 id="_1、概述" tabindex="-1"><a class="header-anchor" href="#_1、概述" aria-hidden="true">#</a> 1、概述</h3><p><strong>物理层发出去的信号需要通过数据链路层才知道是否到达目的地；才知道比特流的分界线</strong></p><ul><li><strong>链路(Link)</strong>：从一个结点到相邻结点的一段物理线路，中间没有任何其他交换结点</li><li><strong>数据链路(Data Link)</strong>：把实现通信协议的硬件和软件加到链路上，就构成了数据链路</li><li>数据链路层以<strong>帧</strong>为单位传输和处理数据</li></ul><h4 id="_1-1-封装成帧" tabindex="-1"><a class="header-anchor" href="#_1-1-封装成帧" aria-hidden="true">#</a> 1.1. 封装成帧</h4><blockquote><p>数据链路层为数据加上帧首和帧尾使之成为帧的过程</p></blockquote><p><img src="http://images.hellocode.top/202211171527338.png" alt="1" loading="lazy"></p><ul><li>帧头和帧尾中含有重要的控制信息</li><li>帧头帧尾的作用之一就是帧定界**(变成比特传输后据此区分每个帧的起始和结束)**</li><li>为了提高帧的传输效率，应当使<strong>帧的数据部分长度尽可能大</strong></li><li>考虑到差错控制等多种因素，每一种数据链路层协议都规定了帧的数据部分的长度上限，即<strong>最大传送单元MTU</strong>（<code>Maximum Transfer Unit</code>）</li></ul><p>透明传输是指<strong>数据链路层对上层交付的传输数据没有任何限制</strong>，就好像数据链路层不存在一样(即<strong>保证接收方接到的数据是完整的数据</strong>)</p><ul><li><p><strong>面向字节</strong>的物理链路使用<strong>字节填充</strong>(或称字符填充)的方法实现**<mark>透明传输</mark>**</p><blockquote><p>帧头帧尾有标志位用来划分一个个帧，如果帧内部恰好也出现了标志位，则在第一次扫描时在标志位前面加一个转义字符帮助区分哪个是真正的帧头。考虑到转义字符也可能在帧内部出现，因此在转义字符前也加转义字符。接收方接到消息后但凡看到转义字符开头就会去掉转义字符并且对其后一个字符不做特殊处理</p></blockquote></li><li><p><strong>面向比特的物理链路使用比特填充的方法实现透明传输</strong></p><blockquote><p><strong>零比特填充</strong>：在发送前，对帧的数据部分进行扫描，每<code>5</code>个连续的比特<code>1</code>后就插入<code>1</code>个比特<code>0</code>，防止其与首部尾部的标志位混淆。接收方接收时将每<code>5</code>个连续的比特<code>1</code>后面的<code>0</code>剔除即可</p></blockquote></li></ul><h4 id="_1-2-差错检测" tabindex="-1"><a class="header-anchor" href="#_1-2-差错检测" aria-hidden="true">#</a> 1.2. 差错检测</h4><blockquote><p>实际的通信链路都不是理想的，比特在传输过程中可能会产生差错：<code>1</code>可能变成<code>0</code>，<code>0</code>可能变成<code>1</code>。这叫<strong>比特差错</strong></p><p>在一段时间内，传输错误的比特占所传输比特总数的比率称为<strong>误码率BER</strong>(<code>Big Error Rate</code>)</p><p>使用<strong>差错检测码</strong>(如<code>Mac</code>帧尾的<code>FCS</code>)来检测数据在传输过程中是否产生了比特差错，是数据链路层所要解决的重要问题之一</p></blockquote><h5 id="奇偶校验" tabindex="-1"><a class="header-anchor" href="#奇偶校验" aria-hidden="true">#</a> 奇偶校验</h5><blockquote><p>在待发送的数据后面添加<code>1</code>位奇偶校验位，使整个数据(包括所添加的校验位在内)中&quot;<code>1</code>&quot;的个数为奇数(奇校验)或为偶数(偶校验)</p></blockquote><p><strong>比如发送数据001</strong></p><ul><li>若是<strong>奇校验</strong>，则在数据后添加<code>0</code>，使其成为<code>0001</code>,<code>1</code>的个数为奇数。如果传输过程中发生了<code>1</code>位误码，则<code>1</code>的个数会变成偶数，据此判断是否发生误码；但是若发生了<code>2</code>个误码，<code>1</code>的个数依然为奇数，因此检查不出来</li><li>若为<strong>偶校验</strong>，则在数据后添加<code>1</code>，使其成为<code>1001</code>,<code>1</code>的个数为偶数，其他情况与奇校验类似</li></ul><p><strong>如果有奇数个位发生误码，则奇偶性发生变化，可以检查出误码<br>如果有偶数个位发生误码，则奇偶性不发生变化，不能检查出误码(漏检)</strong></p><h5 id="循环冗余校验crc" tabindex="-1"><a class="header-anchor" href="#循环冗余校验crc" aria-hidden="true">#</a> 循环冗余校验CRC</h5><ul><li><p>收发双方约定好一个生成多项式<code>G(x)</code></p><p><img src="http://images.hellocode.top/202211171527623.png" alt="2" loading="lazy"></p></li><li><p>发送方基于待发送的数据和生成多项式计算出差错检测码**(冗余码)**，将其添加到待传输数据的后面一起传输</p></li><li><p>接收方通过生成多项式来计算收到的数据是否产生了误码</p></li></ul><p><img src="http://images.hellocode.top/202211171527158.png" alt="3" loading="lazy"></p><p><em>除法内的相减实际是做异或运算，因此没有小的减不了大的这个说法</em></p><p><img src="http://images.hellocode.top/202211171527365.png" alt="4" loading="lazy"></p><p><img src="http://images.hellocode.top/202211171527949.png" alt="5" loading="lazy"></p><ul><li><strong>检错码</strong>只能检测出帧在传输过程中出现了差错，但并不能定位错误，因此<strong>无法纠正错误</strong>。</li><li>要想纠正传输中的差错，可以使用冗余信息更多的<strong>纠错码</strong>进行<strong>前向纠错</strong>。但纠错码的开销比较大，<strong>在计算机网络中较少使用</strong></li><li><strong>CRC</strong>有很好的检错能力(<strong>漏检率非常低</strong>)，虽然计算比较复杂，但非常<strong>易于用硬件实现</strong>，因此<strong>被广泛应用于数据链路层</strong></li><li>在计算机网络中通常采用<strong>检错重传方式来纠正传输中的差错，或者仅仅是丢弃检测到差错的帧</strong>，这取决于数据链路层向其上层提供的是可靠传输服务还是不可靠传输服务</li></ul><h4 id="_1-3-可靠传输" tabindex="-1"><a class="header-anchor" href="#_1-3-可靠传输" aria-hidden="true">#</a> 1.3. 可靠传输</h4><blockquote><p><strong>不可靠传输服务</strong>：仅仅丢弃有误码的帧，其他什么也不做<br><strong>可靠传输</strong>：想办法实现发送端发送什么，接收端就收到什么</p></blockquote><ul><li>一般情况下，<strong>有线链路</strong>的误码率比较低，为了减小开销，并<strong>不要求数据链路层</strong>向上提供<strong>可靠</strong>传输服务。即使出现了误码，可靠传输的问题由其上层处理</li><li><strong>无线链路</strong>易受干扰，误码率比较高，因此<strong>要求数据链路层</strong>必须向上层提供<strong>可靠</strong>传输服务</li><li>比特差错只是传输差错中的一种，从整个计算机网络体系结构来看，传输差错还包括<strong>分组丢失</strong>、<strong>分组失序</strong>以及<strong>分组重复</strong></li><li>分组丢失、分组失序以及分组重复这些传输差错，一般不会出现在数据链路层，而会出现在其上层</li><li><strong>可靠传输服务并不仅局限于数据链路层</strong>，其他各层均可选择实现可靠传输</li><li>可靠传输的实现比较复杂，开销也比较大，是否使用可靠传输取决于应用需求</li></ul><p><img src="http://images.hellocode.top/202211171528672.png" alt="6" loading="lazy"></p><h5 id="_1停止-等待协议sw" tabindex="-1"><a class="header-anchor" href="#_1停止-等待协议sw" aria-hidden="true">#</a> ①停止-等待协议SW</h5><blockquote><p>发送方发送数据<code>DATA</code>，接收方接收时进行差错检测<br>①如果没有出现误码，则<strong>接收</strong>信息并返回**<code>ACK</code><strong>确认分组给发送方，发送方收到<code>ACK</code>后，一次通信结束<br>②如果出现误码，则</strong>丢弃<strong>信息并返回</strong><code>NAK</code>**拒绝分组给发送方，发送方收到<code>NAK</code>后，重传<code>DATA</code>，直至出现<code>步骤①</code>的情况</p></blockquote><p><strong>如果<code>DATA</code>传送过程中丢失了，即接收端一直等<code>DATA</code>，发送端一直等<code>ACK</code>，造成死锁，如何解决呢？</strong></p><blockquote><p>可以引入超时重传机制。可以在发送端设置一计时器<code>(大约发送接收的平均时间)</code>，当发送端在这个时间内没有收到<code>ACK或NAK</code>时，就会判断<code>DATA</code>丢失，从而再次发送<code>DATA</code>，打破死锁</p></blockquote><p><strong>如果<code>ACK</code>发送中丢失了，即接收方收不到<code>ACK</code>就将数据重新发送，而数据实际上接收方已经有了，因此重复接收，并返回<code>ACK</code>，造成错误，怎么办？</strong></p><blockquote><p>可以对每次发的<code>DATA</code>都加上序号，这样接收端就可以判断当前的数据是否有接收过，从而决定其去留</p></blockquote><p><strong>如果发送端发送<code>DATA 0</code>，如果<code>ACK</code>由于某些原因使其到达接收端的时间变长了，那么根据超时重传，<code>DATA 0</code>会再次发送，而此时<code>ACK</code>到达，则发送方会认为这是后一次<code>DATA 0</code>的确认分组，于是马上发送<code>DATA 1</code>。而第二次发送的<code>DATA 0</code>此时返回<code>ACK</code>，发送方误以为是<code>DATA 1</code>的<code>ACK</code>，因此又会发送<code>DATA2</code>，而实际上<code>DATA 1</code>的是否误码等情况还不知道，因此出现了错误，这种情况怎么办？</strong></p><blockquote><p>可以为<code>ACK</code>加上编号。则每个<code>ACK</code>的相互作用就不会互串了。【对于数据链路层点对点信道，往返时间比较固定，不会出现确认迟到的情况，因此可以不给确认分组编号】</p></blockquote><p><img src="http://images.hellocode.top/202211171528273.png" alt="7" loading="lazy"></p><p><img src="http://images.hellocode.top/202211171528392.png" alt="8" loading="lazy"></p><p><img src="http://images.hellocode.top/202211171528164.png" alt="9" loading="lazy"></p><h5 id="_2回退n帧协议gbn" tabindex="-1"><a class="header-anchor" href="#_2回退n帧协议gbn" aria-hidden="true">#</a> ②回退N帧协议GBN</h5><blockquote><p>相对停止-等待协议多个窗口的概念<br>接收窗口尺寸只能等于<code>1</code>，因此<strong>接收方只能按序接收正确到达的数据分组</strong></p></blockquote><p><img src="http://images.hellocode.top/202211171528829.png" alt="10" loading="lazy"></p><p><img src="http://images.hellocode.top/202211171528317.png" alt="11" loading="lazy"></p><ul><li><strong>接收端返回<code>ACK n</code>表示发送过来的分组x&lt;=n的都收到了</strong></li></ul><h5 id="_3选择重传协议sr" tabindex="-1"><a class="header-anchor" href="#_3选择重传协议sr" aria-hidden="true">#</a> ③选择重传协议SR</h5><blockquote><p>与回退<code>N</code>帧相比，接收窗口允许多个，且发送窗口最大情况有所变化</p></blockquote><p><img src="http://images.hellocode.top/202211171528931.png" alt="12" loading="lazy"></p><p><img src="http://images.hellocode.top/202211171528146.png" alt="13" loading="lazy"></p><ul><li><strong>发送窗口接收到<code>ACK</code>帧的部分不会超时重传</strong></li></ul><h3 id="_2、ppp协议" tabindex="-1"><a class="header-anchor" href="#_2、ppp协议" aria-hidden="true">#</a> 2、PPP协议</h3><blockquote><p>数据链路层协议，用于规定帧格式</p></blockquote><p><img src="http://images.hellocode.top/202211171529476.png" alt="14" loading="lazy"></p><h4 id="_2-1-透明传输" tabindex="-1"><a class="header-anchor" href="#_2-1-透明传输" aria-hidden="true">#</a> 2.1. 透明传输</h4><h5 id="_1字节填充法" tabindex="-1"><a class="header-anchor" href="#_1字节填充法" aria-hidden="true">#</a> ①字节填充法</h5><blockquote><p>面向字节的异步链路采用<strong>插入转义字符</strong>的字节填充法</p></blockquote><ul><li>如<code>PPP</code>帧的标志字段取值为<code>7E(16进制)</code>，如果数据中出现<code>7E</code>则需要在数据前插入<strong>转义字符7D</strong>(<code>16</code>进制)，并<strong>将原来的7E减20</strong>(<code>16</code>进制)，所以<code>7E</code>在数据中最终会变成<code>7D5E</code></li><li>**如果数据中有转义字符7D怎么办呢？**可以在转义字符<code>7D</code>前再加一个转义字符<code>7D</code>，并将数据的<code>7D</code>减<code>20(16进制)</code>，于是转义字符<code>7D</code>在数据中最终会变成<code>7D5D</code></li><li>数据中出现的每一个<code>ASCII</code>码控制字符【<strong>数值小于20(16进制)的字符</strong>】，则在<strong>该字符前插入一个7D，同时将该字符的编码加上20(16进制)</strong></li><li>接收方只需要反变换即可恢复出原来的帧的数据部分</li></ul><p><img src="http://images.hellocode.top/202211171529528.png" alt="15" loading="lazy"></p><h5 id="_2比特填充法" tabindex="-1"><a class="header-anchor" href="#_2比特填充法" aria-hidden="true">#</a> ②比特填充法</h5><blockquote><p>面向比特的同步链路采用<strong>插入比特0</strong>的比特填充法</p></blockquote><ul><li><strong>发送方</strong>：对帧的数据部分进行扫描(一般由硬件实现)。只要<strong>发现5个连续的比特1，则立即填充1个比特0</strong></li><li><strong>接收方</strong>：对帧的数据部分进行扫描(一般由硬件实现)。只要<strong>发现5个连续的比特1，就把其后的1个比特0删除</strong></li></ul><p><img src="http://images.hellocode.top/202211171529079.png" alt="16" loading="lazy"></p><h4 id="_2-2-ppp的差错检测" tabindex="-1"><a class="header-anchor" href="#_2-2-ppp的差错检测" aria-hidden="true">#</a> 2.2. PPP的差错检测</h4>',76),y=s("blockquote",null,[s("p",null,[l("接收方每收到一个"),s("code",null,"PPP"),l("帧，就进行"),s("code",null,"CRC"),l("检验(多项式)。若"),s("code",null,"CRC"),l("检验正确，就收下这个帧；反之就丢弃这个帧(不可靠传输服务)。"),s("strong",null,"检验由尾部的FCS实现")]),s("p",null,[l("用于检验的多项式为"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msup",null,[s("mi",null,"X"),s("mn",null,"16")]),s("mo",null,"+"),s("msup",null,[s("mi",null,"X"),s("mn",null,"12")]),s("mo",null,"+"),s("msup",null,[s("mi",null,"X"),s("mn",null,"5")]),s("mo",null,"+"),s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"X^{16}+X^{12}+X^5+1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8974em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.07847em"}},"X"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"16")])])])])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8974em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.07847em"}},"X"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"12")])])])])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8974em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.07847em"}},"X"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"5")])])])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])])])],-1),k=a('<p><img src="http://images.hellocode.top/202211171529617.png" alt="17" loading="lazy"></p><h3 id="_3、媒体接入层" tabindex="-1"><a class="header-anchor" href="#_3、媒体接入层" aria-hidden="true">#</a> 3、媒体接入层</h3><blockquote><p>共享信道要着重考虑的一个问题就是如何协调多个发送和接收站点对一个共享传输媒体的占用，即<strong>媒体接入控制MAC</strong>(<code>Medium Access Control</code>)</p></blockquote><p><strong>复用(Multiplexing)就是通过<mark>一条物理线路同时传输多路用户</mark>的信号。</strong><br>当网络中传输媒体的传输容量大于多条单一信道的总通信量时，可利用复用技术在一条物理线路上建立多条通信信道来充分利用传输媒体的带宽</p><p><img src="http://images.hellocode.top/202211171529337.png" alt="18" loading="lazy"></p><h4 id="_3-1-静态划分信道" tabindex="-1"><a class="header-anchor" href="#_3-1-静态划分信道" aria-hidden="true">#</a> 3.1. 静态划分信道</h4><h5 id="_1频分复用fdm" tabindex="-1"><a class="header-anchor" href="#_1频分复用fdm" aria-hidden="true">#</a> ①频分复用FDM</h5><blockquote><p>将传输线路的频带资源<strong>划分成多个子频带，形成多个子信道</strong>。各子信道之间留出隔离频带，以免造成子信道间干扰。当多个信号输入一个多路复用器时，这个复用器<strong>将每一个信号调制到不同频率的载波上</strong>，接收端由相应的分用器通过滤波将各路信号分隔开，将合成的复用信号恢复成原始的多路信号</p></blockquote><p><img src="http://images.hellocode.top/202211171529973.png" alt="19" loading="lazy"></p><h5 id="_2时分复用tdm" tabindex="-1"><a class="header-anchor" href="#_2时分复用tdm" aria-hidden="true">#</a> ②时分复用TDM</h5><blockquote><p>将时间划分为一个个时隙，将带宽资源按照时隙轮流分配给不同的用户，每对用户只在所分配时隙里使用线路传输数据。<br>时分复用技术将时间划分为一段段等长的时分复用帧，<strong>每一个时分复用的用户在每一个时分复用帧中占用固定序号的时隙</strong>。每个用户所占的时隙是周期性出现的，其周期就是时分复用帧的长度</p></blockquote><p><img src="http://images.hellocode.top/202211171529571.png" alt="20" loading="lazy"></p><h5 id="_3波分复用wdm" tabindex="-1"><a class="header-anchor" href="#_3波分复用wdm" aria-hidden="true">#</a> ③波分复用WDM</h5><blockquote><p>波分复用其实就是光的频分复用。经过光调制，分别将光载波变换到不同波长。这些光波经过光复用器就可以在一根光纤中传输。到达终点后用光分用器将不同波长的光进行还原得到信息<br>光信号传输一段距离后会衰减，对衰减的光信号必须进行放大才能继续传输</p></blockquote><p><img src="http://images.hellocode.top/202211171529830.png" alt="21" loading="lazy"></p><h5 id="_4码分复用cdm" tabindex="-1"><a class="header-anchor" href="#_4码分复用cdm" aria-hidden="true">#</a> ④码分复用CDM</h5><blockquote><p>码分复用<code>CDM</code>(最初用于军事通信)是另一种共享信道的方法。实际上，由于该技术主要用于多址接入，人们更常用的名词是<strong>码分多址CDMA</strong></p><p><code>CDM</code>的每一个用户可以在同样的时间使用同样的频带进行通信，由于各用户使用经过特殊挑选的不同码型，因此各用户之间不会造成干扰</p></blockquote><p>在<code>CDMA</code>中，每一个比特时间再划分为<code>m</code>个短的间隔，称为<strong>码片</strong>。通常<code>m</code>的值是<code>64</code>或<code>128</code><br>使用<code>CDMA</code>的每一个站被指派一个唯一的<code>m bit</code>码片序列</p><ol><li>一个站如果要发送比特<code>1</code>，则发送它自己的<code>m bit</code>码片序列</li><li>一个站如果要发送比特0，则发送它自己的<code>m bit</code>码片序列二进制反码</li></ol><p><img src="http://images.hellocode.top/202211171530478.png" alt="22" loading="lazy"></p><p><strong>码片序列挑选原则：</strong></p>',21),x=s("ol",null,[s("li",null,[s("p",null,[l("分配给每个站的"),s("strong",null,"码片序列必须各不相同"),l("，实际常采用伪随机码序列")])]),s("li",null,[s("p",null,[l("分配给每个站的"),s("strong",null,"码片序列必须相互正交"),l("(规格化内积为"),s("code",null,"0"),l(")")]),s("p",null,[l("令向量"),s("code",null,"S"),l("表示站"),s("code",null,"S"),l("的码片序列，令向量"),s("code",null,"T"),l("表示其他任何站的码片序列。"),s("strong",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"S"),s("mo",{separator:"true"},"⋅"),s("mi",null,"T"),s("mo",{stretchy:"false"},"("),s("mtext",null,"计算方式为码片序列"),s("mi",null,"S"),s("mtext",null,"和"),s("mi",null,"T"),s("mtext",null,"对应项相乘相加再除以长度"),s("mo",{stretchy:"false"},")"),s("mtext",null,"等于"),s("mn",null,"0")]),s("annotation",{encoding:"application/x-tex"},"S·T(计算方式为码片序列S和T对应项相乘相加再除以长度)等于0")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"S"),s("span",{class:"mpunct"},"⋅"),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),s("span",{class:"mopen"},"("),s("span",{class:"mord cjk_fallback"},"计算方式为码片序列"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"S"),s("span",{class:"mord cjk_fallback"},"和"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),s("span",{class:"mord cjk_fallback"},"对应项相乘相加再除以长度"),s("span",{class:"mclose"},")"),s("span",{class:"mord cjk_fallback"},"等于"),s("span",{class:"mord"},"0")])])]),l(" 即规格化内积等于0")]),l("，此时会有以下四个特征↓。")]),s("p",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"S"),s("mo",{separator:"true"},"⋅"),s("mi",null,"T"),s("mtext",null,"恒等于"),s("mn",null,"0"),s("mtext",null,"；"),s("mi",null,"S"),s("mo",{separator:"true"},"⋅"),s("mover",{accent:"true"},[s("mi",null,"T"),s("mo",{stretchy:"true"},"‾")]),s("mtext",null,"恒等于"),s("mn",null,"0"),s("mtext",null,"；"),s("mi",null,"S"),s("mo",{separator:"true"},"⋅"),s("mi",null,"S"),s("mtext",null,"恒等于"),s("mn",null,"1"),s("mtext",null,"；"),s("mi",null,"S"),s("mo",{separator:"true"},"⋅"),s("mover",{accent:"true"},[s("mi",null,"S"),s("mo",{stretchy:"true"},"‾")]),s("mtext",null,"恒等于"),s("mo",null,"−"),s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"S·T恒等于0；S·\\overline T恒等于0；S·S恒等于1；S·\\overline S恒等于-1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.9667em","vertical-align":"-0.0833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"S"),s("span",{class:"mpunct"},"⋅"),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),s("span",{class:"mord cjk_fallback"},"恒等于"),s("span",{class:"mord"},"0"),s("span",{class:"mord cjk_fallback"},"；"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"S"),s("span",{class:"mpunct"},"⋅"),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord overline"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8833em"}},[s("span",{style:{top:"-3em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T")])]),s("span",{style:{top:"-3.8033em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"overline-line",style:{"border-bottom-width":"0.04em"}})])])])])]),s("span",{class:"mord cjk_fallback"},"恒等于"),s("span",{class:"mord"},"0"),s("span",{class:"mord cjk_fallback"},"；"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"S"),s("span",{class:"mpunct"},"⋅"),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"S"),s("span",{class:"mord cjk_fallback"},"恒等于"),s("span",{class:"mord"},"1"),s("span",{class:"mord cjk_fallback"},"；"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"S"),s("span",{class:"mpunct"},"⋅"),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord overline"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8833em"}},[s("span",{style:{top:"-3em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"S")])]),s("span",{style:{top:"-3.8033em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"overline-line",style:{"border-bottom-width":"0.04em"}})])])])])]),s("span",{class:"mord cjk_fallback"},"恒等于"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])])])])],-1),q=a('<p><img src="http://images.hellocode.top/202211171530323.png" alt="23" loading="lazy"></p><p><img src="http://images.hellocode.top/202211171530958.png" alt="24" loading="lazy"></p><p><img src="http://images.hellocode.top/202211171530297.png" alt="25" loading="lazy"></p><p>习题<code>2</code>的<code>B、C、D</code>的情况同理↑</p><p><img src="http://images.hellocode.top/202211171530341.png" alt="26" loading="lazy"></p><h5 id="复用与多址的区别" tabindex="-1"><a class="header-anchor" href="#复用与多址的区别" aria-hidden="true">#</a> 复用与多址的区别</h5><blockquote><p><strong><mark>复用</mark><strong>是将单一媒体的频带资源划分成很多子信道，这些</strong>子信道之间相互独立，互不干扰</strong>。从媒体的整体频带资源上看，<strong>每个子信道只占用该媒体频带资源的一部分</strong></p></blockquote><blockquote><p><mark><strong>多址</strong></mark>(更确切地应该称为多点接入)处理的是<strong>动态分配信道给用户</strong>。这在用户仅仅暂时性地占用信道的应用中是必须的，而所有的移动通信系统基本上都属于这种情况。相反，在信道永久地分配给用户的应用中，多址是不需要的(对于无线广播或电视广播站就是这样)</p></blockquote><p>频分复用<code>FDM</code>和时分复用<code>TDM</code>可用于多点接入，相应名词是<strong>频分多址FDMA</strong>和<strong>时分多址TDMA</strong>。从某种程度上，<strong>FDMA、TDMA、CDMA可以分别看作是FDM、TDM、CDM的应用</strong></p><h4 id="_3-2-动态接入控制" tabindex="-1"><a class="header-anchor" href="#_3-2-动态接入控制" aria-hidden="true">#</a> 3.2. 动态接入控制</h4><h5 id="随机接入" tabindex="-1"><a class="header-anchor" href="#随机接入" aria-hidden="true">#</a> 随机接入</h5><blockquote><p>多个主机连接到一根总线上，当信息同一时间传送相遇时就会发生碰撞。<br>如何协调各主机的工作，使信息避免碰撞是很重要的</p></blockquote><h6 id="载波监听多址接入-碰撞检测-csma-cd-【不用于无线网络】" tabindex="-1"><a class="header-anchor" href="#载波监听多址接入-碰撞检测-csma-cd-【不用于无线网络】" aria-hidden="true">#</a> 载波监听多址接入/碰撞检测(CSMA/CD)【不用于无线网络】</h6><blockquote><p><code>96</code>比特时间是指发送<code>96</code>比特所需要的时间，也称为<strong>帧间最小间隔</strong>。其作用是是接收方可以检测出一个帧的结束，同时也使得其他站点都能有机会平等竞争信道并发送帧</p></blockquote><p><img src="http://images.hellocode.top/202211171530958.png" alt="27" loading="lazy"></p><p><img src="http://images.hellocode.top/202211171530217.png" alt="28" loading="lazy"></p><p><strong>争用期(碰撞窗口)</strong></p><p><img src="http://images.hellocode.top/202211171530200.png" alt="29" loading="lazy"></p>',18),v=s("p",null,[s("em",null,[l("①为什么"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"τ"),s("mo",null,"−"),s("mfrac",null,[s("mi",null,"δ"),s("mn",null,"2")])]),s("annotation",{encoding:"application/x-tex"},"\\tau - \\frac{\\delta}{2}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.1132em"}},"τ"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.2251em","vertical-align":"-0.345em"}}),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8801em"}},[s("span",{style:{top:"-2.655em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"2")])])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.394em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.03785em"}},"δ")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.345em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})])])])]),l("时刻发送碰撞？")])],-1),P=s("blockquote",null,[s("p",null,[l("当"),s("code",null,"D"),l("开始发送的时，"),s("code",null,"A"),l("已经走了"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"τ"),s("mo",null,"−"),s("mi",null,"δ")]),s("annotation",{encoding:"application/x-tex"},"\\tau - \\delta")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.1132em"}},"τ"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03785em"}},"δ")])])]),l("时间，所以剩下路程所需要的时间是"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"δ")]),s("annotation",{encoding:"application/x-tex"},"\\delta")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03785em"}},"δ")])])]),l("。"),s("br"),l("又因为"),s("code",null,"A"),l("和"),s("code",null,"D"),l("发送速度是相同的，因此对于"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"δ"),s("mtext",null,"时间")]),s("annotation",{encoding:"application/x-tex"},"\\delta时间")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03785em"}},"δ"),s("span",{class:"mord cjk_fallback"},"时间")])])]),l("的路程，每人只需要走"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mstyle",{displaystyle:"true",scriptlevel:"0"},[s("mfrac",null,[s("mi",null,"δ"),s("mn",null,"2")])]),s("mtext",null,"时间")]),s("annotation",{encoding:"application/x-tex"},"\\dfrac{\\delta}{2}时间")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"2.0574em","vertical-align":"-0.686em"}}),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.3714em"}},[s("span",{style:{top:"-2.314em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2")])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.677em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.03785em"}},"δ")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.686em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})]),s("span",{class:"mord cjk_fallback"},"时间")])])]),l("就会相遇，即碰撞"),s("br"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mtext",null,"碰撞时刻"),s("mo",null,"="),s("mi",null,"τ"),s("mo",null,"−"),s("mi",null,"δ"),s("mo",null,"+"),s("mstyle",{displaystyle:"true",scriptlevel:"0"},[s("mfrac",null,[s("mi",null,"δ"),s("mn",null,"2")])]),s("mo",null,"="),s("mi",null,"τ"),s("mo",null,"−"),s("mstyle",{displaystyle:"true",scriptlevel:"0"},[s("mfrac",null,[s("mi",null,"δ"),s("mn",null,"2")])])]),s("annotation",{encoding:"application/x-tex"},"碰撞时刻=\\tau - \\delta +\\dfrac{\\delta}{2}=\\tau -\\dfrac{\\delta}{2}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord cjk_fallback"},"碰撞时刻"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.1132em"}},"τ"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7778em","vertical-align":"-0.0833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03785em"}},"δ"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"2.0574em","vertical-align":"-0.686em"}}),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.3714em"}},[s("span",{style:{top:"-2.314em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2")])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.677em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.03785em"}},"δ")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.686em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.1132em"}},"τ"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"2.0574em","vertical-align":"-0.686em"}}),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.3714em"}},[s("span",{style:{top:"-2.314em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2")])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.677em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.03785em"}},"δ")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.686em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})])])])])])],-1),_=s("p",null,[s("em",null,[l("②为什么"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"t"),s("mo",null,"="),s("mi",null,"τ")]),s("annotation",{encoding:"application/x-tex"},"t=\\tau")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6151em"}}),s("span",{class:"mord mathnormal"},"t"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4306em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.1132em"}},"τ")])])]),l("时，D检测到碰撞？")])],-1),f=s("blockquote",null,[s("p",null,[l("根据上边推论，发现"),s("code",null,"D"),l("走了"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mstyle",{displaystyle:"true",scriptlevel:"0"},[s("mfrac",null,[s("mi",null,"δ"),s("mn",null,"2")])]),s("mtext",null,"的时间")]),s("annotation",{encoding:"application/x-tex"},"\\dfrac{\\delta}{2}的时间")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"2.0574em","vertical-align":"-0.686em"}}),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.3714em"}},[s("span",{style:{top:"-2.314em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2")])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.677em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.03785em"}},"δ")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.686em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})]),s("span",{class:"mord cjk_fallback"},"的时间")])])]),l("路程后就发送了碰撞，此时它开始返回，经过同样的时间可以回到"),s("code",null,"D"),s("br"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mtext",null,"检测到碰撞时间"),s("mo",null,"="),s("mstyle",{displaystyle:"true",scriptlevel:"0"},[s("mfrac",null,[s("mi",null,"δ"),s("mn",null,"2")])]),s("mo",null,"+"),s("mstyle",{displaystyle:"true",scriptlevel:"0"},[s("mfrac",null,[s("mi",null,"δ"),s("mn",null,"2")])]),s("mo",null,"="),s("mi",null,"δ")]),s("annotation",{encoding:"application/x-tex"},"检测到碰撞时间=\\dfrac{\\delta}{2}+\\dfrac{\\delta}{2}=\\delta")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord cjk_fallback"},"检测到碰撞时间"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"2.0574em","vertical-align":"-0.686em"}}),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.3714em"}},[s("span",{style:{top:"-2.314em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2")])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.677em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.03785em"}},"δ")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.686em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"2.0574em","vertical-align":"-0.686em"}}),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.3714em"}},[s("span",{style:{top:"-2.314em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2")])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.677em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.03785em"}},"δ")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.686em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03785em"}},"δ")])])])])],-1),C=s("p",null,[s("em",null,[l("③为什么"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"2"),s("mi",null,"τ"),s("mo",null,"−"),s("mi",null,"δ")]),s("annotation",{encoding:"application/x-tex"},"2\\tau - \\delta")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"2"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.1132em"}},"τ"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03785em"}},"δ")])])]),l("时，A检测到碰撞？")])],-1),A=s("blockquote",null,[s("p",null,[l("与"),s("code",null,"D"),l("检测到碰撞同理，"),s("code",null,"A"),l("走了"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"τ"),s("mo",null,"−"),s("mstyle",{displaystyle:"true",scriptlevel:"0"},[s("mfrac",null,[s("mi",null,"δ"),s("mn",null,"2")])]),s("mtext",null,"时间")]),s("annotation",{encoding:"application/x-tex"},"\\tau -\\dfrac{\\delta}{2}时间")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.1132em"}},"τ"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"2.0574em","vertical-align":"-0.686em"}}),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.3714em"}},[s("span",{style:{top:"-2.314em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2")])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.677em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.03785em"}},"δ")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.686em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})]),s("span",{class:"mord cjk_fallback"},"时间")])])]),l("，因此往回走也是这么多时间"),s("br"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"A"),s("mtext",null,"检测到碰撞时间"),s("mo",null,"="),s("mi",null,"τ"),s("mo",null,"−"),s("mstyle",{displaystyle:"true",scriptlevel:"0"},[s("mfrac",null,[s("mi",null,"δ"),s("mn",null,"2")])]),s("mo",null,"+"),s("mi",null,"τ"),s("mo",null,"−"),s("mstyle",{displaystyle:"true",scriptlevel:"0"},[s("mfrac",null,[s("mi",null,"δ"),s("mn",null,"2")])]),s("mo",null,"="),s("mn",null,"2"),s("mi",null,"τ"),s("mo",null,"−"),s("mi",null,"δ")]),s("annotation",{encoding:"application/x-tex"},"A检测到碰撞时间=\\tau -\\dfrac{\\delta}{2}+\\tau -\\dfrac{\\delta}{2}=2\\tau - \\delta")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal"},"A"),s("span",{class:"mord cjk_fallback"},"检测到碰撞时间"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.1132em"}},"τ"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"2.0574em","vertical-align":"-0.686em"}}),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.3714em"}},[s("span",{style:{top:"-2.314em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2")])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.677em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.03785em"}},"δ")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.686em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.1132em"}},"τ"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"2.0574em","vertical-align":"-0.686em"}}),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.3714em"}},[s("span",{style:{top:"-2.314em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2")])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.677em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.03785em"}},"δ")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.686em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"2"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.1132em"}},"τ"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03785em"}},"δ")])])])])],-1),M=s("ul",null,[s("li",null,[l("主机最多经过"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"2"),s("mi",null,"τ"),s("mo",{stretchy:"false"},"("),s("mtext",null,"即"),s("mi",null,"δ"),s("mo",null,"→"),s("mn",null,"0"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"2\\tau(即\\delta→0)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"2"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.1132em"}},"τ"),s("span",{class:"mopen"},"("),s("span",{class:"mord cjk_fallback"},"即"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03785em"}},"δ"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"→"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"0"),s("span",{class:"mclose"},")")])])]),l("的时长就可以检测到本次发送是否遭受了碰撞")]),s("li",null,[l("因此，以太网的端到端往返传播时延"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"2"),s("mi",null,"τ")]),s("annotation",{encoding:"application/x-tex"},"2\\tau")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"2"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.1132em"}},"τ")])])]),l("称为"),s("em",null,"争用期"),l("或"),s("em",null,"碰撞窗口期")]),s("li",null,"经过争用期这段时间还没有检测到碰撞，才能肯定这次发送不会发生碰撞"),s("li",null,[l("每一个主机在自己发送帧之后的一小段时间内，存在着遭遇碰撞的可能性。这一小段时间是不确定的。它取决于另一个发送帧的主机到本主机的距离，但"),s("em",null,"不会超过总线的端到端往返传播时延，即一个争用期时间")]),s("li",null,[l("显然，在以太网中发生帧的主机越多，"),s("em",null,"端到端往返传播时延越大，发生碰撞的可能性就越大"),l("。因此，共享式以太网不能连接太多的主机，"),s("em",null,"使用的总线也不能太长"),s("ul",null,[s("li",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"10"),s("mi",null,"M"),s("mi",null,"b"),s("mi",{mathvariant:"normal"},"/"),s("mi",null,"s")]),s("annotation",{encoding:"application/x-tex"},"10Mb/s")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"10"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"M"),s("span",{class:"mord mathnormal"},"b"),s("span",{class:"mord"},"/"),s("span",{class:"mord mathnormal"},"s")])])]),l("以太网把争用期定为"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"512"),s("mi",null,"b"),s("mi",null,"i"),s("mi",null,"t")]),s("annotation",{encoding:"application/x-tex"},"512bit")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mord"},"512"),s("span",{class:"mord mathnormal"},"bi"),s("span",{class:"mord mathnormal"},"t")])])]),l("发送时间，即"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"51.2"),s("mi",null,"μ"),s("mi",null,"s")]),s("annotation",{encoding:"application/x-tex"},"51.2\\mu s")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8389em","vertical-align":"-0.1944em"}}),s("span",{class:"mord"},"51.2"),s("span",{class:"mord mathnormal"},"μ"),s("span",{class:"mord mathnormal"},"s")])])]),l("，因此其总线长度不能超过"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"5120"),s("mi",null,"m")]),s("annotation",{encoding:"application/x-tex"},"5120m")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"5120"),s("span",{class:"mord mathnormal"},"m")])])]),l("，但考虑到其他一些因素，如信号衰减等，以太网规定总线长度不能超过"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"2500"),s("mi",null,"m")]),s("annotation",{encoding:"application/x-tex"},"2500m")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"2500"),s("span",{class:"mord mathnormal"},"m")])])])])])])],-1),w=s("p",null,[s("strong",null,"最小帧长")],-1),I=s("p",null,[s("em",null,"为什么需要规定最小帧长？")],-1),T=s("blockquote",null,[s("p",null,[l("假设"),s("code",null,"A"),l("向"),s("code",null,"D"),l("发送帧，如果帧很短的话，在"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"2"),s("mi",null,"τ")]),s("annotation",{encoding:"application/x-tex"},"2\\tau")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"2"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.1132em"}},"τ")])])]),l("内就会将帧发送完毕，帧发送完毕后不会进行碰撞检测，而此时依然有发生碰撞的可能。所以必须保证在"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"2"),s("mi",null,"τ")]),s("annotation",{encoding:"application/x-tex"},"2\\tau")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"2"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.1132em"}},"τ")])])]),l("时间内帧不会被发送完，在这段时间里能够保持碰撞检测")])],-1),z=a('<ul><li>以太网规定最小帧长为64字节，即<code>512</code>比特(<code>512</code>比特即争用期) <ul><li>如果要发送的<em>数据非常少，那么必须加入一些填充字节</em>，使帧长不小于<code>64</code>字节</li></ul></li><li>以太网的最小帧长保证了主机可在帧发送完成之前就检测到该帧的发送过程中是否遭遇了碰撞 <ul><li>如果在争用期没有检测到碰撞，那么后续发送的数据就一定不会发生碰撞</li><li>如果在争用期检测到碰撞就立即中止发送，这时已经发送出去的数据一定小于<code>64</code>字节，因此<em>凡长度小于<code>64</code>字节的帧都是由于碰撞检测而异常中止的无效帧</em></li></ul></li></ul><p><strong>最大帧长</strong></p><blockquote><p>当帧过长时，其他线路会迟迟得不到资源，同时也可能导致接收方缓冲区溢出，因此帧的最大长度也有规定。</p></blockquote><p><img src="http://images.hellocode.top/202211171530210.png" alt="30" loading="lazy"></p><p><strong>退避算法</strong></p><blockquote><p>当帧发送碰撞后会停止发送，隔一段时间后再次发送，而具体隔多少时间再发送需要根据退避算法得出</p></blockquote><p><img src="http://images.hellocode.top/202211171531745.png" alt="31" loading="lazy"></p><p><strong>极限信道利用率</strong></p>',8),D=s("ul",null,[s("li",null,[s("p",null,"各主机发送帧都不会产生碰撞")]),s("li",null,[s("p",null,"总线一旦空闲就有某个主机立即发送帧")]),s("li",null,[s("p",null,[l("每帧的发送时延为"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"T"),s("mn",null,"0")])]),s("annotation",{encoding:"application/x-tex"},"T_0")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8333em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.1389em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"0")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])]),l("，传播时延为"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"τ")]),s("annotation",{encoding:"application/x-tex"},"\\tau")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4306em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.1132em"}},"τ")])])]),l("，占用信道的时间为"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"T"),s("mn",null,"0")]),s("mo",null,"+"),s("mi",null,"τ")]),s("annotation",{encoding:"application/x-tex"},"T_0+\\tau")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8333em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.1389em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"0")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4306em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.1132em"}},"τ")])])])]),s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("mtext",null,"极限信道利用率"),s("msub",null,[s("mi",null,"S"),s("mrow",null,[s("mi",null,"m"),s("mi",null,"a"),s("mi",null,"x")])]),s("mo",null,"="),s("mfrac",null,[s("msub",null,[s("mi",null,"T"),s("mn",null,"0")]),s("mrow",null,[s("msub",null,[s("mi",null,"T"),s("mn",null,"0")]),s("mo",null,"+"),s("mi",null,"τ")])]),s("mo",null,"="),s("mfrac",null,[s("mn",null,"1"),s("mrow",null,[s("mn",null,"1"),s("mo",null,"+"),s("mfrac",null,[s("mi",null,"τ"),s("msub",null,[s("mi",null,"T"),s("mn",null,"0")])])])]),s("mspace",{linebreak:"newline"}),s("mtext",null,"为了令"),s("msub",null,[s("mi",null,"S"),s("mrow",null,[s("mi",null,"m"),s("mi",null,"a"),s("mi",null,"x")])]),s("mtext",null,"尽量大，所以应该让"),s("mfrac",null,[s("mi",null,"τ"),s("msub",null,[s("mi",null,"T"),s("mn",null,"0")])]),s("mtext",null,"尽量小"),s("mspace",{linebreak:"newline"}),s("mtext",null,"即"),s("mi",null,"τ"),s("mtext",null,"尽量小"),s("mo",{stretchy:"false"},"("),s("mtext",null,"以太网端到端距离收到限制"),s("mo",{stretchy:"false"},")"),s("mtext",null,"或"),s("msub",null,[s("mi",null,"T"),s("mn",null,"0")]),s("mtext",null,"尽量大"),s("mo",{stretchy:"false"},"("),s("mtext",null,"以太网帧尽量长"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"}," 极限信道利用率S_{max}=\\dfrac{T_0}{T_0+\\tau}=\\dfrac{1}{1+\\dfrac{\\tau}{T_0}}\\\\ 为了令S_{max}尽量大，所以应该让\\dfrac{\\tau}{T_0}尽量小\\\\ 即\\tau尽量小(以太网端到端距离收到限制)或T_0尽量大(以太网帧尽量长) ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8333em","vertical-align":"-0.15em"}}),s("span",{class:"mord cjk_fallback"},"极限信道利用率"),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"S"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.1514em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.0576em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"ma"),s("span",{class:"mord mathnormal mtight"},"x")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"2.1963em","vertical-align":"-0.836em"}}),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.3603em"}},[s("span",{style:{top:"-2.314em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.1389em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"0")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.1132em"}},"τ")])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.677em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.1389em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"0")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.836em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"3.155em","vertical-align":"-1.8336em"}}),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.3214em"}},[s("span",{style:{top:"-2.11em"}},[s("span",{class:"pstrut",style:{height:"3.1076em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"1"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.1076em"}},[s("span",{style:{top:"-2.314em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.1389em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"0")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.677em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.1132em"}},"τ")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.836em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})])])]),s("span",{style:{top:"-3.3376em"}},[s("span",{class:"pstrut",style:{height:"3.1076em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.7846em"}},[s("span",{class:"pstrut",style:{height:"3.1076em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"1")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.8336em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})])]),s("span",{class:"mspace newline"}),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.9436em","vertical-align":"-0.836em"}}),s("span",{class:"mord cjk_fallback"},"为了令"),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"S"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.1514em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.0576em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"ma"),s("span",{class:"mord mathnormal mtight"},"x")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mord cjk_fallback"},"尽量大，所以应该让"),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.1076em"}},[s("span",{style:{top:"-2.314em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.1389em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"0")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.677em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.1132em"}},"τ")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.836em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})]),s("span",{class:"mord cjk_fallback"},"尽量小")]),s("span",{class:"mspace newline"}),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord cjk_fallback"},"即"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.1132em"}},"τ"),s("span",{class:"mord cjk_fallback"},"尽量小"),s("span",{class:"mopen"},"("),s("span",{class:"mord cjk_fallback"},"以太网端到端距离收到限制"),s("span",{class:"mclose"},")"),s("span",{class:"mord cjk_fallback"},"或"),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.1389em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"0")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mord cjk_fallback"},"尽量大"),s("span",{class:"mopen"},"("),s("span",{class:"mord cjk_fallback"},"以太网帧尽量长"),s("span",{class:"mclose"},")")])])])])])])],-1),S=a('<p><img src="http://images.hellocode.top/202211171531480.png" alt="32" loading="lazy"></p><h6 id="载波监听多点接入-碰撞避免-csma-ca-【用于无线网络】" tabindex="-1"><a class="header-anchor" href="#载波监听多点接入-碰撞避免-csma-ca-【用于无线网络】" aria-hidden="true">#</a> 载波监听多点接入/碰撞避免(CSMA/CA)【用于无线网络】</h6><blockquote><p><code>802.11</code>无线局域网使用<code>CSMA/CA</code>协议，在<code>CSMA</code>的基础上<strong>增加了一个碰撞避免CA功能，而不再实现碰撞检测功能</strong></p><p>由于<strong>不可能避免所有的碰撞，并且无线信道误码率较高</strong>，<code>802.11</code>标准还<strong>使用了数据链路层确认机制</strong>(停止-等待协议)来保证数据被正确接收</p></blockquote><ul><li><p><strong>在无线局域网中，仍然可以使用载波监听多址接入CSMA</strong>，即在发送帧之前先对传输媒体进行载波监听。若发现有其他站在发送帧，就推迟发送以避免碰撞</p></li><li><p><strong>在无线局域网中，不能使用碰撞检测CD</strong>，原因如下：</p><ul><li><p>由于无线信道的传输条件特殊，其信号强度的动态范围非常大，<em><strong>无线网卡上接收到的信号强度往往会远远小于发送信号的强度</strong></em>(可能差百万倍)。如果要在无线网卡上实现碰撞检测<code>CD</code>，对硬件的要求特别高。</p></li><li><p>即使能够在硬件上实现无线局域网的碰撞检测功能，但由于<strong>无线电波传播的特殊性</strong>(存在<strong>隐蔽站</strong>的问题)，<strong>进行碰撞检测的意义也不大(如下)</strong>。而有线网络中信号会随着总线到达各个地方，不会出现隐蔽站</p><p><img src="http://images.hellocode.top/202211171531824.png" alt="33" loading="lazy"></p></li></ul></li><li><p><code>802.11</code>的<code>MAC</code>层标准定义了两种不同的媒体接入控制方式</p><ul><li><strong>分布式协调功能DCF</strong>。在<code>DCF</code>方式下，没有中心控制站点，每个站点使用<code>CSMA/CA</code>协议通过<em><strong>争用信道来获取发送权</strong></em>，这是<code>802.11</code>定义的默认方式</li><li><strong>点协调功能PCF。</strong><code>PCF</code>方式使用集中控制的接入算法(一般在<em><strong>接入点AP实现集中控制</strong></em>)，是<code>802.11</code>定义的可选方式，在实际中较少使用</li></ul></li></ul><p><strong>帧间间隔IFS</strong></p><blockquote><p><code>802.11</code>标准规定，所有的<strong>站点必须在持续检测到信道空闲一段指定时间后才能发送帧</strong>，这段时间称为帧间间隔<code>IFS</code></p></blockquote><p><em>帧间间隔的长短取决于该站点要发送的帧的类型</em></p><ul><li>高优先级帧需要等待的时间较短，因此可优先获得发送权</li><li>低优先级帧需要等待的时间较长。若某个站的低优先级帧还没来得及发送，而其他站的高优先级帧已发送到信道上，则信道变为忙态，因而低优先级帧就只能再推迟发送了。这样就减少了发送碰撞的机会。</li></ul><p><em>常用的两种帧间间隔如下</em></p>',9),L=s("ul",null,[s("li",null,[l("短帧间间隔SIFS("),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"28"),s("mi",null,"μ"),s("mi",null,"m")]),s("annotation",{encoding:"application/x-tex"},"28\\mu m")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8389em","vertical-align":"-0.1944em"}}),s("span",{class:"mord"},"28"),s("span",{class:"mord mathnormal"},"μ"),s("span",{class:"mord mathnormal"},"m")])])]),l(")。这是最短的帧间间隔，用来分隔开属于一次对话的各帧。一个站点应当能够在这段时间内从发送方式切换到接收方式。使用"),s("code",null,"SIFS"),l("的帧类型由"),s("code",null,"ACK"),l("帧、"),s("code",null,"CTS"),l("帧、由过长的"),s("code",null,"MAC"),l("帧分片后的数据帧、以及所有回答"),s("code",null,"AP"),l("探询的帧和在"),s("code",null,"PCF"),l("方式中接入点"),s("code",null,"AP"),l("发送出的任何帧")]),s("li",null,[l("DCF帧间间隔DIFS("),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"128"),s("mi",null,"μ"),s("mi",null,"s")]),s("annotation",{encoding:"application/x-tex"},"128\\mu s")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8389em","vertical-align":"-0.1944em"}}),s("span",{class:"mord"},"128"),s("span",{class:"mord mathnormal"},"μ"),s("span",{class:"mord mathnormal"},"s")])])]),l(")。它比短帧间间隔"),s("code",null,"SIFS"),l("要长得多，在"),s("code",null,"DCF"),l("方式中用来发送数据帧和管理帧")])],-1),R=a('<p><strong>工作原理</strong></p><p><img src="http://images.hellocode.top/202211171531860.png" alt="34" loading="lazy"></p><p><em>①为什么源站检测到信道空闲后，还需要等待DIFS时间才将帧发送呢？</em></p><blockquote><p>因为其他站此时可能有优先级更高的帧需要发送，因此有<code>DIFS</code>时间进行缓冲，若这个时间内没有高优先级的帧要发送，则说明信道是真正的空闲</p></blockquote><p><em>②为什么目的站接收到帧后还需要等到SIFS时间才返回ACK确认帧呢？</em></p><blockquote><p><code>SIFS</code>是最短的帧间间隔，用来分割一次对话的各帧，在这个时间里由接收状态转变为发送状态</p></blockquote><p><em>③当其他站要发送数据，但是发现此时信道正忙时就会退避一段时间，等信道不忙后再进行操作，接着等待DIFS时间(与①同理)，但为什么等待了DIFS时间后还要退避一段随机时间呢？</em></p><blockquote><p>因为可能有多个站点在信道忙时都想发送帧，因此它们都会被搁置直至信道不忙，在<code>DIFS</code>时间后他们会同时发送，而实际上多个站点同时发送数据会碰撞。因此需要一个随机时间将他们进行错峰发送。</p></blockquote><p><strong>退避算法</strong></p><blockquote><p>多个站点发送冲突时，各个站点需要退避一段随机时间再进行操作</p></blockquote><p><em>以下情况必须使用退避算法</em></p><ul><li>在发送数据帧之前检测到信道处于忙状态时</li><li>在每一次重传一个数据帧时</li><li>在每一次成功发送后要连续发送下一个帧时(这是为了避免一个站点长时间占用通道)</li></ul><p><em>过程</em></p>',13),F=s("ul",null,[s("li",null,[l("在执行退避算法时，站点为退避计时器设置一个随机的退避时间 "),s("ul",null,[s("li",null,[l("当退避计时器的时间减小到"),s("code",null,"0"),l("，就开始发送数据")]),s("li",null,[l("当退避计时器的时间还未减小到"),s("code",null,"0"),l("时信道又转变为忙状态，这时就冻结退避计时器的数值，重新等待信道变为空闲，再经过"),s("code",null,"DIFS"),l("后，继续启动退避计时器")])])]),s("li",null,[l("在进行第"),s("code",null,"i"),l("次退避时，退避时间在时隙编号"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",{stretchy:"false"},"{"),s("mn",null,"0"),s("mo",{separator:"true"},","),s("mn",null,"1"),s("mo",{separator:"true"},","),s("mi",{mathvariant:"normal"},"."),s("mi",{mathvariant:"normal"},"."),s("mo",{separator:"true"},","),s("msup",null,[s("mn",null,"2"),s("mrow",null,[s("mi",null,"i"),s("mo",null,"+"),s("mn",null,"1")])]),s("mo",null,"−"),s("mn",null,"1"),s("mo",{stretchy:"false"},"}")]),s("annotation",{encoding:"application/x-tex"},"\\{0,1,..,2^{i+1}-1\\}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0747em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"{"),s("span",{class:"mord"},"0"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},".."),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8247em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"i"),s("span",{class:"mbin mtight"},"+"),s("span",{class:"mord mtight"},"1")])])])])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},"}")])])]),l("中随机选择一个，然后乘以基本退避时间(也就是一个时隙的长度)就可以得到随机的退避时间。这样做时为了使不同站点选择相同退避时间的概率减少。当时隙编号达到"),s("code",null,"255"),l("时(对应第"),s("code",null,"6"),l("次退避)就不再增加了")])],-1),H=a(`<p><img src="http://images.hellocode.top/202211171531018.png" alt="35" loading="lazy"></p><p><strong>信道预约</strong></p><blockquote><p>为了尽可能减少碰撞的概率和降低碰撞的影响，<code>802.11</code>标准允许要发送数据的站点对信道进行预约</p></blockquote><ol><li>源站在发送数据帧之前先发送一个短的控制帧，称为请求发生RTS，它包括源地址、目的地址以及这次通信(包括相应的确认帧)所需的持续时间</li><li>若目的站正确收到源站发来的<code>RTS</code>帧，且媒体空闲，就发送一个响应控制帧，称为允许发送CTS，它也包括这次通信所需的持续时间<code>从RTS帧中将此持续时间复制到CTS帧中</code>。</li><li>源站收到<code>CTS</code>帧后，再等待一段时间<code>SIFS</code>后，就可发送其数据帧 <ul><li>如果RTS帧发送碰撞，源站就收不到CTS帧，需执行退避算法重传RTS帧</li><li>由于RTS帧和CTS帧很短，发生碰撞的概率、碰撞产生的开销及本身的开销都很小。而对于一般的数据帧，其发送时延往往大于传播时延(因为是局域网)，碰撞的概率很大，且一旦发生碰撞而导致数据帧重发就会浪费很多时间，因此用很小的代价对信道进行预约往往是值得的。<code>802.11</code>标准规定了<code>3</code>种情况供用户选择 <ul><li>使用<code>RTS</code>帧和<code>CTS</code>帧</li><li>不使用<code>RTS</code>帧和<code>CTS</code>帧</li><li>只有当数据帧的长度超过某一数值时才使用<code>RTS</code>帧和<code>CTS</code>帧</li></ul></li></ul></li><li>若目的站正确收到了源站发来的数据帧，在等待时间<code>SIFS</code>后，就向源站发送确认帧<code>ACK</code></li><li>除源站和目的站以外的其他各站，在收到CTS帧(或数据帧)后就推迟接入到无线局域网中。这样就保证了源站和目的站之间的通信不会收到其他站的干扰。</li></ol><p><img src="http://images.hellocode.top/202211171531879.png" alt="36" loading="lazy"></p><p><strong>虚拟载波监听</strong></p><blockquote><p>除<code>RTS</code>帧和<code>CTS</code>帧会携带通信需要持续的时间，数据帧也能携带通信需要持续的时间，这称为<code>802.11</code>的虚拟载波监听机制</p></blockquote><ul><li>由于利用虚拟载波监听机制，站点只要监听到RTS帧、CTS帧或数据帧中的任何一个，就能知道信道被占用的持续时间，而不需要真正监听到信道上的信号，因此虚拟载波监听机制能减少隐蔽站带来的碰撞问题</li><li>如下图，<code>A</code>与<code>C</code>虽然互相覆盖不到，但是C可收到B发出的关于A的CTS帧，从而得知A需要占用信道的时间。在这段时间里，<code>C</code>不发送数据，从而解决隐蔽站带来的碰撞问题</li></ul><p><img src="http://images.hellocode.top/202211171531601.png" alt="37" loading="lazy"></p><h3 id="_4、mac地址、ip地址和arp协议" tabindex="-1"><a class="header-anchor" href="#_4、mac地址、ip地址和arp协议" aria-hidden="true">#</a> 4、MAC地址、IP地址和ARP协议</h3><h4 id="_4-1-mac地址" tabindex="-1"><a class="header-anchor" href="#_4-1-mac地址" aria-hidden="true">#</a> 4.1. MAC地址</h4><blockquote><p><code>MAC</code>地址是以太网的<code>MAC</code>子层所使用的的地址</p></blockquote><ul><li>只有<em>一条路径的信道不需要地址</em>，因为没得选</li><li>当多个主机连接在同一个广播信道上，要想实现两个主机之间的通信，则<strong>每个主机都必须有一个唯一的标识，即一个数据链路层地址</strong></li><li>在每个主机发送的帧中必须携带标识发送主机和接收主机的地址。由于这类地址是用于<strong>媒体接入控制MAC(Media Access Control)</strong>，因此这类地址被称为<code>MAC地址</code><ul><li><strong>MAC地址一般被固化在网卡</strong>(网络适配器)的电可擦可编程只读存储器<code>EEPROM</code>中，因此<code>MAC</code>地址也被称为<mark>硬件地址</mark></li><li><code>MAC</code>地址有时也被称为<mark>物理地址</mark>。但是<code>MAC</code>地址不属于物理层而是属于数据链路层</li></ul></li><li>一般情况下，用户主机会包含两个网络适配器：有线局域网适配器(有线网卡)和无线局域网适配器(无线网卡)。每个网络适配器都有一个全球唯一的<code>MAC</code>地址。而交换机和路由器往往拥有更多的网络接口，所以会拥有更多的<code>MAC</code>地址。综上所述，严格来说，<strong><mark>MAC地址是对网络上各接口的唯一标识，而不是对网络上各设备的唯一标识</mark></strong></li></ul><h5 id="mac地址格式" tabindex="-1"><a class="header-anchor" href="#mac地址格式" aria-hidden="true">#</a> MAC地址格式</h5><p><img src="http://images.hellocode.top/202211171531116.png" alt="38" loading="lazy"></p><p><img src="http://images.hellocode.top/202211171532678.png" alt="39" loading="lazy"></p><p><strong>单播地址、广播地址与多播地址</strong></p><ul><li><strong>单播MAC地址即明确的目的MAC地址</strong>。将此地址填入帧的目的地址栏中，接收到该帧的主机将此地址与自身<code>MAC</code>地址进行匹配，若相同则接收，不同则丢弃</li><li><strong>广播MAC地址为<code>FF-FF-FF-FF-FF-FF</code></strong>，将此地址填入帧的目的地址栏中，接收到该帧的主机检索该地址发现是广播地址，因此接收该帧</li><li><mark><strong>MAC地址中第一字节后4比特为(1,3,5,7,9,B,D,F)时，MAC地址是多播地址</strong></mark>。将此地址填入帧的目的地址栏中，接收到该帧的主机<strong>将此多播地址与自己多播组列表中的地址进行逐一配对</strong>，如果有匹配的项，则接收，否则丢弃</li></ul><h4 id="_4-2-ip地址" tabindex="-1"><a class="header-anchor" href="#_4-2-ip地址" aria-hidden="true">#</a> 4.2. IP地址</h4><blockquote><p><code>IP</code>地址是<code>TCP/IP</code>体系结构的网际层所使用的的地址</p></blockquote><p><code>IP</code>地址是<code>Internet</code>上的主机和路由器所使用的的地址，由两部分信息构成</p><ul><li><strong>网络编号</strong>：标识因特网上数以百万计的网络</li><li><strong>主机编号</strong>：标识同一网络上不同主机(或路由器各接口)</li></ul><p><mark>MAC地址不具备区分不同网络的功能，而IP地址可以通过网络号做到</mark></p><p>如果只是一个<strong>单独网络</strong>，不接入因特网，则使用<strong>MAC地址就足够了</strong>(这不是一般用户的应用方式)<br>如果主机所在的网络<strong>要接入因特网，则IP地址和MAC地址都需要使用</strong></p><p><strong>数据包转发过程中IP地址与MAC地址变换情况</strong></p><p><img src="http://images.hellocode.top/202211171532622.png" alt="40" loading="lazy"></p><ul><li>数据报转发过程中<strong>源IP地址和目的IP地址保持不变</strong></li><li>数据包转发过程中<strong>源MAC地址和目的MAC地址(由ARP协议获得)逐个链路改变</strong></li><li>路由器上有<strong>路由表，记录了要到目的IP地址，先要走哪些路(即下一跳位置)</strong>。所以<code>H1</code>起初只带有目的<code>IP</code>地址，查询路由表后路由器指路，从而知道下一步该往哪里走，从而不断转发直至到达目的地。</li></ul><p><img src="http://images.hellocode.top/202211171532461.png" alt="41" loading="lazy"></p><h4 id="_4-3-arp协议" tabindex="-1"><a class="header-anchor" href="#_4-3-arp协议" aria-hidden="true">#</a> 4.3. ARP协议</h4><blockquote><p>地址解析协议<code>ARP</code>属于<code>TCP/IP</code>体系结构的网际层，其作用是已知设备所分配到的<code>IP</code>地址，使用<code>ARP</code>协议可以通过该IP地址获取到设备的<code>MAC</code>地址</p></blockquote><ul><li><strong>数据的发送需要经过链路，仅仅知道IP地址是无法在数据链路层实现传输的</strong>，因此我们需要得到<code>IP</code>地址与<code>MAC</code>地址的对应关系，即地址解析。</li><li>每台主机都会有一个<strong>ARP高速缓存表，记录有IP地址与MAC地址的对应关系</strong></li><li>初始<code>ARP</code>高速缓存表为空，假设此时<code>B</code>知道<code>C</code>的<code>IP</code>地址，准备发送信息，但是由于不知道<code>C</code>的<code>MAC</code>地址，因此无法封装数据帧，所以此时会<strong>广播</strong>一个**<mark>ARP请求报文(封装在MAC帧中，目的地址为广播地址<code>FF-FF-FF-FF-FF-FF</code>)</mark>**，内容如下： <ul><li>我的<code>IP</code>地址是：<code>xxx </code>；我的<code>MAC</code>地址是：<code>XXX</code>；我想知道<code>C</code>主机的<code>MAC</code>地址是多少？这个广播帧会被该广播域的所有主机收到</li><li><code>A</code>主机收到后交由上层处理，发现<code>B</code>问的不是他，所以不予理会</li><li><code>C</code>收到后交由上层处理，发现这个<code>IP</code>地址正是自己，因此<strong>首先将B的MAC地址和IP地址的对应关系记录到自己的高速缓存表中</strong>，接着返回给==<strong>ARP响应报文(封装在MAC帧中，目的地址为B的MAC地址)</strong>==，其中包含自己的<code>MAC</code>地址</li></ul></li><li><strong>ARP高速缓存条目有静态与动态两种类型</strong><ul><li>动态代表是通过广播自动获取的条目，生命周期默认为两分钟</li><li>静态是手工设置的条目，不同操作系统下的生命周期不同。</li></ul></li><li><strong>ARP协议只能在一段链路或一个网络上使用</strong></li></ul><h3 id="_5、集线器与交换机" tabindex="-1"><a class="header-anchor" href="#_5、集线器与交换机" aria-hidden="true">#</a> 5、集线器与交换机</h3><h4 id="_5-1-集线器" tabindex="-1"><a class="header-anchor" href="#_5-1-集线器" aria-hidden="true">#</a> 5.1. 集线器</h4><blockquote><p>集线器<code>HUB</code>的主要功能是对接收到的信号进行再生整形放大，以扩大网络的传输距离，同时把所有节点集中在以它为中心的节点上。</p></blockquote><ul><li><strong>使用集线器的以太网在逻辑上仍是一个总线网</strong>，各站共享总线资源，使用的还是<code>CSMA/CD</code>协议</li><li>集线器只工作在物理层，它的<strong>每个接口仅简单地转发比特</strong>，不进行碰撞检测(由各站网卡检测)</li><li><strong>集线器一般都有少量的容错能力和网络管理功能</strong>。例如，若网络中某个网卡出了故障，不停地发送帧。此时，集线器可以检测到这个问题，在内部断开与出故障网卡的连线，使整个以太网仍然能正常工作</li><li>集线器是<strong>半双工模式</strong>，收发不能同时进行，收到帧后会<strong>广播到除本身接口外的各个接口</strong>。</li></ul><h4 id="_5-2-交换机" tabindex="-1"><a class="header-anchor" href="#_5-2-交换机" aria-hidden="true">#</a> 5.2. 交换机</h4><blockquote><p>交换机是一种<strong>负责转发</strong>信号的网络设备，可以为接入交换机的任意两个网络节点提供<strong>独享的电信号通路</strong></p></blockquote><ul><li><p>以太网交换机通常由<strong>多个接口</strong>，每个接口都可以直接与一台主机或另一个以太网交换机相连。一般都<strong>工作在全双工方式</strong></p></li><li><p>以太网交换机<strong>具有并行性，能同时连通多对接口，使多对主机能同时通信</strong>，无碰撞(不使用<code>CSMA/CD</code>协议)</p></li><li><p>以太网交换机一般都具有多种速率的接口</p></li><li><p>以太网交换机工作在数据链路层(也包括物理层)，它收到帧后，<strong>在帧交换表中查找帧的目的MAC地址所对应的接口号，然后通过该接口转发帧</strong></p></li><li><p>以太网交换机是一种即插即用的设备，其<strong>内部的帧交换表是通过自学习算法自动地逐渐建立起来的</strong></p></li><li><p>帧的两种转发方式</p><ul><li>存储转发</li><li>直通交换：采用基于硬件的交叉矩阵(交换时延非常小，但不检查是否有差错)</li></ul></li><li><p><strong>交换机每个接口是一个独立的碰撞域</strong></p></li><li><p><img src="http://images.hellocode.top/202211171532547.png" alt="42" loading="lazy"></p><ul><li><p>此时<strong>交换机未进行任何操作</strong>，<code>pc1 ping pc4</code>是可以通的，<strong>说明整个交换机连接的范围是一个广播域</strong>。且<code>ping</code>通后，<code>LSW3</code>交换机的<code>MAC表</code>将<code>PC1</code>的<code>MAC</code>地址与接口的对应关系以及<code>PC4</code>的<code>MAC</code>地址与接口的对应关系都记录到<code>MAC</code>地址表中==【<code>ping</code>的消息发送出去时记录下PC1地址接口相关情况，<code>ping</code>成功的消息响应返回给PC1时记录下PC4地址接口的情况】==</p><p><img src="http://images.hellocode.top/202211171532433.png" alt="43" loading="lazy"></p></li></ul></li></ul><h5 id="交换机自学习和转发帧流程" tabindex="-1"><a class="header-anchor" href="#交换机自学习和转发帧流程" aria-hidden="true">#</a> 交换机自学习和转发帧流程</h5><p><img src="http://images.hellocode.top/202211171532178.png" alt="44" loading="lazy"></p><ul><li><p>初始交换机<code>1</code>和<code>2</code>的<code>MAC</code>地址表都为空</p></li><li><p>此时有以下任务：①<code>A--&gt;B</code> ②<code>B--&gt;A</code></p><ol><li><p><code>A</code>发送给<code>B</code>的数据通过端口<code>1</code>进入交换机，因此交换机先将<code>MAC地址A 接口1</code>==<strong>(表示如果要去MAC地址A，可以走接口1)</strong>==记录到<code>MAC</code>表中，同时扫描<code>MAC</code>表查看是否有<code>MAC地址B</code>对应的接口，发现没有。因此将这个帧从<strong>除来源外的所有端口</strong>发送出去【泛洪】。</p><ul><li>交换机<code>1</code>的端口<code>2</code>发送此帧到主机<code>C</code>，主机<code>C</code>对比<code>MAC</code>地址后发现不是给自己的帧，因此丢弃</li><li>交换机<code>1</code>的<code>3</code>端口发送此帧到主机<code>B</code>，主机<code>B</code>对比<code>MAC</code>地址后发现是给自己的帧，因此收下该帧，交付给高层【注意：此时交换机<code>MAC</code>地址表并没有学习新的条目】</li><li>交换机<code>1</code>的<code>4</code>端口发送此帧到交换机<code>2</code>的端口<code>2</code>，交换机<code>2</code>首先将<code>MAC地址A 接口2</code>记录到<code>MAC</code>地址表中，接着扫描<code>MAC</code>表，发现没有找到<code>MAC地址B</code>对应的接口，因此将这个帧从除来源外的所有端口发送出去【泛洪】。</li><li>同理，接口<code>1</code>，<code>3</code>，<code>4</code>发送出去给主机后经过比对发现不是自己的帧，因此丢弃</li></ul></li><li><p><code>B--&gt;A</code>时，交换机<code>1</code>的<code>MAC</code>地址表已经有了<code>MAC地址A 接口1</code>这个条目</p><ul><li><code>B</code>发送给<code>A</code>的帧从接口<code>3</code>进入交换机，交换机首先将<code>MAC地址B 接口3</code>记录到<code>MAC</code>地址表中，接着查询<code>MAC</code>地址表是否有<code>MAC地址A</code>对应的接口，发现接口<code>1</code>对应的就是<code>MAC</code>地址<code>A</code>，因此从接口<code>1</code>转发出去</li><li>帧通过接口<code>1</code>到达主机<code>A</code>，主机<code>A</code>经过比对后发现这是自己的帧，因此将其接收交付给高层</li></ul></li><li><p>此时若有一个与<code>A</code>连接在同一总线上的主机<code>G</code>向<code>A</code>发送帧，过程如何？</p><p><img src="http://images.hellocode.top/202211171533585.png" alt="45" loading="lazy"></p><ul><li><code>G</code>向<code>A</code>发送帧时，由于<code>A</code>与<code>G</code>处在同一总线上，因此<code>G</code>发送的帧会直接传送到<code>A</code>处，<code>A</code>进行比对发现这是发送给自己的数据，因此将数据接收</li><li>同时数据会跑向交换机<code>1</code>的端口<code>1</code>，所以交换机<code>1</code>会将<code>MAC地址G 接口1</code>记录到<code>MAC</code>表中，同时扫描<code>MAC</code>地址表看看是否有<code>MAC地址A</code>对应的接口，发现接口<code>1</code>就是。但是刚刚学习到的<code>MAC地址G</code>也是来自接口<code>1</code>，因此交换机知道接口<code>1</code>是来源，没有必要将数据再从这个接口转发出去。</li></ul></li></ol></li></ul><p><strong><mark>MAC地址表中的每条记录都有自己的有效时间，到期自动删除</mark>。这是因为MAC地址与交换机接口的对应关系并不是永久性的</strong></p><h5 id="stp生成树协议" tabindex="-1"><a class="header-anchor" href="#stp生成树协议" aria-hidden="true">#</a> STP生成树协议</h5><blockquote><p><code>STP</code>可以在增加冗余链路来提高网络可靠性的同时又避免网络环路带来的各种问题</p></blockquote><p>**当交换机之间链路较少时，某一条链路发送故障，会导致其中有些主机无法通信，即链路不可靠。<br>**如下图，<code>A</code>与<code>B</code>之间的链路发送故障后，<code>H1</code>便无法与<code>H2</code>和<code>H3</code>进行通信</p><p><img src="http://images.hellocode.top/202211171533084.png" alt="46" loading="lazy"></p><p>很容易想到的一个方法是<strong>在B与C之间多拉一条链路</strong>，这样即使A与B之间的链路发送故障，<code>H1</code>、<code>H2</code>、<code>H3</code>之间还是能够相互通信，但是这会带来一些问题。如下，当<code>H1</code>发送一个广播帧时，我们针对交换机<code>B</code>进行过程分析</p><p><img src="http://images.hellocode.top/202211171533086.png" alt="47" loading="lazy"></p><ul><li>首先<code>H1</code>发送的帧进入交换机，交换机将<code>MAC地址H1 接口1</code>记录到<code>MAC</code>表中，接着检索<code>MAC</code>表，发现没有<code>MAC地址H2</code>的接口条目，因此进行泛洪，交换机<code>A</code>和<code>C</code>都接收到此帧</li><li>交换机<code>A/C</code>首先将<code>MAC地址H1 接口1</code>记录到自身的<code>MAC</code>表中，接着检索<code>MAC</code>表，发现没有广播帧的接口条目，因此进行泛洪。<code>A</code>泛洪的帧会被<code>H3</code>、交换机<code>B</code>、<code>C</code>收到；<code>C</code>泛洪的帧会被<code>H2</code>、交换机<code>A</code>、<code>B</code>收到。<code>H2</code>与<code>H3</code>接收帧后发现是一个广播帧，于是接收并交上层处理</li><li>我们针对交换机<code>B</code>进行分析 <ul><li>此刻它收到了来自交换机<code>C</code>的泛洪，<strong>帧内信息依然是<code>MAC地址H1 </code>【源MAC地址】</strong>，首先它会将此条目添加进<code>MAC</code>表中，发现原先有<code>MAC地址H1 接口1</code>的记录，此时它会认为这条记录已经出现错误，因此更新为<code>MAC地址H1 接口2</code>。由于该条目的来源就是接口<code>2</code>，所以交换机不会再从接口<code>2</code>转发出去，而是在接口<code>1</code>、<code>3</code>处进行泛洪……</li><li>同时<code>B</code>也收到来自交换机<code>A</code>的泛洪，情况与交换机<code>C</code>泛洪类似，于是又将<code>MAC地址H1 接口2</code>更新为<code>MAC地址H1 接口3</code>……</li></ul></li><li>因此帧会在交换机中不停转发，究其原因是因为网络形成了环路，<strong>网络环路</strong>会带来以下问题 <ul><li><strong>广播风暴</strong><ul><li>大量消耗网络资源，使得网络无法正常转发其他数据帧</li></ul></li><li><strong>主机收到重复的广播帧</strong><ul><li>大量消耗主机资源</li></ul></li><li><strong>交换机的帧交换表震荡(内容不断更新)</strong></li></ul></li></ul><h6 id="生成树原理" tabindex="-1"><a class="header-anchor" href="#生成树原理" aria-hidden="true">#</a> 生成树原理</h6><ul><li>不论交换机之间采用怎样的物理连接，<strong>交换机都能够自动计算并构建一个逻辑上没有环路的网络，其逻辑拓扑结构必须是树型的(无逻辑环路)</strong></li><li>最终生成树的逻辑拓扑<strong>要确保连通整个网络</strong></li><li><strong>当首次连接交换机或网络物理拓扑发生变化时(有可能是人为改变或故障)，交换机都将进行生成树重新计算</strong></li></ul><h5 id="vlan虚拟局域网" tabindex="-1"><a class="header-anchor" href="#vlan虚拟局域网" aria-hidden="true">#</a> VLAN虚拟局域网</h5><blockquote><p>一种将局域网内的设备划分成与物理位置无关的逻辑组的技术，这些逻辑组具有某些共同的需求，每个<code>VLAN</code>就是一个独立的广播域</p></blockquote><p><strong>为什么需要VLAN？</strong></p><blockquote><p>随着交换式以太网规模的扩大，广播域相应扩大，<strong>而巨大的广播域会带来很多弊端</strong></p><ol><li><p>广播风暴</p><p>如数台交换机连接了数台主机，当主机<code>A</code>要向主机<code>B</code>发送数据帧，此时各交换机的<code>MAC</code>表均为空，因此帧每到一个交换机就会进行泛洪，由于网络巨大，因此泛洪的范围也巨大</p></li><li><p>难以管理和维护</p></li><li><p>潜在的安全风险</p></li></ol></blockquote><h6 id="交换机端口类型" tabindex="-1"><a class="header-anchor" href="#交换机端口类型" aria-hidden="true">#</a> 交换机端口类型</h6><p>缺省VLAN ID</p><blockquote><p>华为交换机上叫<code>PVID</code>，<strong>每个端口有且只有一个PVID</strong>。默认情况下端口的<code>PVID</code>都为<code>1</code>(即端口属于<code>VLAN 1</code>)</p></blockquote><p><strong><mark>端口上接收时总希望能够打上标签，发送出去时候总希望能去除标签</mark></strong></p><p><strong>①Access端口</strong></p><ul><li><p><code>Access</code>端口一般用于终端设备与交换机之间</p><p>注意：交换机与路由器连接的接口也需要使用<code>access</code>接口。这是因为路由器中的消息也不带<code>VLAN</code>标签，就像终端一样，保证路由器的数据能够进入交换机领域，数据由路由器进入交换机是会被打上默认标签，接着猜按照交换机间<code>VLAN</code>的规则行走。简单理解就是把路由器当作终端</p></li><li><p>交换机初始端口类型是Access</p></li><li><p>Access端口只能属于一个VLAN</p></li><li><p><code>Access</code>端口的PVID值与端口所属VLAN的ID相同(默认为<code>1</code>)</p></li><li><p><code>Access</code>端口接收方法</p><ul><li>一般只接收&quot;未打标签&quot;的普通以太网MAC帧。根据接收帧的端口<code>PVID</code>值给帧&quot;打标签&quot;，即插入<code>4</code>字节的<code>VLAN</code>标记字段，字段中的<code>VID</code>取值与端口<code>PVID</code>取值相等</li></ul></li><li><p><code>Access</code>端口<mark>发送处理方法</mark></p><ul><li>若帧中的VID与端口的PVID相等，则&quot;去标签&quot;并转发该帧；否则不转发</li></ul></li></ul><p><strong>②Trunk端口</strong></p><ul><li><code>Trunk</code>端口一般用于交换机之间或交换机与路由器之间的互连</li><li><code>Trunk</code>端口可以属于多个<code>VLAN</code></li><li>用户可以设置<code>Trunk</code>端口的<code>PVID</code>值，默认情况下，<code>Trunk</code>端口<code>PVID</code>值为<code>1</code></li><li><code>Trunk</code>端口<mark>发送处理方法</mark><ul><li>对VID<mark>等于</mark>PVID的帧，&quot;去标签，再转发&quot;</li><li>对VID不等于PVID的帧，直接转发</li></ul></li><li><code>Trunk</code>端口<mark>接收处理方法</mark><ul><li>接收&quot;未打标签&quot;的帧。根据接收帧的端口的PVID给帧&quot;打标签&quot;，即插入<code>4</code>字节的<code>VLAN</code>标记字段，字段中的<code>VID</code>取值与端口的<code>PVID</code>取值相等</li><li>直接接收&quot;已打标签的帧&quot;</li></ul></li></ul><p><strong>③Hybrid端口</strong></p><ul><li><code>Hybrid</code>端口既可以用于交换机之间或交换机与路由器之间的互连(同<code>Trunk</code>端口)，也可用于交换机与用户计算机之间的互连(同<code>Access</code>端口)</li><li><code>Hybrid</code>端口可以属于多个<code>VLAN</code>(同<code>Trunk</code>端口)</li><li>用户可以设置<code>Hybrid</code>端口的<code>PVID</code>值。默认情况下，Hybrid端口的PVID值为1</li><li><code>Hybrid</code>端口<mark>发送处理方法</mark>↓ <ul><li>查看帧的VID是否在端口的&quot;去标签&quot;列表中</li><li>若存在，则&quot;去标签&quot;后转发</li><li>若不存在，则直接转发</li></ul></li><li><code>Hybrid</code>端口<mark>接收处理方法</mark>(同<code>Trunk</code>) <ul><li>接收&quot;未打标签&quot;的帧，根据接收帧的端口的<code>PVID</code>给帧&quot;打标签&quot;，即插入<code>4</code>字节<code>VLAN</code>标记字段，字段中的<code>VID</code>取值与端口的<code>PVID</code>取值相等</li><li>接收&quot;已打标签的帧&quot;</li></ul></li></ul><p><strong>如何分割广播域？</strong></p><ol><li><p>路由器</p><p>由于路由器属于网络层设备，默认情况下不对广播数据包进行转发，因此自然达到隔离的效果。但是成本较高，局域网内部全靠路由器分割广播域是不现实的</p></li><li><p>VLAN虚拟局域网技术</p><p>默认情况下，交换机下的主机会被划入<code>VLAN 1</code>，可以通过设置相关语句为交换机设置<code>VLAN</code>，如下是将<code>PC1</code>与<code>PC2</code>划入<code>VLAN2</code>的方法</p><p><img src="http://images.hellocode.top/202211171533711.png" alt="48" loading="lazy"></p></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token constant">LSW3</span>：
valan batch <span class="token number">2</span>  <span class="token comment">//在LSW3上创建VLAN2</span>
<span class="token keyword">interface</span> <span class="token class-name">Ethernet</span> <span class="token number">0</span><span class="token operator">/</span><span class="token number">0</span><span class="token operator">/</span><span class="token number">1</span>  <span class="token comment">//进入交换机接口1</span>
port link<span class="token operator">-</span>type access  <span class="token comment">//将此接口类型设置为access</span>
port <span class="token keyword">default</span> vlan <span class="token number">2</span>   <span class="token comment">//信息经过此接口时若没有VLAN标签则打上VLAN2标签；若有VLAN标签则检查是							否为VLAN2，若为VLAN2则去除标签并转发；若非VLAN2，则不转发。</span>
<span class="token comment">//对接口2的设置同理</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>设置完毕后，发现<code>PC1</code>不能<code>ping</code>通<code>PC4</code>，因为此时他们不属于一个同一个广播域，但是可以<code>ping</code>通<code>PC2</code>，因为<code>PC1</code>与<code>PC2</code>属于同一个广播域<code>VLAN 2</code></p><p><img src="http://images.hellocode.top/202211171533841.png" alt="49" loading="lazy"></p><h6 id="vlan实现机制" tabindex="-1"><a class="header-anchor" href="#vlan实现机制" aria-hidden="true">#</a> VLAN实现机制</h6><p><img src="http://images.hellocode.top/202211171533391.png" alt="50" loading="lazy"></p><ul><li><code>VLAN</code>标记的<strong>最后12比特</strong>称为<strong>VLAN标识符VID</strong>，它唯一地标志了以太网帧属于哪一个<code>VLAN</code><ul><li><code>VID</code>的取值范围是<code>0~4095</code></li><li><code>0</code>和<code>4095</code>都不用来表示<code>VLAN</code>，因此用于表示<code>VLAN</code>的<strong>VID的有效范围是1~4094</strong></li></ul></li><li><strong>802.1Q帧时由交换机来处理的，而不是用户主机来处理的</strong><ul><li>当交换机<strong>收到普通的以太网帧时</strong>，会将其插入<code>4</code>字节的VLAN标记转变为<code>802.1Q</code>，简称**&quot;打标签&quot;**</li><li>当交换机<strong>转发802.1Q帧时</strong>，可能会删除其<code>4</code>字节<code>VLAN</code>标记转变为普通以太网帧，简称**&quot;去标签&quot;**</li></ul></li></ul><h2 id="四、网络层" tabindex="-1"><a class="header-anchor" href="#四、网络层" aria-hidden="true">#</a> 四、网络层</h2><blockquote><p>主要任务是实现网络互连，进而实现数据包在各网络之间的传输</p></blockquote><h3 id="_1、面向连接的虚电路服务" tabindex="-1"><a class="header-anchor" href="#_1、面向连接的虚电路服务" aria-hidden="true">#</a> 1、面向连接的虚电路服务</h3><ul><li>可靠的通信由网络来保证</li><li>必须<strong>建立网络层的连接----虚电路VC</strong>(<code>Virtual Circuit</code>)</li><li>通信双方<strong>沿着已建立的虚电路发送分组</strong></li><li><mark>目的主机的地址仅在连接建立阶段使用</mark>，之后每个<strong>分组的首部只需携带一条虚电路的编号</strong>(构成虚电路的每一段链路都有一个虚电路编号)。</li><li>这种通信方式如果再使用可靠传输的网络协议，就可使所发送的分组最终正确到达接收方(无差错按序到达、不丢失、不重复)。</li><li><strong>通信结束后，需要释放之前所建立的虚电路</strong></li></ul><h3 id="_2、无连接的数据报服务" tabindex="-1"><a class="header-anchor" href="#_2、无连接的数据报服务" aria-hidden="true">#</a> 2、无连接的数据报服务</h3><ul><li><strong>可靠通信应当由用户主机来保证</strong></li><li><strong>不需要建立网络层连接</strong></li><li><strong>每个分组可走不同路径</strong></li><li>每个分组的<strong>首部必须携带目的主机的完整地址</strong></li><li>这种通信方式所传送的<strong>分组可能误码、丢失、重复和失序</strong></li><li>由于网络本身不提供端到端的可靠传输服务，这就使网络中的路由器可以做得比较简单，而且价格低廉</li><li>因特网采用了这种设计思想，也就是<strong>将复杂的网络处理功能置于因特网的边缘(用户主机和其内部的运输层)</strong>，而将相对简单的尽最大努力的分组交付功能置于因特网核心。</li></ul><h3 id="_3、ipv4地址" tabindex="-1"><a class="header-anchor" href="#_3、ipv4地址" aria-hidden="true">#</a> 3、IPv4地址</h3><blockquote><p><code>IPv4</code>地址就是因特网上的<strong>每一台主机(或路由器)的每一个接口</strong>分配一个在全世界范围内是<strong>唯一的32比特的标识符</strong></p></blockquote><h4 id="_3-1-分类编址" tabindex="-1"><a class="header-anchor" href="#_3-1-分类编址" aria-hidden="true">#</a> 3.1. 分类编址</h4><p><img src="http://images.hellocode.top/202211171550050.png" alt="1" loading="lazy"></p><ul><li><code>A</code>类地址<strong>网络号第1位固定为0</strong>，网络号后面部分不能全<code>0</code>，也不能全<code>1</code>，所以<strong>网络号范围是1~126</strong></li><li><code>B</code>类地址<strong>网络号前2位固定为10</strong>，网络号后面部分可以全取<code>0</code>或<code>1</code>，所以<strong>网络号范围是128.0~191.255</strong></li><li><code>C</code>类地址<strong>网络号前3位固定为110</strong>，网络后后面部分可以全取<code>0</code>或<code>1</code>，所以<strong>网络号范围是192.0.0~223.255.255</strong></li><li><code>D</code>类地址为多播地址，<code>IP</code>地址为<strong>224.0.0.0~239.255.255.255</strong></li></ul><p><img src="http://images.hellocode.top/202211171550056.png" alt="2" loading="lazy"></p><p><img src="http://images.hellocode.top/202211171550280.png" alt="3" loading="lazy"></p><h4 id="_3-2-划分子网的ipv4地址" tabindex="-1"><a class="header-anchor" href="#_3-2-划分子网的ipv4地址" aria-hidden="true">#</a> 3.2. 划分子网的IPv4地址</h4><p><strong>为什么需要划分子网？</strong></p><blockquote><p>比如一个单位有<code>300</code>台主机，此时需要申请一个<code>B</code>类网络地址，很容易得知，分配出去<code>300</code>个<code>IP</code>地址后，申请得到的<code>B</code>类网络<strong>还剩下很多IP地址</strong>。<br>当单位扩大规模，需要再添加两个子网的时，又要为这两个子网分别申请<code>B</code>类地址，这会花费一些不必要的支出，实际上子网<code>1</code>申请到的<code>B</code>类地址还有很多没用到，<strong>我们希望能够将这些剩余地址应用到其他子网中(节约地址)</strong>。</p></blockquote><h5 id="如何实现子网划分" tabindex="-1"><a class="header-anchor" href="#如何实现子网划分" aria-hidden="true">#</a> 如何实现子网划分？</h5><p><strong>32比特的子网掩码可以表明分类IP地址的主机号部分被借用了几个比特作为子网号</strong></p><ul><li>子网掩码<strong>使用连续的比特1来对应网络号和子网号(子网号来自原先的一部分主机号)</strong></li><li>子网掩码使用连续的比特<code>0</code>来对应主机号</li><li>将划分子网的<code>IPv4</code>地址与其相应的子网掩码进行**(逻辑与运算)【即掩码是1的部分】**就可得到<code>IPv4</code>地址所在子网的网络地址</li></ul><h4 id="_3-3-无分类编址的ipv4地址" tabindex="-1"><a class="header-anchor" href="#_3-3-无分类编址的ipv4地址" aria-hidden="true">#</a> 3.3. 无分类编址的IPv4地址</h4><p><strong>为什么需要？</strong></p><blockquote><p>划分子网在一定程度上缓解了因特网发展中遇到的困难，但是<strong>数量巨大的C类网因为其地址空间太小并没有得到充分使用</strong>，而因特网的IP地址仍在加速消耗，<strong>整个IPv4地址空间面临全部耗尽的威胁</strong></p></blockquote><p>1993年，IETF发布了<strong>无分类域间路由选择CIDR</strong></p><ul><li><p><code>CIDR</code>消除了传统的<code>A</code>类、<code>B</code>类和<code>C</code>类地址，以及划分子网的概念</p></li><li><p><code>CIDR</code>可以更加有效地分配<code>IPv4</code>地址空间</p></li><li><p><code>CIDR</code>使用**&quot;斜线记法&quot;**，或称<code>CIDR</code>记法。即在<code>IPv4</code>地址后面加上斜线&quot;<code>/</code>&quot;，<strong>在斜线后面写上网络前缀所占比特数量</strong></p><p><img src="http://images.hellocode.top/202211171550242.png" alt="4" loading="lazy"></p></li><li><p><strong>CIDR实际上是将网络前缀都相同的连续IP地址组成一个&quot;CIDR地址块&quot;</strong></p></li></ul><p><strong>路由聚合</strong></p><blockquote><p>如路由器<code>A</code>上连接同一网络的多台主机，路由器<code>B</code>与<code>A</code>相连。若<code>A</code>将所有主机的具体<code>IP</code>地址都报给<code>B</code>，则路由器<code>B</code>中会增加多项路由条目。可实际上<code>B</code>向<code>A</code>中任意一个主机转发数据的时都是走同一个端口，因此我们可以<strong>将这些网络的共同前缀提取出来成为新的网络号，同时将剩余主机号置0放入路由器B中</strong></p><p>如：<code>A</code>连接了<code>172.1.4.0/25</code>和<code>172.1.7.0/24</code>，则提取公共前缀聚合后变为<strong>172.1.4.0/22</strong></p></blockquote><h3 id="_4、ip数据报发送转发过程" tabindex="-1"><a class="header-anchor" href="#_4、ip数据报发送转发过程" aria-hidden="true">#</a> 4、IP数据报发送转发过程</h3><blockquote><p>同一个网络之间的主机可以直接通信，不同网络之间的主机通信需要路由器中转</p></blockquote><p><strong>源主机如何判断目的主机是否和自己在同一个网络中？</strong></p><blockquote><p>将自身的<code>IP</code>地址与子网掩码<strong>相与</strong>得到自身的网络号<code>1</code>，再将目的<code>IP</code>地址与自身子网掩码相与得到网络号<code>2</code>。若两个网络号相等，则说明处在同一个网络</p></blockquote><p><strong>主机如何知道应该把IP数据报交给哪个路由器进行转发呢？</strong></p><blockquote><p>通过设置默认网关。所谓默认网关，即当路由表中查不到数据时会将数据发往的路由器端口<code>IP</code>地址</p></blockquote><h5 id="静态路由配置" tabindex="-1"><a class="header-anchor" href="#静态路由配置" aria-hidden="true">#</a> 静态路由配置</h5><p><strong>静态路由配置是指用户或网络管理员使用路由器的相关命令给路由器人工配置路由表</strong></p><ul><li>这种人工配置方式简单、开销小。但不能及时适应网络状态的变化。<strong>一般只在小规模网络中采用</strong></li><li>可能由于：①配置错误 ②聚合了不存在的网络 ③网络故障 而<strong>出现路由环路错误</strong></li><li><mark>默认路由为：0.0.0.0/0</mark> 。其<strong>作用是当路由表不知道往哪里转发时，就会往默认路由指定的下一跳位置转发</strong>，根据网络号最长匹配原理，默认路由网络号长度为<code>0</code>，因此一定是最后一个被匹配的条目</li><li><mark>特定主机路由：具体主机IP/32</mark>。网络号前缀长度<code>32</code>保证了这是第一个被匹配的静态条目</li></ul><p><strong>如何防止错误路由导致IP数据报永久兜圈？</strong></p><ol><li>在<code>IP</code>数据报首部<strong>设置生存时间TTL字段</strong><ul><li><code>IP</code>数据报进入路由器后，<code>TTL</code>字段的值减<code>1</code>。<strong>若TTL的值不等于0，则被路由器转发，否则被丢弃</strong></li></ul></li><li>对于聚合后或由于网络故障而不存在的路由条目<strong>设置黑洞路由</strong><ul><li>所谓<strong>黑洞路由，即路由器应该丢弃的路由</strong></li></ul></li></ol><h3 id="_5、路由选择协议" tabindex="-1"><a class="header-anchor" href="#_5、路由选择协议" aria-hidden="true">#</a> 5、路由选择协议</h3><p>因特网所采用的的路由选择协议主要特点</p><ul><li><strong>自适应</strong>：动态路由选择，能较好地适应网络状态的变化</li><li><strong>分布式</strong>：路由器之间交换路由信息</li><li><strong>分层次</strong>：将整个因特网划分为许多较小的自治系统<code>AS</code></li></ul><h4 id="_5-1-路由信息协议rip" tabindex="-1"><a class="header-anchor" href="#_5-1-路由信息协议rip" aria-hidden="true">#</a> 5.1. 路由信息协议RIP</h4><p><code>RIP</code>使用<strong>跳数</strong>作为度量<strong>来衡量到达目的网络的距离</strong></p><ul><li>路由器到直连网络的距离定义为<code>1</code></li><li>路由器到非直连网络的距离定义为所经过的路由器数<code>+1</code></li><li>允许一条路径最多只能包含<code>15</code>个路由器。<strong>&quot;距离&quot;等于16时相当于不可达</strong>。因此，<code>RIP</code>只适用于小型互联网</li><li><code>RIP</code>认为<strong>好的路由</strong>就是&quot;距离短&quot;的路由，也就是所<strong>通过路由器数量最少的路由</strong></li><li>当到达同一目的网络有多条&quot;距离相等&quot;的路由时，可以进行等价负载均衡</li><li><code>RIP</code>包含以下三个要点 <ul><li>仅和相邻路由器交换信息</li><li>交换的是各自路由表的信息</li><li>周期性交换信息</li></ul></li></ul><p><img src="http://images.hellocode.top/202211171550391.png" alt="5" loading="lazy"></p><h5 id="rip存在的问题" tabindex="-1"><a class="header-anchor" href="#rip存在的问题" aria-hidden="true">#</a> RIP存在的问题</h5><blockquote><p>存在&quot;坏消息传播很慢&quot;的问题，又称为<strong>路由环路(两个路由器相互学习错误路由，造成循环)<strong>或距离无穷计数问题，这是距离向量算法的一个固有问题，可以采取多种措施</strong>减少</strong>出现该问题的概率或减小该问题带来的危害</p></blockquote><ul><li>限制最大路径距离为<code>15</code>(<code>16</code>表示不可达)</li><li>当路由表发生变化时就立即发送更新报文(即&quot;<strong>触发更新</strong>&quot;)，而不是周期性发送</li><li>让路由器记录收到某特定路由信息的接口，而不让同一路由信息再通过此接口反方向传送(即**&quot;水平分割&quot;&quot;毒性反转&quot;**)</li></ul><h4 id="_5-2-开放最短路径优先ospf" tabindex="-1"><a class="header-anchor" href="#_5-2-开放最短路径优先ospf" aria-hidden="true">#</a> 5.2. 开放最短路径优先OSPF</h4><blockquote><p>简单来说就是得到一个带权有向图，以当前路由器为起点，通过迪杰斯特拉算法得到到达某个点的最短路径</p></blockquote><ul><li><p><code>OSPF</code>是<strong>基于链路状态</strong>的，而不像<code>RIP</code>那样是基于距离向量的</p></li><li><p><code>OSPF</code>采用<code>SPF</code>算法计算路由，而不像<code>RIP</code>那样是基于距离向量的</p></li><li><p><code>OSPF</code>不限制网络规模，更新效率高，收敛速度快</p></li><li><p>链路状态是指本路由器都和哪些路由器相邻，以及相应链路的&quot;代价&quot;</p><ul><li><strong>&quot;代价&quot;的意思是费用、距离、时延、带宽等</strong></li></ul></li><li><p><code>OSPF</code>相邻路由器之间通过交互<strong>问候(Hello)分组</strong>，建立和维护邻居关系</p><ul><li><p><code>Hello</code>分组封装在<code>IP</code>数据报中，发往组播地址<code>224.0.0.5</code></p></li><li><p>发送周期为<code>10</code>秒</p></li><li><p><code>40</code>秒未收到来自邻居路由器的<code>Hello</code>分组，则认为该邻居路由器不可达</p><p><img src="http://images.hellocode.top/202211171550663.png" alt="6" loading="lazy"></p></li></ul></li><li><p>使用<code>OSPF</code>的每个路由器都会产生<strong>链路状态通告LSA</strong>，包含以下内容</p><ul><li>直连网络的链路状态信息</li><li>邻居路由器的链路状态信息</li></ul></li><li><p><code>LSA</code>被封装在<strong>链路状态更新分组LSU</strong>中，<strong>采用洪泛法发送</strong></p></li><li><p>使用<code>OSPF</code>的每个路由器都有一个<strong>链路状态数据库LSDB</strong>，用于存储<code>LSA</code></p></li><li><p>通过各路由器洪泛法发送封<strong>装有自己LSA的LSU分组</strong>，各路由器的<code>LSDB</code>最终达到一致</p></li><li><p>使用<code>OSPF</code>的各路由器<strong>基于LSDB进行最短路径优先SPF计算</strong>，构建出各种到达其他各路由器的最短路径，即构建各自的路由表</p></li></ul><h5 id="ospf五种分组" tabindex="-1"><a class="header-anchor" href="#ospf五种分组" aria-hidden="true">#</a> OSPF五种分组</h5><ol><li><p><strong>问候</strong>(<code>Hello</code>)分组</p><p>用来发现和维护邻居路由器的可达性</p></li><li><p><strong>数据库描述</strong>(<strong>D</strong>atabase <strong>D</strong>escription)分组</p><p>向邻居路由器给出自己的链路状态数据库中的所有链路状态项目的摘要信息</p></li><li><p><strong>链路状态请求信息</strong>(<strong>L</strong>ink <strong>S</strong>tate <strong>R</strong>equest)分组</p><p>向邻居路由器请求发送某些链路状态项目的详细信息</p></li><li><p><strong>链路状态更新</strong>(<strong>L</strong>ink <strong>S</strong>tate <strong>U</strong>pdate)分组</p><p>路由器使用这种分组将其链路状态进行洪泛发送，即用洪泛法对全网更新链路状态</p></li><li><p><strong>链路状态确认</strong>(<strong>L</strong>ink <strong>S</strong>tate <strong>A</strong>cknowledgement)分组</p><p>这是对链路状态更新分组的确认分组</p></li></ol><h5 id="ospf基本工作过程" tabindex="-1"><a class="header-anchor" href="#ospf基本工作过程" aria-hidden="true">#</a> OSPF基本工作过程</h5><ul><li>相邻路由器之间周期性发送<strong>问候分组(Hello)</strong>，以便建立和维护邻居关系</li><li>建立邻居关系后，<strong>给邻居路由器发送数据库描述分组(DD)</strong>，<mark>也就是将自己链路状态数据库中的所有链路状态项目的摘要信息发送给邻居路由器</mark></li><li>收到数据库描述分组后，若发现自己缺少其中某些链路状态项目，则会发送<strong>链路状态请求分组(LSR)</strong>。</li><li>对方收到链路状态请求分组后，则会将其所缺少的链路状态项目的详细信息封装在**链路状态更新分组(LSU)**中发送回去</li><li>收到链路状态更新分组后，将这些信息添加到自己的链路状态数据库中</li></ul><h5 id="邻居关系的建立" tabindex="-1"><a class="header-anchor" href="#邻居关系的建立" aria-hidden="true">#</a> 邻居关系的建立</h5><blockquote><p>一条总线上有多台主机，则它们互为邻居，因此每个路由器都要向其他路由器发送问候分组和链路状态更新分组。为了减少所发送分组的数量，则需要用相应方法对邻居关系进行删减</p></blockquote><p><code>OSPF</code>采用选举<strong>指定路由器DR</strong>(<code>Designated Router</code>)和<strong>备用的指定路由器BDR</strong>(<code>Backup Designated Router</code>)的方法减少邻居数目</p><ul><li>所有的非<code>DR/BDR</code>只与<code>DR/BDR</code>建立邻居关系</li><li>非<code>DR/BDR</code>之间通过<code>DR/BDR</code>交换信息</li><li>当<code>DR</code>失效时由<code>BDR</code>顶上</li></ul><h4 id="_5-3-边界网关协议bgp" tabindex="-1"><a class="header-anchor" href="#_5-3-边界网关协议bgp" aria-hidden="true">#</a> 5.3. 边界网关协议BGP</h4><blockquote><p>尽力寻找一条能够到达目的网络且比较好的路由(不兜圈子)，而并非找最佳路由</p></blockquote><p><img src="http://images.hellocode.top/202211171550504.png" alt="7" loading="lazy"></p><p><strong>内部网关协议IGP(如路由信息协议RIP或最短路径优先OSPF)</strong></p><ul><li>设法使分组在一个自治系统内尽可能有效地从源网络传输到目的网络</li><li>无需考虑自治系统外部其他方面的策略</li></ul><p><strong>外部网关协议EGP(如边界网关协议BGP)</strong></p><ul><li>在不同自治系统内，度量路由的&quot;代价&quot;(距离，宽带，费用等)可能不同。因此，对于自治系统之间的路由选择，使用&quot;代价&quot;作为度量来寻找最佳路由是不行的 <ul><li>比如<code>A</code>系统路由选择度量是距离，<code>B</code>系统是带宽……那么<code>A</code>到系统<code>E</code>的路由怎样走最好呢？由于没有统一度量，所以不能直接得到最佳路由</li></ul></li><li>自治系统之间的路由选择必须考虑相关策略(政治、经济、安全等) <ul><li>如中国的数据报尽量要绕开美国的自治系统</li></ul></li></ul><h5 id="工作原理" tabindex="-1"><a class="header-anchor" href="#工作原理" aria-hidden="true">#</a> 工作原理</h5><p><img src="http://images.hellocode.top/202211171551163.png" alt="8" loading="lazy"></p><ul><li><code>BGP</code>发言人<strong>交换网络可达性的信息</strong>(要到达某个网络所要经过的一系列自治系统)</li><li>当<code>BGP</code>发言人互相交换了网络可达性的信息后，各<code>BGP</code>发言人就根据所采用的策略从收到的路由信息中<strong>找出到达各自治系统的较好路由</strong>。也就是构造出树形结构(防环路)的自治系统连通图</li></ul><h5 id="bgp-4的4中报文" tabindex="-1"><a class="header-anchor" href="#bgp-4的4中报文" aria-hidden="true">#</a> BGP-4的4中报文</h5><ol><li><strong>OPEN(打开)报文</strong>：用来与相邻的另一个<code>BGP</code>发言人建立关系，使通信初始化</li><li><strong>UPDATE(更新)报文</strong>：用来通告某一路由的信息，以及列出要撤销的多条路由</li><li><strong>KEEPALIVE(保活)报文</strong>：用来周期性地证实邻站的连通性</li><li><strong>NOTIFICATION(通知)报文</strong>：用来发送检测到的差错</li></ol><p><img src="http://images.hellocode.top/202211171551789.png" alt="9" loading="lazy"></p><h3 id="_6、ipv4数据报首部格式" tabindex="-1"><a class="header-anchor" href="#_6、ipv4数据报首部格式" aria-hidden="true">#</a> 6、IPv4数据报首部格式</h3><p><img src="http://images.hellocode.top/202211171551068.png" alt="10" loading="lazy"></p><ul><li><p><strong>版本</strong></p><p>占<code>4</code>比特，表示<code>IP</code>协议版本。通信双方使用的<code>IP</code>协议版本必须一致。目前广泛使用的<code>IP</code>协议版本为号为<code>4(IPv4)</code></p></li><li><p><strong>首部长度</strong></p><p>占<code>4</code>比特，表示<code>IP</code>数据报首部长度。该字段取值<strong>以4字节为单位</strong></p><p><strong>最小十进制取值为5，表示IP数据报首部只有20字节</strong>【<code>4</code>字节单位，所以取值<code>5</code>对应<code>20</code>字节】固定部分</p><p><strong>最大十进制取值为15，表示IP数据报首部包含20字节固定部分和最大40字节可变部分</strong></p></li><li><p><strong>可选字段</strong></p><p>长度从<code>1</code>到<code>40</code>个字节不等。<strong>用来支持排错、测量及安全等措施</strong></p><p>可选字段增加了<code>IP</code>数据报的功能，但这同时也<strong>使得IP数据报的首部长度成为可变的。这就增加了每一个路由器处理IP数据报的开销</strong>。实际上可选字段很少被使用</p></li><li><p><strong>填充字段</strong></p><p>确保首部长度为<code>4</code>字节长度的整数倍，使用全<code>0</code>进行填充</p></li><li><p><strong>区分服务</strong></p><p>占<code>8</code>比特，利用该字段的不同数值可提供不同等级的服务质量，只有在使用区分服务时，该字段才起作用。一般情况下不使用该字段</p></li><li><p><strong>总长度</strong></p><p>占<strong>16比特</strong>，表示<code>IP</code>数据报的总长度【首部+数据载荷】，最大取值为十进制<code>65535</code>，<strong>以字节为单位</strong></p></li><li><p><strong>标识</strong></p><p>占<code>16</code>比特，<strong>属于同一个数据报的各分片数据报应该具有相同的标识【可理解为ID】</strong></p><p><code>IP</code>软件维持一个计数器，每产生一个数据报，计数器值<code>+1</code>，并将此值赋给标识字段</p></li><li><p><strong>标志</strong></p><p>占<code>3</code>比特，各比特含义如下</p><ul><li><code>DF</code>位：<code>1</code>表示不允许分片，<code>0</code>表示允许</li><li><code>MF</code>位：<code>1</code>表示&quot;后面还有分片&quot;，<code>0</code>表示&quot;这是最后一个分片&quot;</li><li>保留位：必须为<code>0</code></li></ul></li><li><p><strong>片偏移(必须是整数)</strong></p><p>占<code>13</code>比特，指出分片数据报的数据载荷部分偏移其在原数据报的位置有多少单位</p><p><strong>片偏移以8个字节为单位</strong></p><p><img src="http://images.hellocode.top/202211171551521.png" alt="11" loading="lazy"></p></li><li><p><strong>生存时间</strong></p><p><strong>占8比特</strong>，最初以秒为单位，最大生存周期为<code>255</code>秒；路由器转发IP数据报时，将<code>IP</code>数据报首部中的该字段值减去<code>IP</code>数据报在本路由器上耗费的时间，若不为<code>0</code>【说明路由器消耗时间后还活着】就转发，否则丢弃</p><p><strong>现在以&quot;跳数&quot;为单位，路由器转发IP数据报时，将IP数据报首部中的该字段值减1，若不为0就转发，否则丢弃</strong>【防止兜圈】</p></li><li><p><strong>协议</strong></p><p>占<code>8</code>比特，指明<code>IPv4</code>数据报的数据部分是何种协议数据单元</p><p><img src="http://images.hellocode.top/202211171551681.png" alt="12" loading="lazy"></p></li><li><p><strong>首部检验和</strong></p><p>占<strong>16比特，用来检测首部在传输过程中是否出现差错</strong>，比<code>CRC</code>检验码简单，称为因特网检验和</p><p><code>IP</code>数据报每经过一个路由器，路由器都要重新计算首部检验和，因为某些字段【生存时间、标志、片偏移等】的取值可能发生变化</p><p>由于<code>IP</code>层本身不提供可靠传输服务，并且计算首部校验和是一项耗时的操作，因此在<code>IPv6</code>中，路由器不再计算首部校验和，从而更快转发<code>IP</code>数据报</p></li><li><p><strong>源IP地址和目的IP地址</strong></p><p>各占<strong>32比特</strong>，用来填写发送该<code>IP</code>数据报的源主机<code>IP</code>地址和接收该<code>IP</code>数据报的目的主机</p></li></ul><h3 id="_7、网际控制报文icmp" tabindex="-1"><a class="header-anchor" href="#_7、网际控制报文icmp" aria-hidden="true">#</a> 7、网际控制报文ICMP</h3><blockquote><p>为了更有效地转发<code>IP</code>数据报和提高交付成功的机会，在网际层使用了网际控制报文协议<code>ICMP</code></p></blockquote><ul><li>主机或路由器使用<code>ICMP</code>来发送差错报告报文和询问报文</li><li><code>ICMP</code>报文被封装在<code>IP</code>数据报中发送</li></ul><h5 id="回答报文类型" tabindex="-1"><a class="header-anchor" href="#回答报文类型" aria-hidden="true">#</a> 回答报文类型</h5><h6 id="终点不可达" tabindex="-1"><a class="header-anchor" href="#终点不可达" aria-hidden="true">#</a> 终点不可达</h6><blockquote><p><strong>当路由器或主机不能交付数据报时，就向源点发送终点不可达报文</strong>。具体可再根据<code>ICMP</code>的代码字段细分为目的网络不可达、目的主机不可达、目的协议不可达、目的端口不可达、目的网络位置、目的主机未知等<code>13</code>种错误</p></blockquote><h6 id="源点抑制" tabindex="-1"><a class="header-anchor" href="#源点抑制" aria-hidden="true">#</a> 源点抑制</h6><blockquote><p><strong>当路由器或主机由于拥塞而丢弃数据报时，就向源点发送源点抑制报文</strong>，使源点知道应当把数据报发送速率放慢</p></blockquote><h6 id="时间超过" tabindex="-1"><a class="header-anchor" href="#时间超过" aria-hidden="true">#</a> 时间超过</h6><blockquote><p>当路由器收到一个目的<code>IP</code>地址不是自己的<code>IP</code>数据报，会将其<strong>生存时间TTL字段</strong>值减<code>1</code>。若结果不为<code>0</code>，则将该<code>IP</code>数据报转发出去；<strong>若结果为0，除丢弃该IP数据报外，还要向源点发送时间超过报文</strong></p><p>当终点在预先规定的时间内不能收到一个数据报的全部数据报片时，就把已收到的数据报片都丢弃，也会向源点发送时间超过报文</p></blockquote><h6 id="参数问题" tabindex="-1"><a class="header-anchor" href="#参数问题" aria-hidden="true">#</a> 参数问题</h6><blockquote><p>当路由器或目的主机收到<code>IP</code>数据报后，根据其首部中的检验和字段发现首部在传输过程中<strong>出现了误码，就丢弃该数据报，并向源点发送参数问题报文</strong></p></blockquote><h6 id="改变路由-重定向" tabindex="-1"><a class="header-anchor" href="#改变路由-重定向" aria-hidden="true">#</a> 改变路由(重定向)</h6><blockquote><p><strong>路由器把改变路由报文发送给主机，让主机知道下次应将数据报发送给另外的路由器(可通过更好的路由)</strong></p><p>如主机<code>1</code>的默认路由是<code>R1</code>，信息经过<code>R1</code>时，<code>R1</code>发现最佳路由不是自己，而是<code>R2</code>，所以通过<code>ICMP</code>告知主机<code>1</code></p></blockquote><h5 id="询问报文类型" tabindex="-1"><a class="header-anchor" href="#询问报文类型" aria-hidden="true">#</a> 询问报文类型</h5><h6 id="回送请求和回答" tabindex="-1"><a class="header-anchor" href="#回送请求和回答" aria-hidden="true">#</a> 回送请求和回答</h6><ul><li><code>ICMP</code>回送请求报文是由主机或路由器向一个特定的目的主机发出的询问</li><li>收到此报文的主机必须给源主机或路由器发送<code>ICMP</code>回送回答报文</li><li>这种询问报文用来测试目的站是否可达及了解其有关状态</li></ul><h5 id="时间戳请求和回答" tabindex="-1"><a class="header-anchor" href="#时间戳请求和回答" aria-hidden="true">#</a> 时间戳请求和回答</h5><ul><li><code>ICMP</code>时间戳请求报文是请某个主机或路由器回答当前的日期和时间</li><li>在<code>ICMP</code>时间戳回答报文中有一个<code>32</code>比特的字段，其中写入的整数代表从<code>1900</code>年<code>1</code>月<code>1</code>日起到当前时刻一共有多少秒</li><li>这种询问报文用来进行时钟同步和测量时间</li></ul><h4 id="不发送icmp的情况" tabindex="-1"><a class="header-anchor" href="#不发送icmp的情况" aria-hidden="true">#</a> 不发送ICMP的情况</h4><ol><li>对<code>ICMP</code>差错报告报文不再发送<code>ICMP</code>差错报告报文</li><li>对<strong>第一个分片的数据报片的所有后续数据报片</strong>都不发送<code>ICMP</code>差错报告报文</li><li>对具有<strong>多播地址的数据报</strong>都不发送<code>ICMP</code>差错报告报文</li><li>对具有<strong>特殊地址(如127.0.0.0或0.0.0.0)的数据报</strong>不发送<code>ICMP</code>差错报告报文</li></ol><h4 id="icmp应用举例" tabindex="-1"><a class="header-anchor" href="#icmp应用举例" aria-hidden="true">#</a> ICMP应用举例</h4><h5 id="分组网间探测ping" tabindex="-1"><a class="header-anchor" href="#分组网间探测ping" aria-hidden="true">#</a> 分组网间探测PING</h5><ul><li>用来测试主机或路由器间的连通性【<code>eNSP</code>的<code>ping</code>命令】</li><li>应用层直接使用网际层的<code>ICMP</code>(没有通过运输层的<code>TCP</code>或<code>UDP</code>)</li><li>使用<code>ICMP</code>回送请求和回答报文</li></ul><h5 id="跟踪路由tracerouce" tabindex="-1"><a class="header-anchor" href="#跟踪路由tracerouce" aria-hidden="true">#</a> 跟踪路由tracerouce</h5><blockquote><p>用来测试IP数据报从源主机到达目的主机要经过哪些路由器</p></blockquote><p><code>Windows</code>版本</p><ul><li><code>tracert</code>命令</li><li>应用层直接使用网际层<code>ICMP</code></li><li>使用了<code>ICMP</code>回送请求和回答报文以及差错报告报文</li></ul><h6 id="实现方法" tabindex="-1"><a class="header-anchor" href="#实现方法" aria-hidden="true">#</a> 实现方法</h6><blockquote><p>由<strong>主机发送出去的数据包中的生存时间字段TTL由1开始逐渐增加</strong>，每个路由器都会返回一个时间超过报文，由此达到跟踪路由器的目的</p></blockquote><h3 id="_8、虚拟专用网vpn" tabindex="-1"><a class="header-anchor" href="#_8、虚拟专用网vpn" aria-hidden="true">#</a> 8、虚拟专用网VPN</h3><p><img src="http://images.hellocode.top/202211171551843.png" alt="13" loading="lazy"></p><blockquote><p>利用公用的因特网作为本机构各专用网之间的通信载体，这样的专用网又称为虚拟专用网。<br>虚拟专用网中各主机所分配的地址应该是本机构可自由分配的专用地址</p></blockquote><p><img src="http://images.hellocode.top/202211171552012.png" alt="14" loading="lazy"></p><h3 id="_9、网络地址转换nat" tabindex="-1"><a class="header-anchor" href="#_9、网络地址转换nat" aria-hidden="true">#</a> 9、网络地址转换NAT</h3><blockquote><p><code>NAT</code>能使大量使用<strong>内部专用地址的专用网络用户共享少量外部全球地址</strong>来访问因特网上的主机和资源【为了节省<code>IPv4</code>地址】</p></blockquote><p>由于绝大多数的网络应用都是使用运输层协议<code>TCP</code>或<code>UDP</code>来传送数据，因此可以<strong>利用运输层的端口号和IP地址一起进行转换。</strong></p><p>这样，<strong>用一个全球IP地址就可以使多个拥有本地地址的主机同时和因特网上的主机进行通信</strong>。这种将端口号和<code>IP</code>地址一起进行转换的技术叫作<strong>网络地址与端口号转换NAPT</strong></p><h2 id="五、运输层" tabindex="-1"><a class="header-anchor" href="#五、运输层" aria-hidden="true">#</a> 五、运输层</h2><blockquote><p><strong>物理层、数据链路层以及网络层</strong>它们共同解决了将主机通过异构网络互联起来所面临的的问题，<strong>实现了<mark>主机到主机</mark>的通信</strong></p><p>但实际上在<strong>计算机网络中进行通信的真正实体是位于通信<mark>两端主机中的进程</mark></strong></p><p><strong>如何为运行在不同主机上的应用进程提供直接的通信服务时运输层的任务，<mark>运输层协议又称端到端协议</mark></strong></p></blockquote><h3 id="_1、端口号" tabindex="-1"><a class="header-anchor" href="#_1、端口号" aria-hidden="true">#</a> 1、端口号</h3><blockquote><p>为了使运行不同操作系统的计算机的应用进程之间能进行网络通信，必须<strong>使用统一的方法对TCP/IP体系的应用进程进行标识，即端口号</strong>。</p></blockquote><p><strong>为什么不能使用进程标识符PID来区分各进程？</strong></p><blockquote><p>因为因特网上的计算机并不是使用统一的操作系统，<strong>不同的操作系统使用不同格式的进程标识符</strong></p></blockquote><p><strong>端口号只具有本地意义</strong>，即端口号只是为了标识本计算机应用层中的各进程，在因特网中，<strong>不同计算机中的相同的端口号是没有联系的</strong></p><p>端口号使用<strong>16比特</strong>表示，取值范围<code>0~65535</code>。</p><ul><li><strong>熟知端口号：0~1023</strong>，<code>IANA</code>把这些端口号指派给了<code>TCP/IP</code>体系中最重要的一些应用协议</li><li><strong>登记端口号：1024~49151</strong>，为没有熟知端口号的应用程序使用。使用这类端口号必须在<code>IANA</code>按照规定的手续登记，以防止重复。如<code>Microsoft RDP</code>微软远程桌面使用的端口是<code>3389</code></li><li><strong>短暂端口号：49152~65535</strong>，留给客户进程选择暂时使用。当服务器进程收到客户进程的报文时，就知道了客户进程所使用的的动态端口号。<strong>通信结束后，这个端口号可供其他客户进程以后使用</strong></li></ul><p><img src="http://images.hellocode.top/202211171552825.png" alt="15" loading="lazy"></p><h3 id="_2、复用" tabindex="-1"><a class="header-anchor" href="#_2、复用" aria-hidden="true">#</a> 2、复用</h3><ul><li>发送方的某些应用进程所发送的不同应用报文，<strong>在运输层使用UDP协议进行封装，这是UDP复用；若用TCP封装则称TCP复用</strong></li><li>运输层使用端口号区分不同进程，不管使用何种协议封装的报文，<strong>在网络层都需要使用IP协议封装成IP数据报，这是IP复用</strong>，数据报中协议字段的值用来表名封装的是何种协议数据单元</li><li>根据协议字段的值，<strong>将IP数据报封装的协议数据单元上交运输层的过程叫IP分用</strong></li><li>同理，<strong>UDP根据端口号将数据交给应用进程叫做UDP分用；TCP根据端口号将数据交给应用进程叫做TCP分用</strong></li></ul><h3 id="_3、用户数据报协议udp" tabindex="-1"><a class="header-anchor" href="#_3、用户数据报协议udp" aria-hidden="true">#</a> 3、用户数据报协议UDP</h3><ul><li><p><code>UDP</code>是<strong>无连接</strong>的，随时可向目的主机发送报文，<strong>支持单播、多播和广播</strong></p></li><li><p><code>UDP</code>收到应用层报文后直接为报文添加<code>UDP</code>首部就进行发送，即<strong>面向应用报文</strong></p></li><li><p><code>UDP</code>数据报<strong>首部仅8字节</strong></p><p><img src="http://images.hellocode.top/202211171552745.png" alt="16" loading="lazy"></p></li></ul><h3 id="_4、传输控制协议tcp" tabindex="-1"><a class="header-anchor" href="#_4、传输控制协议tcp" aria-hidden="true">#</a> 4、传输控制协议TCP</h3><ul><li><p><code>TCP</code>时<strong>面向连接</strong>的。发送数据前需要&quot;三报文握手&quot;建立连接，数据传输结束后需要&quot;四报文挥手&quot;释放连接</p></li><li><p><strong>仅支持单播</strong></p></li><li><p><strong>TCP是面向字节流的</strong>。其将应用进程交付下来的数据块仅仅看作是一连串的字节流，<code>TCP</code>将这些字节流编号并存储在缓冲中；接收方一边接收数据，一边将缓冲中的数据交给应用进程。</p></li><li><p><strong>接收方收到的字节流必须和发送方收到的字节流完全一致</strong></p></li><li><p><strong>不会出现传输差错</strong>(误码、丢失、乱序、重复)</p></li><li><p><code>TCP</code>报文段首部最小<code>20</code>字节，最大<code>60</code>字节</p><p><img src="http://images.hellocode.top/202211171552862.png" alt="17" loading="lazy"></p></li></ul><h4 id="流量控制" tabindex="-1"><a class="header-anchor" href="#流量控制" aria-hidden="true">#</a> 流量控制</h4><blockquote><p>一般来说，我们希望数据传输能快一些，但如果发送方把数据发送得过快，接收方就可能来不及接收，这会造成数据的丢失</p><p>流量控制就是<strong>让发送方的发送速率不要太快，要让接收方来得及接收</strong></p></blockquote><p><strong>利用滑动窗口实现流量控制</strong></p><ul><li>发送方和接收方窗口保持一致，发送方窗口随着接收方窗口变化而变化(通过确认报文告知发送方)</li><li>发送方发送完窗口内数据后需要等到确认报文才会滑动窗口并继续发送，若窗口内的某个值很久没有收到回答报文，则超时重传报文</li></ul><p><strong>若接收方窗口调为0后，一段时间之后又调为200，此时向发送方传递确认报文，可此时报文丢失，则会造成发送方窗口始终为0，接收方以为发送方收到了确认报文而开始等待数据，造成死锁，如何解决？</strong></p><blockquote><p>当发送方窗口大小为<code>0</code>时，其隔一段时间就会发送一个<code>1</code>字节大小的零窗口探测报文，看看此时接收窗口大小是否进行调整</p></blockquote><p><strong>若发送的零窗口探测报文也丢失了，会造成新死锁吗？</strong></p><blockquote><p>不会。因为零窗口探测报文也有超时重传机制</p></blockquote><h4 id="拥塞控制" tabindex="-1"><a class="header-anchor" href="#拥塞控制" aria-hidden="true">#</a> 拥塞控制</h4><blockquote><p>在某段时间，若<strong>对网络中某一资源的需求超过了该资源所能提供的可用部分</strong>，网络性能就要变坏，这种情况叫做<strong>拥塞</strong></p><p>若出现拥塞而不进行控制，<strong>整个网络的吞吐量将随输入负荷的增大而下降</strong></p></blockquote><h5 id="_1-慢开始和拥塞避免" tabindex="-1"><a class="header-anchor" href="#_1-慢开始和拥塞避免" aria-hidden="true">#</a> 1. 慢开始和拥塞避免</h5><ul><li><p>发送方维护一个叫做<strong>拥塞窗口cwnd</strong>的状态变量，<strong>其值取决于网络的拥塞程度，并且动态变化</strong></p><ul><li><code>拥塞窗口cwnd</code>的维护原则：<strong>只要网络没有出现拥塞，拥塞窗口就再增大一些(确认报文段窗口大小)，但只要网络出现拥塞，拥塞窗口就减少一些</strong></li><li>判断出现网络拥塞的依据：没有按时收到应当到达的确认报文(发送超时重传)</li></ul></li><li><p>发送方将拥塞窗口作为<strong>发送窗口swnd</strong>，即<code>swnd=cwnd</code></p></li><li><p>维护一个<strong>慢开始门限ssthresh</strong>状态变量</p><ul><li>当<code>cwnd &lt; ssthresh</code>时，使用慢开始算法</li><li>当<code>cwnd &gt; ssthresh</code>时，停止使用慢开始算法而改用拥塞避免算法</li><li>当<code>cwnd = ssthresh</code>时，既可使用慢开始算法，也可以使用拥塞避免算法</li></ul></li></ul><h6 id="慢开始" tabindex="-1"><a class="header-anchor" href="#慢开始" aria-hidden="true">#</a> <mark>慢开始</mark></h6><p><strong>拥塞窗口从1开始，根据应答报文大小来扩大拥塞窗口</strong>，如发送方窗口<code>2</code>，应答大小<code>2</code>，则下次发送大小为<code>4</code></p><h6 id="拥塞避免" tabindex="-1"><a class="header-anchor" href="#拥塞避免" aria-hidden="true">#</a> <mark>拥塞避免</mark></h6><p><strong>拥塞窗口每次只扩大1</strong>，而不是向慢开始那样根据发送方的返回窗口进行增加。</p><p>当窗口增加到一定大小，发送方发送的报文出现了超时重传，则判断网络可能出现了拥塞，此时<strong>将拥塞窗口初始化为1</strong>，同时将<strong>慢开始门限ssthresh设置为发生拥塞时窗口大小的一半</strong></p><p><em>&quot;拥塞避免&quot;并非指完全能够避免拥塞，而是指在拥塞避免阶段将拥塞窗口控制为按线性规律增长，使网络比较不容易出现拥塞</em></p><p><img src="http://images.hellocode.top/202211171552379.png" alt="18" loading="lazy"></p><h5 id="_2-快重传和快恢复" tabindex="-1"><a class="header-anchor" href="#_2-快重传和快恢复" aria-hidden="true">#</a> 2. 快重传和快恢复</h5><p>快重传是<strong>使发送方尽快进行重传</strong>，而不是等待超时重传计时器超时再重传</p><ul><li><p>要求<strong>接收方</strong>不用等待自己发送数据时才进行捎带确认，而是要<strong>立即发送确认</strong></p></li><li><p>即使<strong>收到了失序的报文段(说明有一段丢失了)<strong>也要立即发出</strong>对已收到的报文段的重复确认</strong></p></li><li><p><strong>发送方一旦收到3个连续的重复确认，就将相应的报文段立即重传</strong>，而不是等该报文段的超时重传计时器超时再重传</p></li><li><p>对于个别丢失的报文段，发送方不会出现超时重传，也就不会误认为出现了拥塞。使用快重传可以使整个网络的吞吐量提高约<code>20%</code></p><p><img src="http://images.hellocode.top/202211171553512.png" alt="19" loading="lazy"></p></li></ul><p>发送方一旦收到<code>3</code>个重复确认，就知道现在只是丢失了个别报文段。也是不启动慢开始算法，而执行<strong>快恢复算法</strong></p><ul><li>发送方<strong>将慢开始门限ssthresh值和拥塞窗口cwnd值调整为当前窗口的一半，开始执行拥塞避免算法</strong></li><li>也有的快恢复实现是把快恢复开始时的拥塞窗口<code>cwnd</code>值再增大一些，即等于新的<code>ssthresh+3</code><ul><li>既然发送方收到<code>3</code>个重复的确认，就表明有<code>3</code>个数据报文段已经离开了网络</li><li>这三个报文段不再消耗网络资源而是停留在接收方的接收缓存中</li><li>可见现在网络中不是堆积了报文段而是减少了<code>3</code>个报文段。因此可以适当把拥塞窗口扩大些</li></ul></li></ul><p><img src="http://images.hellocode.top/202211171553926.png" alt="20" loading="lazy"></p><h6 id="超时重传时间-rto-选择" tabindex="-1"><a class="header-anchor" href="#超时重传时间-rto-选择" aria-hidden="true">#</a> 超时重传时间(RTO)选择</h6><blockquote><p>正常情况下，超时重传时间应该设为略大于往返时间。但是由于各区域的速率可能不一致，因此将超时重传时间设置为一个固定值是行不通的</p></blockquote>`,228),N=s("p",null,[l("利用每次测量得到的"),s("code",null,"RTT"),l("样本，计算"),s("strong",null,[l("加权平均往返时间"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"R"),s("mi",null,"T"),s("msub",null,[s("mi",null,"T"),s("mi",null,"S")])]),s("annotation",{encoding:"application/x-tex"},"RTT_S")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8333em","vertical-align":"-0.15em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"RT"),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3283em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.1389em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.05764em"}},"S")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])])]),l("(平滑的往返时间)")],-1),V=s("p",null,[l("显然，"),s("strong",null,[l("超时重传时间"),s("mark",null,"RTO"),l("应略大于加权平均往返时间")]),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"R"),s("mi",null,"T"),s("msub",null,[s("mi",null,"T"),s("mi",null,"S")])]),s("annotation",{encoding:"application/x-tex"},"RTT_S")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8333em","vertical-align":"-0.15em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"RT"),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3283em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.1389em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.05764em"}},"S")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])])],-1),B=s("p",null,[s("img",{src:"http://images.hellocode.top/202211171553423.png",alt:"21",loading:"lazy"})],-1),U=s("p",null,[s("strong",null,"往返时间测量问题")],-1),j=s("p",null,[s("img",{src:"http://images.hellocode.top/202211171553586.png",alt:"22",loading:"lazy"})],-1),O=s("p",null,[s("strong",null,"针对出现超时重传时无法测准往返时间RTT的问题，有以下解决方法")],-1),K=s("blockquote",null,[s("p",null,[l("在计算加权平均往返时间"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"R"),s("mi",null,"T"),s("msub",null,[s("mi",null,"T"),s("mi",null,"S")])]),s("annotation",{encoding:"application/x-tex"},"RTT_S")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8333em","vertical-align":"-0.15em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"RT"),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3283em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.1389em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.05764em"}},"S")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])]),l("时，只要报文段重传了，就不采用其往返时间"),s("code",null,"RTT"),l("样本。也就是"),s("strong",null,[l("出现重传时，不重新计算"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"R"),s("mi",null,"T"),s("msub",null,[s("mi",null,"T"),s("mi",null,"S")])]),s("annotation",{encoding:"application/x-tex"},"RTT_S")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8333em","vertical-align":"-0.15em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"RT"),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3283em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.1389em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.05764em"}},"S")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])]),l("，进而超时重传时间RTO也不会重新计算")]),l("。")]),s("p",null,"此方法的漏洞如下：如果报文段时延突然增大很多，并且之后很长一段时间都会保持这种时延。因此在原来得出的重传时间内，不会收到确认报文段，于是重传，造成死锁"),s("p",null,[l("修正方法："),s("strong",null,"报文段每重传一次，就把超时重传时间RTO增大一些，典型的做法是将RTO的值取为旧RTO的2倍")])],-1),E=s("h4",{id:"可靠传输",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#可靠传输","aria-hidden":"true"},"#"),l(" 可靠传输")],-1),G={href:"https://www.bilibili.com/video/BV1c4411d7jb?p=63",target:"_blank",rel:"noopener noreferrer"},X=a('<p><img src="http://images.hellocode.top/202211171553606.png" alt="23" loading="lazy"></p><h4 id="运输连接管理" tabindex="-1"><a class="header-anchor" href="#运输连接管理" aria-hidden="true">#</a> 运输连接管理</h4><blockquote><p><code>TCP</code>的运输连接管理就是使运输连接的建立和释放都能正常地进行</p></blockquote><p><img src="http://images.hellocode.top/202211171553523.png" alt="24" loading="lazy"></p><ul><li><code>SYN</code>为<code>1</code>的报文段不能携带数据，但会消耗一个<strong>序列号seq</strong></li><li><code>ACK=1</code>代表这是普通确认报文段，<strong>ack=x+1表示这是对报文段序列号seq=x的确认</strong></li></ul><p><img src="http://images.hellocode.top/202211171553540.png" alt="25" loading="lazy"></p><ul><li>客户端发起关闭请求，一去一回后进入半关闭状态【客户端不再发送数据，服务端可能还会发】</li><li>服务器将自己剩余的数据发送完后也发送一个关闭请求，接着客户端给予回应后服务器关闭，客户机则要等到一段时间后完全关闭(<strong>防止发给服务器的确认报文丢失</strong>)</li></ul><p><img src="http://images.hellocode.top/202211171554612.png" alt="26" loading="lazy"></p><h4 id="首部格式" tabindex="-1"><a class="header-anchor" href="#首部格式" aria-hidden="true">#</a> 首部格式</h4><p><img src="http://images.hellocode.top/202211171554814.png" alt="27" loading="lazy"></p>',10),W=s("ul",null,[s("li",null,[s("p",null,[s("strong",null,"源端口"),l("：占"),s("code",null,"16"),l("比特，写入源端口号，用来"),s("strong",null,[l("标识"),s("mark",null,"发送"),l("该TCP报文段的应用进程")])])]),s("li",null,[s("p",null,[s("strong",null,"目的端口"),l("：占"),s("code",null,"16"),l("比特，写入目的端口号，用来"),s("strong",null,[l("标识"),s("mark",null,"接收"),l("该TCP报文段的应用进程")])])]),s("li",null,[s("p",null,[s("strong",null,"序号"),l("：占"),s("code",null,"32"),l("比特，取值范围"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",{stretchy:"false"},"["),s("mn",null,"0"),s("mo",{separator:"true"},","),s("msup",null,[s("mn",null,"2"),s("mn",null,"32")]),s("mo",null,"−"),s("mn",null,"1"),s("mo",{stretchy:"false"},"]")]),s("annotation",{encoding:"application/x-tex"},"[0,2^{32}-1]")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0641em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"["),s("span",{class:"mord"},"0"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"32")])])])])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},"]")])])]),l("，序号增加到最后一个后，下一个序号就又回到"),s("code",null,"0"),l("。作用是"),s("strong",null,"指出本TCP报文段数据载荷的第一个字节的序号")])]),s("li",null,[s("p",null,[s("strong",null,"确认标志位ACK"),l("：取值为"),s("code",null,"1"),l("时确认号字段才有效，为"),s("code",null,"0"),l("时确认号字段无效")])]),s("li",null,[s("p",null,[s("strong",null,"确认号"),l("：占"),s("code",null,"32"),l("比特，取值范围"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",{stretchy:"false"},"["),s("mn",null,"0"),s("mo",{separator:"true"},","),s("msup",null,[s("mn",null,"2"),s("mn",null,"32")]),s("mo",null,"−"),s("mn",null,"1"),s("mo",{stretchy:"false"},"]")]),s("annotation",{encoding:"application/x-tex"},"[0,2^{32}-1]")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0641em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"["),s("span",{class:"mord"},"0"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"32")])])])])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},"]")])])]),l("，序号增加到最后一个后，下一个序号就又回到"),s("code",null,"0"),l("。可理解为"),s("strong",null,"若确认号=n，则表明到序号n-1为止的所有数据都已正确接收，期望接收序号为n的数据")])]),s("li",null,[s("p",null,[s("strong",null,"数据偏移"),l("：占"),s("code",null,"4"),l("比特，并"),s("strong",null,"以4字节为单位")]),s("p",null,[l("用来指出"),s("code",null,"TCP"),l("报文段的数据载荷部分的起始处距离"),s("code",null,"TCP"),l("报文段的起始处。这个字段"),s("strong",null,"实际上是指出TCP报文段的首部长度")]),s("p",null,[s("strong",null,[l("首部固定长度为20字节，因此数据偏移字段的最小值"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",{stretchy:"false"},"("),s("mn",null,"0101"),s("msub",null,[s("mo",{stretchy:"false"},")"),s("mn",null,"2")])]),s("annotation",{encoding:"application/x-tex"},"(0101)_2")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"0101"),s("span",{class:"mclose"},[s("span",{class:"mclose"},")"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])]),l("；首部最大长度为60字节，因此数据偏移字段最大值为"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",{stretchy:"false"},"("),s("mn",null,"1111"),s("msub",null,[s("mo",{stretchy:"false"},")"),s("mn",null,"2")])]),s("annotation",{encoding:"application/x-tex"},"(1111)_2")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"1111"),s("span",{class:"mclose"},[s("span",{class:"mclose"},")"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])])])])]),s("li",null,[s("p",null,[s("strong",null,"保留字段"),l("：占"),s("strong",null,"6比特"),l("，保留为今后使用，但是目前应置为"),s("code",null,"0")])]),s("li",null,[s("p",null,[s("strong",null,"窗口"),l("：占"),s("strong",null,"16比特"),l("，以字节为单位。指出"),s("strong",null,"发送本报文段一方的接收窗口")]),s("p",null,[l("窗口值作为接收方让发送方设置其发送窗口的依据，这是"),s("strong",null,"以接收方的接收能力来控制发送方的发送能力"),l("，称为流量控制")])]),s("li",null,[s("p",null,[s("strong",null,"检验和"),l("：占"),s("strong",null,"16比特"),l("，检测范围"),s("strong",null,"包括TCP报文段的首部和数据载荷两部分")]),s("p",null,[l("在计算校验和时，要在"),s("code",null,"TCP"),l("报文段的前面加上"),s("code",null,"12"),l("字节的伪首部")])]),s("li",null,[s("p",null,[s("strong",null,"同步标志位SYN"),l("：在"),s("code",null,"TCP"),l("连接建立时用来同步序号")])]),s("li",null,[s("p",null,[s("strong",null,"终止标志位FIN"),l("：用来释放"),s("code",null,"TCP"),l("连接")])]),s("li",null,[s("p",null,[s("strong",null,"复位标志位RST"),l("：用来复位"),s("code",null,"TCP"),l("连接")]),s("p",null,[l("当"),s("code",null,"RST=1"),l("时，表明"),s("code",null,"TCP"),l("连接出现了异常，必须释放连接，然后再重新建立连接；"),s("code",null,"RST"),l("置"),s("code",null,"1"),l("还用来拒绝一个非法的报文段或拒绝打开一个"),s("code",null,"TCP"),l("连接")])]),s("li",null,[s("p",null,[s("strong",null,"推送标志位PSH"),l("：接收方的"),s("code",null,"TCP"),l("收到该"),s("strong",null,"标志位为1的报文段会尽快上交应用进程"),l("，而不必等到接收缓存都填满后再向上交付")])]),s("li",null,[s("p",null,[s("strong",null,"紧急标志位URG"),l("：取值"),s("strong",null,"为1"),l("时"),s("strong",null,"紧急指针字段有效"),l("；取值为"),s("code",null,"0"),l("时紧急指针字段无效。")])]),s("li",null,[s("p",null,[s("strong",null,"紧急指针"),l("：占"),s("code",null,"16"),l("比特，以字节为单位，用来指明紧急数据的长度")]),s("p",null,[l("当发送方有紧急数据时，可"),s("strong",null,"将紧急数据插队到发送缓存的最前面"),l("，并立刻封装到一个"),s("code",null,"TCP"),l("报文段中进行发送。紧急指针会指出本报文段数据载荷部分包含了多长的紧急数据，紧急数据之后是普通数据")])]),s("li",null,[s("p",null,[s("strong",null,"选项"),l("：增加选项可以增加"),s("code",null,"TCP"),l("的功能")]),s("ul",null,[s("li",null,[s("strong",null,"最大报文段长度MSS选项"),l("："),s("code",null,"TCP"),l("报文段数据载荷部分的最大长度")]),s("li",null,[s("strong",null,"窗口扩大选项"),l("：为了扩大窗口(提高吞吐率)")]),s("li",null,[s("strong",null,"时间戳选项"),l("： "),s("ul",null,[s("li",null,[l("用来计算往返时间"),s("code",null,"RTT")]),s("li",null,[l("用于处理序号超范围的情况，又称为防止序号绕回"),s("code",null,"PAWS")])])]),s("li",null,[s("strong",null,"选择确认选项"),l("：实现选择确认功能")])])]),s("li",null,[s("p",null,[s("strong",null,"填充"),l("：由于选项长度可变，因此"),s("strong",null,"使用填充来保证报文段首部能被4整除")])])],-1),Q=a('<h2 id="六、应用层" tabindex="-1"><a class="header-anchor" href="#六、应用层" aria-hidden="true">#</a> 六、应用层</h2><blockquote><p>解决通过应用进程的交互来实现特定网络应用的问题</p><p>应用层是计算机网络体系结构的<strong>最顶层</strong>，是<strong>设计和建立见算计网络的最终目的</strong></p></blockquote><h3 id="_1、客户-服务器方式-c-s" tabindex="-1"><a class="header-anchor" href="#_1、客户-服务器方式-c-s" aria-hidden="true">#</a> 1、客户/服务器方式(C/S)</h3><ul><li><strong>客户/服务器</strong><ul><li>客户和服务器是指通信中所涉及的两个应用进程</li><li>客户/服务器方式所描述的是进程之间服务和被服务的关系</li><li><strong>客户是服务请求方，服务器是服务提供方</strong></li><li><strong>服务器总是处于<mark>运行等待状态</mark>，并等待客户的服务请求。服务器具有固定端口号(例如HTTP服务器的默认端口号为80)，而运行服务器的主机也具有固定的IP地址</strong></li></ul></li><li>基于<code>C/S</code>方式的应用服务通常是<strong>服务集中型</strong>的，即应用服务集在网络中比客户计算机少得多的服务器计算机上 <ul><li>由于一台服务器计算机要为多个客户机提供服务，在<code>C/S</code>应用中，<strong>常会出现服务器计算机跟不上众多客户机请求的情况</strong></li><li>为此，在<code>C/S</code>应用中，常用<strong>计算机群集</strong>(或服务器场)构建一个强大的<strong>虚拟服务器</strong></li></ul></li></ul><h3 id="_2、对等方式-p2p方式" tabindex="-1"><a class="header-anchor" href="#_2、对等方式-p2p方式" aria-hidden="true">#</a> 2、对等方式(P2P方式)</h3><p><img src="http://images.hellocode.top/202211171554570.png" alt="28" loading="lazy"></p><h3 id="_3、动态主机配置协议dhcp" tabindex="-1"><a class="header-anchor" href="#_3、动态主机配置协议dhcp" aria-hidden="true">#</a> 3、动态主机配置协议DHCP</h3><blockquote><p>通过<code>DHCP</code>服务器为指定网段主机分配<code>IP</code>地址</p></blockquote><p><img src="http://images.hellocode.top/202211171554662.png" alt="29" loading="lazy"></p><ul><li><p><code>DHCP</code>客户机首先进行广播寻找<code>DHCP</code>服务器(&quot;<strong>DHCP发现</strong>&quot;消息)，源地址为本机<code>0.0.0.0</code>，目的地址为广播地址<code>255.255.255.255</code></p></li><li><p><code>DHCP</code>服务器收到后，返回&quot;<strong>DHCP提供</strong>&quot;消息，其中包含提供给<code>DHCP</code>客户机的<code>IP</code>地址和相关配置信息。源地址为<code>DHCP</code>服务器地址，目的地址为<strong>广播地址(因为此时目的客户机还没有IP地址)</strong></p></li><li><p>客户机可能会收到<strong>多个DHCP提供消息，一般以收到的第一个为准</strong>。此时客户机知道<code>DHCP</code>服务器可以给它分配地址，因此发送&quot;<strong>DHCP请求</strong>&quot;报文来请求分配<code>IP</code>地址，报文的源地址为<code>0.0.0.0</code>，目的地址为<code>255.255.255.255</code></p></li><li><p><code>DHCP</code>收到请求信息后，查看其中<strong>事务ID</strong>是否相符，若不符则丢弃；符合则从地址池中取得一个<code>IP</code>地址，并通过<code>ARP</code>协议确认此地址未被使用后，将其封装进&quot;<strong>DHCP确认</strong>&quot;信息中，报文源地址为<code>DHCP</code>服务器地址，目的地址为广播地址</p></li><li><p>客户机收到<code>DHCP</code>确认信息后，查看其中事务<code>ID</code>是否相符，不符则丢弃；符合则<strong>再次使用ARP确认IP地址没有被使用，确认成功后将此IP地址应用(有一定租约)。</strong></p></li><li><p><strong>当IP地址租约达到0.5倍时间时</strong>，客户机会再次向<code>DHCP</code>服务器发送请求信息，此时<code>DHCP</code>服务器会出现以下三种情况</p><ol><li>收到请求后，返回一个<strong>确认报文</strong>，其中有新的<code>IP</code>地址租期</li><li>收到请求后，返回<strong>否认报文</strong>，则客户机收到后立刻停止使用IP地址并重新发送&quot;<code>DHCP</code>发现&quot;报文</li><li>不响应。则在租期达到<strong>0.875倍</strong>时，<code>DHCP</code>客户必须重新发送&quot;<strong>DHCP请求</strong>&quot;报文，继续等待<code>DHCP</code>服务器可能做出的反应。若依然无反应，则租用期到后，客户机必须立刻停止使用当前<code>IP</code>地址</li></ol></li><li><p><strong>客户端可随时终止DHCP服务器提供的租用期</strong>，这时只需要向<code>DHCP</code>服务器发送<code>DHCP</code>释放报文即可。源地址<code>0.0.0.0</code>，目的地址<code>255.255.255.255</code></p></li></ul><h3 id="_4、域名系统dns" tabindex="-1"><a class="header-anchor" href="#_4、域名系统dns" aria-hidden="true">#</a> 4、域名系统DNS</h3><blockquote><p>我们通过输入网址来访问网页，可实际上计算机间的通信是通过IP地址，所以网址的本质上是<code>IP</code>地址，将网址与IP地址映射起来就是<code>DNS</code>的作用</p></blockquote><p><strong>因特网是否可以只适用一台DNS服务器？</strong></p><blockquote><p>这种做法不可取。因为因特网的规模很大，如果只有一个服务器，那么一旦其出现故障，整个因特网就会瘫痪</p><p>因此现实中采用**<mark>层次结构的命名树</mark>**作为主机的名字(即域名)，并使用分布式的域名系统<code>DNS</code></p><p><strong>DNS使大多数域名都在本地解析</strong>，仅少量解析需要在因特网上通信，因此系统效率很高。由于<code>DNS</code>是分布式系统，即使单个计算机出了故障，也不会妨碍整个系统的正常运行</p></blockquote><p><img src="http://images.hellocode.top/202211171554348.png" alt="30" loading="lazy"></p><p><img src="http://images.hellocode.top/202211171554857.png" alt="31" loading="lazy"></p><p><img src="http://images.hellocode.top/202211171554514.png" alt="32" loading="lazy"></p><p><img src="http://images.hellocode.top/202211171554936.png" alt="33" loading="lazy"></p><p><img src="http://images.hellocode.top/202211171554969.png" alt="34" loading="lazy"></p><h3 id="_5、文件传送协议ftp" tabindex="-1"><a class="header-anchor" href="#_5、文件传送协议ftp" aria-hidden="true">#</a> 5、文件传送协议FTP</h3><blockquote><p>将某台计算机中的文件通过网络传送到可能相距很远的另一台计算机中，是一项基本的网络应用，即<strong>文件传送</strong></p></blockquote><p><code>FTP</code>的常见用途是在计算机之间传输文件，尤其是<strong>用于批量传输文件</strong>。<code>FTP</code>的另一个常见用途是<strong>让网站设计者将构成网站内容的大量文件批量上传到他们的Web服务器</strong></p><ul><li><strong>FTP提供交互式的访问</strong>，运行客户指明文件的类型与格式(如指明是否使用<code>ASCII</code>码)，并<strong>允许文件具有存取权限</strong>(如访问文件的用户必须经过授权，并输入有效的口令)</li><li><strong>FTP屏蔽了各计算机系统的细节，因而适合于在异构网络中任意计算机之间传送文件</strong></li></ul><p><img src="http://images.hellocode.top/202211171554244.png" alt="35" loading="lazy"></p><ul><li>用于<strong>传送控制命令</strong>的<code>TCP</code>连接在<strong>整个会话过程都保持开启状态</strong></li><li>用于<strong>传送数据</strong>的<code>TCP</code>连接只会在<strong>有数据传送时开启，数据结束传送后就关闭</strong></li></ul><h3 id="_6、电子邮件" tabindex="-1"><a class="header-anchor" href="#_6、电子邮件" aria-hidden="true">#</a> 6、电子邮件</h3><p>电子邮件系统的三个主要组成构件：<strong>用户代理，邮件服务器，以及电子邮件所需的协议</strong></p><ul><li><strong>用户代理</strong>是用户与电子邮件系统的接口，又称为<strong>电子邮件客户端软件</strong></li><li><strong>邮件服务器</strong>是电子邮件系统的基础设施。因特网上所有的<code>ISP</code>都有邮件服务器，其<strong>功能是发送和接收邮件，同时还要负责维护用户的邮箱</strong></li><li><strong>协议</strong>包括邮件<strong>发送协议</strong>(如<code>SMTP</code>)和邮件<strong>读取协议</strong>(如<code>POP3</code>，<code>IMAP</code>)</li></ul><p><img src="http://images.hellocode.top/202211171554848.png" alt="36" loading="lazy"></p><h4 id="_6-1-简单邮件传送协议smtp" tabindex="-1"><a class="header-anchor" href="#_6-1-简单邮件传送协议smtp" aria-hidden="true">#</a> 6.1. 简单邮件传送协议SMTP</h4><p><img src="http://images.hellocode.top/202211171555832.png" alt="37" loading="lazy"></p><p><img src="http://images.hellocode.top/202211171555191.png" alt="38" loading="lazy"></p><h4 id="_6-2-邮件读取协议" tabindex="-1"><a class="header-anchor" href="#_6-2-邮件读取协议" aria-hidden="true">#</a> 6.2. 邮件读取协议</h4><p><img src="http://images.hellocode.top/202211171555148.png" alt="39" loading="lazy"></p><h4 id="_6-3-基于万维网的电子邮件" tabindex="-1"><a class="header-anchor" href="#_6-3-基于万维网的电子邮件" aria-hidden="true">#</a> 6.3. 基于万维网的电子邮件</h4><p><img src="http://images.hellocode.top/202211171555993.png" alt="40" loading="lazy"></p><h3 id="_7、万维网" tabindex="-1"><a class="header-anchor" href="#_7、万维网" aria-hidden="true">#</a> 7、万维网</h3><blockquote><p>万维网并非某种特殊的计算机网络。它是一个大规模的、联机式的信息储藏所，<strong>是运行在因特网上的一个分布式应用</strong></p><p>万维网利用网页之间的超链接将不同网站的网页链接成一张逻辑上的信息网</p></blockquote><p>浏览器最重要的部分是<strong>渲染引擎，也就是浏览器内核</strong>。负责对网页内容进行解析和显示</p><ul><li><p>不同的浏览器内核对网页内容的解析也有不同，因此同一网页在不同内核的浏览器里显示的效果可能不同</p></li><li><p>网页编写者需要在不同内核的浏览器中测试网页显示效果</p></li><li><p>为了方便地访问在世界范围的文档，万维网使用统一资源定位符<code>URL</code>来指明因特网上任何种类&quot;资源&quot;的位置</p></li><li><p><code>URL</code>的一般形式由以下四个部分组成</p><p><img src="http://images.hellocode.top/202211171555311.png" alt="41" loading="lazy"></p></li></ul><h4 id="_7-1-超文本传输协议http" tabindex="-1"><a class="header-anchor" href="#_7-1-超文本传输协议http" aria-hidden="true">#</a> 7.1. 超文本传输协议HTTP</h4><blockquote><p><code>HTTP</code>定义了浏览器(即万维网进程)怎样向万维网服务器请求万维网文档，以及万维网服务器怎样把万维网文档传送给浏览器</p></blockquote><p><img src="http://images.hellocode.top/202211171555510.png" alt="42" loading="lazy"></p><p><img src="http://images.hellocode.top/202211171555492.png" alt="43" loading="lazy"></p><h5 id="http请求报文" tabindex="-1"><a class="header-anchor" href="#http请求报文" aria-hidden="true">#</a> HTTP请求报文</h5><p><img src="http://images.hellocode.top/202211171556835.png" alt="44" loading="lazy"></p><h5 id="http响应报文" tabindex="-1"><a class="header-anchor" href="#http响应报文" aria-hidden="true">#</a> HTTP响应报文</h5><p><img src="http://images.hellocode.top/202211171556220.png" alt="45" loading="lazy"></p><h4 id="_7-2-cookie" tabindex="-1"><a class="header-anchor" href="#_7-2-cookie" aria-hidden="true">#</a> 7.2. Cookie</h4><blockquote><p><code>Cookie</code>提供了一种机制使得万维网服务器能够&quot;记住&quot;用户，而无需用户主动提供用户标识信息。也就是说，<strong>Cookie是一种对无状态的HTTP进行状态化的技术</strong></p></blockquote><p><img src="http://images.hellocode.top/202211171556657.png" alt="46" loading="lazy"></p><h4 id="_7-3-万维网缓冲与代理服务器" tabindex="-1"><a class="header-anchor" href="#_7-3-万维网缓冲与代理服务器" aria-hidden="true">#</a> 7.3. 万维网缓冲与代理服务器</h4><p><img src="http://images.hellocode.top/202211171556985.png" alt="47" loading="lazy"></p><p><strong>如果原始服务器中的文档已经修改，但是代理服务器中仍然有缓存，那么主机访问文档时是否会访问到未修改的文档从而发送错误呢？</strong></p><blockquote><p>实际上，原始服务器会为每个响应的对象设定一个<strong>修改时间字段</strong>和一个<strong>有效日期字段</strong>。当请求到达代理服务器时，若文档未过期则直接返回响应报文，否则向原始服务器发送请求。请求头部中有<strong>If-modified-since字段，记录了上次文档的修改时间</strong>，如果代理服务器中文档的修改时间与原始服务器中文档的修改时间一致，说明文档没有发送变化，因此原始服务器返回一个空文档，否则返回新文档</p></blockquote><p><img src="http://images.hellocode.top/202211171556367.png" alt="48" loading="lazy"></p><h3 id="_8、防火墙" tabindex="-1"><a class="header-anchor" href="#_8、防火墙" aria-hidden="true">#</a> 8、防火墙</h3><blockquote><p>防火墙主要用于保护一个网络区域免受来自另一个网络区域的网络攻击和网络入侵行为，主要部署在网络边界，对进出网络的访问行为进行<strong>控制</strong>，安全防护是其核心特性，比如在企业网中，在与<code>Internet</code>接口处布置防火墙，可以起到过滤病毒、阻止黑客攻击等好处</p></blockquote><h4 id="_8-1-安全领域" tabindex="-1"><a class="header-anchor" href="#_8-1-安全领域" aria-hidden="true">#</a> 8.1. 安全领域</h4><blockquote><p>安全区域<code>Zone</code>是一个或多个接口的集合，是防火墙区别路由器的主要特性，防火墙通过安全区域来划分网络，标识报文流动的“路线”，一般来说，当报文在不同的安全区域流动时，才会受到控制。</p><p>在华为防火墙中，一个接口只能加入到一个安全区域</p></blockquote><h5 id="默认安全领域" tabindex="-1"><a class="header-anchor" href="#默认安全领域" aria-hidden="true">#</a> 默认安全领域</h5><p>华为防火墙的默认安全区域：<code>Trust</code>、<code>DMZ</code>和<code>Untrust</code></p><table><thead><tr><th>区域名</th><th>受信任程度</th><th>安全级别</th><th>何时使用</th></tr></thead><tbody><tr><td>Trust</td><td>高</td><td>85</td><td>定义内部用户所在网络</td></tr><tr><td>DMZ</td><td>中等</td><td>50</td><td>定义内部服务器所在网络</td></tr><tr><td>Untrust</td><td>低</td><td>5</td><td>定义Internet等不安全的网络</td></tr><tr><td>Local</td><td>代表防火墙本身</td><td>100</td><td></td></tr></tbody></table><p>凡是防火墙主动发出的报文均可认为是<code>Local</code>区域发出的，凡是需要防火墙响应并处理的报文均可认为是<code>Local</code>区域接收。<code>Local</code>不能添加接口， 因为防火墙的所有接口都隐含属于<code>Local</code>区域</p><p>在网络数量较少网络中，使用默认的安全区域就可以满足划分网络的需求，反之，则需要创建新的安全区域。</p><h4 id="_8-2-安全域间" tabindex="-1"><a class="header-anchor" href="#_8-2-安全域间" aria-hidden="true">#</a> 8.2. 安全域间</h4><p>安全域间是<strong>两个安全区域的唯一道路</strong>，也可以用来描述流量的传输通道，任意两个安全区域都可构成一个安全域间。如果希望对经过这条通道的流量进行控制，就必须配置安全策略。</p><p>报文在两个安全区域之间流动时，报文从低级别的安全区域向高级别的安全区域流动时为入方向<code>Inbound</code>，报文从高级别的安全区域向低级别的安全区域流动时为出方向<code>Outbound</code>。</p><p>通信双方一定会交互报文，即安全区域的两个方向上都有报文的传输，通过设置安全区域，防火墙的安全区域之间有等级明确的域间关系，不同的安全区域代表不同网络，防火墙成为连接各个网络的节点，以此为基础，防火墙可以对各网络之间流动的报文实施管控。</p><img src="http://images.hellocode.top/20210102134711525.png" alt="在这里插入图片描述" style="zoom:67%;"><p><strong>防火墙内不允许定义优先级一样的区域，同等优先级的区域无法识别Inbout、Outbout</strong></p><h4 id="_8-3-三种工作模式" tabindex="-1"><a class="header-anchor" href="#_8-3-三种工作模式" aria-hidden="true">#</a> 8.3. 三种工作模式</h4><ul><li><strong>路由模式</strong>：采用路由模式时，可以完成<code>ACL</code>包过滤、<code>NAT</code>转换等功能，<code>Trust</code>与<code>Untrust</code>区域间有一台防护墙，防火墙左右接口<code>IP</code>不同，需要使用路由表指导报文的转发，此种模式就是路由。</li><li><strong>透明模式</strong>：透明模式的防火墙支持<code>ACL</code>规则检查，防攻击检查、流量监控等功能，报文在防火墙当中不仅仅像是交换机的二层处理，还会对报文进行高层分析处理，两个区域<code>IP</code>属于同一网段，防火墙接口没有配置<code>IP</code>，工作成交换机模式。</li><li><strong>混合模式</strong>：<code>Trust</code>与<code>Untrust</code>区域都使用同一网段，两台防火墙，组成主备关系，防火墙工作为路由模式，左右流量是二层转发，上下流量是三层转发。</li></ul>',73);function Y(Z,$){const e=i("ExternalLinkIcon");return o(),n("div",null,[d,p,m,h,g,u,b,y,k,x,q,v,P,_,f,C,A,M,w,I,T,z,D,S,L,R,F,H,N,V,B,U,j,O,K,E,s("p",null,[s("a",G,[l("具体实现"),c(e)])]),X,W,Q])}const ls=t(r,[["render",Y],["__file","network.html.vue"]]);export{ls as default};
