import{_ as a}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as n,c as t,a as e,b as l,d as o,e as d,r as c}from"./app.ff70f562.js";const s={},r=d('<h1 id="linux" tabindex="-1"><a class="header-anchor" href="#linux" aria-hidden="true">#</a> Linux</h1><h2 id="一、基础篇" tabindex="-1"><a class="header-anchor" href="#一、基础篇" aria-hidden="true">#</a> 一、基础篇</h2><h3 id="_1、初识linux" tabindex="-1"><a class="header-anchor" href="#_1、初识linux" aria-hidden="true">#</a> 1、初识Linux</h3><p><strong>操作系统</strong>：管理计算机硬件与软件资源的计算机程序，同时也是计算机系统的内核与基石</p><p><strong>主流操作系统</strong></p><ul><li>桌面操作系统：Window系列、macOS、Linux</li><li>服务器操作系统：Linux、Windows Server</li><li>嵌入式操作系统：Linux</li><li>移动设备操作系统：Unix（Linux、ios）</li></ul><p><strong>Linux发展历程</strong></p><p><img src="http://images.hellocode.top/b0cdbe588ce94f04b73b803e8ec4381f.png" alt="img" loading="lazy"></p><ul><li>1984年Minix（只用于教学）</li><li>1991年编写驱动程序，年底公开Linux内核源码</li><li>1994年Linux1.0（Linus Torvalds）</li><li>至此开始流行起来</li></ul><p><strong>Linux特点</strong></p><ul><li><p>Linux是一套免费使用和自由传播的类Unix操作系统</p></li><li><p>是一个基于POSIX和Unix的多用户、多任务、支持多线程和多CPU的操作系统</p></li><li><p>它能运行主要的Unix工具软件、应用程序和网络协议。它支持32位和64位硬件</p></li><li><p>继承了Unix以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统</p></li><li><p>两个基本思想</p><ul><li>一切都是文件</li><li>每个软件都有确定的用途</li></ul></li><li><p>完全兼容POSIX1.0标准</p></li><li><p>多用户、多任务</p></li><li><p>良好的界面</p></li><li><p>支持多种平台</p></li></ul><p><strong>Linux与其它操作系统的区别</strong></p><ul><li>开源情况</li><li>硬件适用</li><li>本质不同</li><li>系统界面</li><li>驱动程序</li><li>系统使用</li><li>软件与支持</li></ul><blockquote><p>Windows更适用于家庭个人使用</p><p>Linux更适用于企业服务器使用</p></blockquote><p><strong>Linux发行商和常见发行版</strong></p><ul><li>Redhat公司--------Red Hat Linux（最著名的Linux版本、收费）-----免费的CentOS</li><li>CentOS特点：主流、免费、更新方便</li></ul><h3 id="_2、linux的安装和使用" tabindex="-1"><a class="header-anchor" href="#_2、linux的安装和使用" aria-hidden="true">#</a> 2、Linux的安装和使用</h3><p>先安装虚拟机，再安装Centos</p><h4 id="_2-1-vmware" tabindex="-1"><a class="header-anchor" href="#_2-1-vmware" aria-hidden="true">#</a> 2.1. Vmware</h4><p><strong>Vmware简介</strong></p><ul><li>不需要分区或者重开机就能在同一台PC上使用两种以上的操作系统</li><li>完全隔离并且保护不同操作系统的环境以及所有的软件、资料</li><li>不同的操作系统之间还可以进行互动操作</li><li>有复原功能</li><li>能够设置并且随时修改操作系统的操作环境</li><li>常见虚拟机软件：VMware workstation、VirtualBox</li></ul>',21),p=e("strong",null,"Vmware下载",-1),u={href:"https://www.vmware.com/cn.html",target:"_blank",rel:"noopener noreferrer"},h=e("strong",null,"CentOS镜像下载",-1),m={href:"https://www.centos.org/download/",target:"_blank",rel:"noopener noreferrer"},g=e("p",null,[e("em",null,"高速下载地址")],-1),b={href:"http://mirrors.aliyun.com",target:"_blank",rel:"noopener noreferrer"},v={href:"http://mirrors.sohu.com",target:"_blank",rel:"noopener noreferrer"},x={href:"http://mirrors.163.com",target:"_blank",rel:"noopener noreferrer"},k={href:"http://mirrors.cqu.edu.cn/CentOS",target:"_blank",rel:"noopener noreferrer"},f=d('<h4 id="_2-2-目录和文件" tabindex="-1"><a class="header-anchor" href="#_2-2-目录和文件" aria-hidden="true">#</a> 2.2. 目录和文件</h4><ul><li>切换根目录：<code>cd /</code></li><li>查看目录内容：<code>ls -l</code></li></ul><p><strong>基本介绍</strong></p><ol><li>Linux的文件系统是采用级层式的树状目录结构，在此结构中的最上层是根目录“/”，然后在此目录下再创建其他的目录</li><li>在Linux世界里，一切皆文件（也会把硬件映射为文件进行管理）</li></ol><p><strong>具体结构</strong></p><ul><li><em>bin</em>（/usr/bin、/usr/local/bin）：是Binary的缩写，存放最常使用的命令</li><li>sbin（/usr/sbin、/usr/local/sbin）：存放系统管理员使用的系统管理程序</li><li><em>home</em>：存放普通用户的主目录，在Linux中每个用户都有一个自己的目录，一般目录名是以用户名命名</li><li><em>root</em>：系统管理员目录，也称作超级权限者的用户主目录</li><li>lib：系统开机所需要最基本的动态连接共享库，作用类似于Windows里的DLL文件，几乎所有的应用程序都需要用到这些共享库</li><li>lost+found：这个目录下一般是空的，在系统非法关机后，就会存放一些文件</li><li><em>etc</em>：所有的系统管理所需要的配置文件和子目录，比如安装mysql的my.conf</li><li><em>usr</em>：这是一个非常重要的目录，用户的很多应用程序都放在这个目录下，类似于Windows下的program files目录</li><li><em>boot</em>：存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件</li><li>proc：是一个虚拟目录，是系统内存的映射，访问这个目录来获取系统信息</li><li>srv：service缩写，存放一些服务启动后需要提取的数据</li><li>sys：这是Linux2.6内核的一个很大的变化，安装了2.6内核中新出现的一个文件系统sysfs</li><li>tmp：存放临时文件的目录</li><li>dev：类似于Windows的设备管理器，把所有的硬件用文件的形式存储</li><li><em>media</em>：Linux系统会自动识别一些设备，例如：U盘，光驱等等，当识别后，Linux会把识别的设备挂载到这个目录下</li><li><em>mnt</em>：系统提供该目录是为了让用户挂在临时文件系统的，我们可以将外部的存储挂载在mnt上，然后进入该目录就可以查看里面的内容了</li><li>opt：这是给主机额外安装软件所摆放的目录。如安装ORACLE数据库就可以放到该目录下，默认为空</li><li><em>usr/local</em>：这是另一个主机额外安装软件所安装的目录。一般是通过编译源码方式安装的程序</li><li>var：存放着不断扩充着的东西，习惯被修改的目录放在这个目录下，包括各种日志文件</li><li>selinux：是一种安全子系统，能控制程序只能访问特定文件，有三种工作模式，可自行设置</li></ul><h4 id="_2-3-时间同步" tabindex="-1"><a class="header-anchor" href="#_2-3-时间同步" aria-hidden="true">#</a> 2.3. 时间同步</h4><p><img src="http://images.hellocode.top/时间同步.png" alt="" loading="lazy"></p><h4 id="_2-4-克隆与快照" tabindex="-1"><a class="header-anchor" href="#_2-4-克隆与快照" aria-hidden="true">#</a> 2.4. 克隆与快照</h4><p><strong>克隆</strong>：将原系统完完全全的拷贝一份，原系统丢失后克隆的系统还能正常使用</p><ul><li>占用空间大</li><li>原系统不存在，克隆体还能用</li></ul><p><strong>快照</strong>：记录系统当前状态，并不会把系统完整拷贝</p><ul><li>占用空间小</li><li>原系统不存在，快照也就无法使用</li></ul><blockquote><p>克隆和拍摄快照时都需要关闭虚拟机</p></blockquote><h2 id="二、实际操作篇" tabindex="-1"><a class="header-anchor" href="#二、实际操作篇" aria-hidden="true">#</a> 二、实际操作篇</h2><ul><li>如需远程连接，可以使用XShell、SecureCRT、FinalShell等软件进行连接</li><li>需要知道对应的Linux服务器ip，在终端使用<code>ifconfig</code>可以进行查询</li><li>查询到Linux服务器IP后，在Windows命令行下使用ping指令可以判断是否连通，如果无法连通，则一定无法进行远程连接，就需要进行检查后连接</li></ul><h3 id="_1、vi和vim编辑器" tabindex="-1"><a class="header-anchor" href="#_1、vi和vim编辑器" aria-hidden="true">#</a> 1、vi和vim编辑器</h3><ul><li>Linux会内置vi文本编辑器</li><li>Vim具有程序编辑的能力，可以看作是vi的增强版，可以主动的以文字颜色辨别语法的正确性，方便程序设计。代码补全，编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用</li></ul><h4 id="_1-1-三种模式" tabindex="-1"><a class="header-anchor" href="#_1-1-三种模式" aria-hidden="true">#</a> 1.1. 三种模式</h4><p><strong>正常模式</strong></p><ul><li>以vim打开一个档案就直接进入一般模式了（默认的模式）</li><li>在这个模式中，可以使用【上下左右】按键来移动光标</li><li>可以使用【删除字符】或【删除整行】来处理档案内容</li><li>也可以使用【复制、粘贴】来处理文件的数据</li><li>按<code>:</code>进入命令行模式</li></ul><p><strong>插入模式</strong></p><ul><li>按下i、I、o、O、a、A、r、R等任何一个字母之后才会进入编辑模式</li><li>一般来说按i即可</li><li>输入<code>Esc</code>，再输入<code>：</code>进入命令行模式</li></ul><p><strong>命令行模式</strong></p><ul><li>在这个模式中，可以提供你相关指令，完成读取、存盘、替换、离开vim、显示行号等的动作</li><li><code>:wq</code>：保存退出</li><li><code>:q</code>：不保存退出，<code>:q!</code>强制退出，并且不保存</li></ul><h4 id="_1-2-快捷键" tabindex="-1"><a class="header-anchor" href="#_1-2-快捷键" aria-hidden="true">#</a> 1.2. 快捷键</h4><p><img src="http://images.hellocode.top/1635644-20200320235833308-556504745.png" alt="" loading="lazy"></p><p><strong>正常模式</strong></p><ul><li><p>拷贝当前行：<code>yy</code>，拷贝当前行向下的n行：<code>nyy</code>，粘贴：<code>p</code></p></li><li><p>删除当前行<code>dd</code>，删除当前行向下的n行：<code>ndd</code></p></li><li><p>到该文档最末行：<code>G</code>，最首行：<code>gg</code></p></li><li><p>撤销操作：<code>u</code></p></li><li><p>将光标移动到指定位置：<code>行号 shift g</code></p></li></ul><p><strong>命令行模式</strong></p><ul><li>在文件中查找某个单词：<code>/关键字</code>，回车 查找；输入<code>n</code>就是查找下一个</li><li>设置文件行号：<code>:set nu</code>，取消文件行号：<code>:set nonu</code></li></ul><h3 id="_2、关机重启和登录注销" tabindex="-1"><a class="header-anchor" href="#_2、关机重启和登录注销" aria-hidden="true">#</a> 2、关机重启和登录注销</h3><h4 id="_2-1-关机重启" tabindex="-1"><a class="header-anchor" href="#_2-1-关机重启" aria-hidden="true">#</a> 2.1. 关机重启</h4><p><strong>基本介绍</strong></p><ul><li><code>shutdown -h now</code>：立刻进行关机</li><li><code>shutdown -h 1</code>：1分钟后关机</li><li><code>shutdown -r now</code>：现在重启计算机</li><li><code>halt</code>：关机，作用和上面一样</li><li><code>reboot</code>：现在重启计算机</li><li><code>sync</code>：把内存的数据同步到磁盘</li></ul><p><strong>注意细节</strong></p><ul><li>不论是重启系统还是关闭系统，首先要运行sync命令，把内存中的数据写到磁盘中</li><li>目前的shutdown/reboot/halt等命令均已经在关机前进行了sync</li></ul><h4 id="_2-2-登录注销" tabindex="-1"><a class="header-anchor" href="#_2-2-登录注销" aria-hidden="true">#</a> 2.2. 登录注销</h4><p><strong>基本介绍</strong></p><ul><li>登陆时尽量少使用root账号登录，因为它是系统管理员，最大的权限，避免操作失误。可以利用普通用户登录，登陆后使用<code>su -用户名</code>命令来切换身份（-可以省略）</li><li>在提示符下输入logout即可注销用户</li></ul><p><strong>使用细节</strong></p><ul><li>logout注销指令在图形运行级别无效，在运行级别3下有效</li></ul><h3 id="_3、用户管理" tabindex="-1"><a class="header-anchor" href="#_3、用户管理" aria-hidden="true">#</a> 3、用户管理</h3><blockquote><p>Linux系统是一个多用户多任务的操作系统，任何一个要使用系统资源的用户，都必须先向系统管理员申请一个账号，然后以这个账号的身份进入系统</p></blockquote><p><strong>添加用户</strong></p><ul><li>基本语法：<code>useradd 用户名</code></li><li>细节说明 <ul><li>当创建用户成功之后，会自动的创建和用户同名的家目录</li><li>也可以通过<code>useradd -d 指定目录 用户名</code>，给新创建的用户指定家的目录</li></ul></li></ul><p><strong>指定/修改密码</strong></p><ul><li>基本语法：<code>passwd 用户名</code></li><li>细节说明 <ul><li>如果不写用户名的话默认修改当前登录的用户密码</li></ul></li></ul><p><strong>删除用户</strong></p><ul><li>基本语法：<code>userdel 用户名</code></li><li>细节说明 <ul><li><code>userdel -r 用户名</code>：删除用户及其家目录</li><li>不加<code>-r</code>只删除用户，保留家目录</li><li>一般情况下，建议保留家目录</li></ul></li></ul><p><strong>查询用户</strong></p><ul><li>基本语法：<code>id 用户名</code></li><li>细节说明 <ul><li>当用户不存在时，返回无此用户</li></ul></li></ul><p><strong>切换用户</strong></p><ul><li>在操作Linux时，如果当前用户的权限不够，可以通过<code>su -</code>指令，切换到高权限用户，比如root</li><li>基本用法：<code>su - 用户名</code></li><li>细节说明 <ul><li>从权限高的用户切换到权限低的用户，不需要输入密码，反之需要</li><li>当需要返回到原用户时，使用<code>exit/logout</code>指令</li></ul></li></ul><p><strong>查看当前用户信息</strong></p><ul><li>基本语法：<code>whoami/who am i</code></li><li>细节 <ul><li>如果通过切换用户指令切换后，使用该指令查询的是第一次登录时的用户</li></ul></li></ul><p><strong>用户组</strong></p><ul><li><p>类似于角色，系统可以对有共性的多个用户进行统一的管理</p></li><li><p>新增组：<code>groupadd 组名</code></p></li><li><p>删除组：<code>groupdel 组名</code></p></li><li><p>增加用户时直接加上组：<code>useradd -g 用户组 用户名</code></p></li><li><p>修改用户组：<code>usermod -g 新用户组 用户名</code><code>usermod -d 目录名 用户名</code>改变该用户登录的初始目录（用户需要有进入目录的权限）</p></li><li><p>细节</p><ul><li>如果在新增用户时，没有指定分组，会默认新建一个与用户同名的组并将该用户加入对应的组</li></ul></li></ul><p><em>用户和组相关文件</em></p><ul><li>/etc/passwd <ul><li>用户（user）的配置文件，记录用户的各种信息</li><li>每行的含义：<code>用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录Shell</code></li></ul></li><li>/etc/shadow <ul><li>口令的配置文件</li><li>每行的含义：<code>登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:警告时间:不活动时间:失效时间:标志</code></li></ul></li><li>/etc/group <ul><li>组（group）的配置文件，记录Linux包含的组的信息</li><li>每行的含义：<code>组名:口令:组标识号:组内用户列表</code></li></ul></li></ul><h3 id="_4、实用指令" tabindex="-1"><a class="header-anchor" href="#_4、实用指令" aria-hidden="true">#</a> 4、实用指令</h3><h4 id="_4-1-运行级别" tabindex="-1"><a class="header-anchor" href="#_4-1-运行级别" aria-hidden="true">#</a> 4.1. 运行级别</h4><p><strong>基本介绍</strong></p><p>运行级别说明</p><ol start="0"><li>关机</li><li>单用户【找回丢失密码】</li><li>多用户状态没有网络服务</li><li>多用户状态有网络服务</li><li>系统未使用保留给用户</li><li>图形界面</li><li>系统重启</li></ol><p><em>常用运行级别是3和5，也可以指定默认运行级别</em></p><ul><li>通过<code>init [0~6]</code>可以切换上面的运行级别</li></ul><blockquote><p>如果输入<code>init 3</code>将进入命令行界面，<code>init 0</code>关机，<code>init 6</code>重启......</p><p>在centos7以前，在<code>/etc/inittab</code>文件中进行修改</p></blockquote><p><em>默认运行级别</em></p><ul><li>查询当前默认运行级别：<code>systemctl get-default</code></li><li>修改默认运行级别为3级别：<code>systemctl set-default multi-user.target</code></li><li>在修改后，重启将进入所设置的默认运行级别</li></ul><p><strong>找回root密码</strong>（centos 7.6）</p><ol><li>启动系统，在开机界面按<code>e</code>进入编辑界面</li><li>进入编辑界面，使用键盘上的上下键把光标往下移动，找到以“Linux 16”开头内容所在的行数，在行的最后输入：<code>init=/bin/sh</code>（进入单用户运行级别）</li><li>完成输入后，直接按快捷键<code>ctrl + x</code>进入单用户模式</li><li>接着，在光标闪烁位置输入：<code>mount -o remount,rw /</code>（注意，各个单词间有空格），完成后按键盘的回车键（Enter）</li><li>再在新的一行最后输入：<code>passwd</code>，完成后按键盘的回车键。输入密码，然后再次确认密码即可，密码修改成功后，会显示passwd.....的样式，说明密码修改成功</li><li>接着，在鼠标闪烁的位置中（最后一行），输入<code>touch /.autorelabel</code>，完成后按回车键</li><li>继续在光标闪烁的位置处，输入<code>exec /sbin/init</code>，按回车，等待系统自动修改密码（过程时间可能有点长，耐心等待）。完成后，系统自动重启，新的密码就生效了</li></ol><h4 id="_4-2-帮助指令" tabindex="-1"><a class="header-anchor" href="#_4-2-帮助指令" aria-hidden="true">#</a> 4.2. 帮助指令</h4><ul><li>man：<code>man [命令或配置文件] </code>（功能描述：获得帮助信息）</li><li>help：<code>help 命令</code>（获得shell内置命令的帮助信息）</li><li>百度搜索更直接</li></ul><blockquote><p>在查看帮助信息时，一页展示不下的话，按空格键会继续向下走</p></blockquote><h4 id="_4-3-文件目录指令" tabindex="-1"><a class="header-anchor" href="#_4-3-文件目录指令" aria-hidden="true">#</a> 4.3. 文件目录指令</h4><p><strong>目录操作</strong></p><ul><li><em>pwd指令</em>：<code>pwd</code>（显示当前工作目录的绝对路径）</li><li><em>ls指令</em>：<code>ls [选项] [目录或是文件]</code><ul><li><code>-a</code>：显示当前目录所有的文件和目录，包括隐藏的</li><li><code>-l</code>：以列表的方式显示信息（<code>ll</code>指令作用相同）</li><li><code>-lh</code>：便于查看，文件大小将展示为k</li></ul></li><li><em>cd指令</em>：<code>cd [参数]</code>（切换到指定目录） <ul><li><code>cd ~</code>或者<code>cd</code>：回到自己的家目录，比如你是root，<code>cd ~</code>就会回到/root</li><li><code>cd ..</code>：回到当前目录的上一级目录</li></ul></li></ul><p><strong>文件操作</strong></p><ul><li><p><em>mkdir指令</em>：<code>mkdir [选项] 要创建的目录</code>（用于创建目录）</p><ul><li><code>-p</code>：创建多级目录</li></ul></li><li><p><em>rmdir指令</em>：<code>rmdir [选项] 要删除的空目录</code>（用于删除目录）</p><ul><li>rmdir删除的是空目录，如果目录下有内容时无法进行删除</li><li>要删除非空目录，需要使用<code>rm -rf 要删除的目录</code></li></ul></li><li><p><em>touch指令</em>：<code>touch 文件名称</code>（创建空文件）</p></li></ul><p><strong>功能指令</strong></p><ul><li><em>cp指令</em>：<code>cp [选项] 源文件 目的地</code>（拷贝文件到指定目录） <ul><li><code>-r</code>：递归复制整个文件夹</li><li>强制覆盖不提示的方法：<code>\\cp</code></li></ul></li><li><em>rm指令</em>：<code>rm [选项] 要删除的文件或目录</code>（移除文件或目录） <ul><li><code>-r</code>：递归删除整个文件夹</li><li><code>-f</code>：强制删除不提示</li></ul></li><li><em>mv指令</em>（移动文件与目录或重命名） <ul><li><code>mv 旧文件名 新文件名</code>（重命名）</li><li><code>mv 源文件 目的地</code>（移动文件）</li></ul></li></ul><p><strong>查看指令</strong></p><ul><li><p><em>cat指令</em>：<code>cat [选项] 要查看的文件</code>（查看文件内容）</p><ul><li><code>-n</code>：显示行号</li><li>cat只能浏览文件，而不能修改文件，为了浏览方便，一般会带上 <code>管道命令 | more</code></li><li>例如：<code>cat -n /etc/profile | more</code></li></ul></li><li><p><em>more指令</em>：是一个基于VI编辑器的文本过滤器，它以全屏幕的方式按页显示文本文件的内容。more指令中内置了若干快捷键</p><ul><li>基本语法：<code>more 要查看的文件</code></li><li>空格：向下翻一页</li><li>回车：向下翻一行</li><li>q：立即离开more，不再显示该文件内容</li><li>Ctrl + F：向下滚动一屏</li><li>Ctrl + B：返回上一屏</li><li>=：输出当前的行号</li><li><code>:f</code>：输出文件名和当前行的行号</li></ul></li><li><p><em>less指令</em>：less指令用来分屏查看文件内容，它的功能与more指令类似，但是比more指令更加强大，支持各种显示终端。less指令在显示文件内容时，并不是一次将整个文件加载之后才显示，而是根据显示需要加载内容，对于显示大型文件具有较高的效率</p><ul><li>基本语法：<code>less 要查看的文件</code></li><li>空格：向下翻一页</li><li>pagedown：向下翻一页</li><li>pageup：向上翻一页</li><li>/字串：向下搜寻【字串】。n向下查找，N向上查找</li><li>?字串：向上搜寻【字串】。n向上查找，N向下查找</li></ul></li><li><p>q：离开less这个程序</p></li><li><p><em>echo指令</em>：<code>echo [选项] [输出内容]</code>（输出内容到控制台）</p></li><li><p><em>head指令</em>：用于显示文件的开头部分内容，默认情况下head指令显示文件的前10行内容</p><ul><li><code>head 文件</code>：查看文件头10行内容</li><li><code>head -n 5 文件</code>：查看文件头5行内容，5可以是任意行数</li></ul></li><li><p><em>tail指令</em>：用于输出文件中尾部的内容，默认情况下tail指令显示文件末尾10行内容</p><ul><li><code>tail 文件</code>：查看文件尾10行内容</li><li><code>tail -n 5 文件</code>：查看文件尾5行内容，5可以是任意行数</li><li><code>tail -f 文件</code>：实时追踪该文档的所有更新</li></ul></li><li><p><em>&gt; 指令和 &gt;&gt; 指令</em></p><ul><li><code>&gt;</code>：输出重定向（覆盖原内容）</li><li><code>&gt;&gt;</code>：追加（不覆盖原内容）</li><li>基本语法 <ul><li><code>ls -l &gt; 文件</code>：列表的内容写入a.txt中，覆盖写</li><li><code>ls -al &gt;&gt; 文件</code>：列表的内容追加到aa.txt的末尾</li><li><code>cat 文件1 &gt; 文件2</code>：将文件1的内容覆盖到文件2</li><li><code>echo &quot;内容&quot; &gt;&gt; 文件</code></li><li><code>cal &gt;&gt; /home/date.txt</code>：将日历信息追加到data.txt中（文件不存在自动创建）</li></ul></li></ul><blockquote><p>在追加内容时，如果目标文件不存在，将会自动创建出来</p><p><code>cal</code>：显示当前日历信息</p></blockquote></li></ul><p><strong>其他指令</strong></p><ul><li><em>ln指令</em>：软链接也称为符号链接，类似于Windows里的快捷方式，主要存放了链接其他文件的路径（link） <ul><li>基本语法：<code>ln -s [原文件或目录] [软链接名]</code>（给原文件创建一个软链接）</li><li>当我们使用pwd指令查看目录时，仍然看到的是软链接所在目录</li><li>删除软链接：和删除文件一样（<code>rm 软链接名</code>）</li><li>创建软链接时最好使用绝对路径，否则会出现<em>符号连接的层数过多</em>等问题</li></ul></li><li><em>history指令</em>：查看已经执行过的历史命令，也可以执行历史命令 <ul><li>基本语法：<code>history</code>（查看执行过的历史命令）</li><li><code>history n</code>：查看最近执行的n条指令</li><li><code>!5</code>：执行曾经执行过的第5条指令</li></ul></li></ul><h4 id="_4-4-时间日期指令" tabindex="-1"><a class="header-anchor" href="#_4-4-时间日期指令" aria-hidden="true">#</a> 4.4. 时间日期指令</h4><ul><li>date指令：显示当前日期</li></ul><p><strong>显示日期</strong></p><ol><li><code>date</code>：显示当前时间</li><li><code>date +%Y</code>：显示当前年份</li><li><code>date +%m</code>：显示当前月份</li><li><code>date +%d</code>：显示当前是哪一天</li><li><code>date &quot;+%Y-%m-%d %H:%M:%S&quot;</code>：显示年月日时分秒</li></ol><p><strong>设置日期</strong></p><ul><li><code>date -s 字符串时间</code>：设置系统当前时间</li></ul><p><strong>cal指令</strong></p><ul><li>查看日历指令</li><li>基本语法：<code>cal [选项]</code>（不加选项，显示本月日历）</li><li><code>cal 2022</code>：显示2022年全年日历</li></ul><h4 id="_4-5-查找指令" tabindex="-1"><a class="header-anchor" href="#_4-5-查找指令" aria-hidden="true">#</a> 4.5. 查找指令</h4><p><strong>find指令</strong></p><ul><li><p>将从指定目录向下递归地遍历其各个子目录，将满足条件的文件或者目录显示在终端</p></li><li><p>基本语法：<code>find [搜索范围] [选项]</code></p></li><li><p><code>-name&lt;查询方式&gt;</code>：按照指定的文件名查找模式查找文件</p></li><li><p><code>-user&lt;用户名&gt;</code>：查找属于指定用户名所有文件</p></li><li><p><code>-size&lt;文件大小&gt;</code>：按照指定的文件大小查找文件（单位：k，M，G）</p></li><li><p>在home下查找hello.txt文件：<code>find /home -name hello.txt</code></p></li><li><p>查找整个Linux下大于200M的文件（+n大于，-n小于，n等于）：<code>find / -size +200M</code></p></li></ul><p><strong>locate指令</strong></p><ul><li><p>locate指令可以快速定位文件路径。locate指令利用事先建立的系统中所有文件名称及路径的locate数据库实现快速定位给定的文件。Locate指令无需遍历整个文件系统，查询速度较快。为了保证查询结果的准确度，管理员必须定期更新Locate时刻</p></li><li><p>基本语法：<code>locate 搜索文件</code></p></li><li><p>由于locate指令基于数据库进行查询，所以在第一次运行前，必须使用<code>updatedb</code>指令创建locate数据库</p></li></ul><p><strong>which指令</strong></p><ul><li>可以查看某个指令在哪个目录下，比如查看ls指令：<code>which ls</code></li></ul><p><strong>grep指令和管道指令|</strong></p><ul><li>grep过滤查找，管道符<code>|</code>，表示将前一个命令的处理结果输出传递给后面的命令处理</li><li>基本语法：<code>grep [选项] 查找内容 源文件</code><ul><li><code>-n</code>：显示匹配行及行号</li><li><code>-i</code>：忽略字母大小写</li></ul></li></ul><h4 id="_4-6-压缩和解压" tabindex="-1"><a class="header-anchor" href="#_4-6-压缩和解压" aria-hidden="true">#</a> 4.6. 压缩和解压</h4><p><strong>gzip/gunzip指令</strong></p><ul><li>gzip用于压缩文件，gunzip用于解压缩</li><li>基本语法 <ul><li><code>gzip 文件</code>：压缩文件，只能将文件压缩为*.gz文件</li><li><code>gunzip 文件.gz</code>：解压缩文件命令</li></ul></li></ul><p><strong>zip/unzip指令</strong></p><ul><li>zip用于压缩文件，unzip用于解压文件，这个在项目打包发布中很常用</li><li>基本语法 <ul><li><code>zip [选项] xxx.zip 将要压缩的内容</code>：压缩文件和目录的命令 <ul><li><code>-r</code>：递归压缩，即压缩目录</li></ul></li><li><code>unzip [选项] xxx.zip</code>：解压缩文件 <ul><li><code>-d 目录</code>：指定解压后文件的存放目录</li></ul></li></ul></li></ul><p><strong>tar指令</strong></p><ul><li>tar指令是打包指令，最后打包成的文件是.tar.gz的文件</li><li><code>tar [选项] xxx.tar.gz 打包的内容</code>：打包目录，压缩后的文件格式.tar.gz <ul><li><code>-c</code>：产生.tar打包文件</li><li><code>-v</code>：显示详细信息</li><li><code>-f</code>：指定压缩后的文件名</li><li><code>-z</code>：打包同时压缩</li><li><code>-x</code>：解包.tar文件</li></ul></li><li>案例 <ul><li>压缩多个文件：<code>tar -zcvf ab.tar.gz a.txt b.txt</code></li><li>压缩目录：<code>tar -zcvf home.tar.gz /home</code></li><li>解压到当前目录：<code>tar -zxvf ab.tar.gz</code></li><li>解压到指定目录：<code>tar -zxvf ab.tar.gz -C /root</code></li></ul></li></ul><blockquote><p>使用gzip压缩会删除源文件，使用其他两个指令进行压缩不会删除源文件</p></blockquote><h4 id="_4-7-组管理" tabindex="-1"><a class="header-anchor" href="#_4-7-组管理" aria-hidden="true">#</a> 4.7. 组管理</h4><blockquote><p>在Linux中的每个用户必须属于一个组，不能独立于组外。在Linux中每个文件有所有者、所在组、其他组的概念</p></blockquote><p><strong>文件/目录 所有者</strong></p><ul><li>一般为文件的创建者，谁创建了该文件，就自然的成为该文件的所有者</li><li>查看文件的所有者：<code>ls -ahl</code>（a全部，l详细信息，h将大小展示为以k为单位的数值）</li><li>修改文件的所有者：<code>chown 用户名 文件名</code></li><li>修改所有者和所在组：<code>chown newowner:newgroup 文件/目录</code></li><li><code>-R</code>：如果是目录，则使其下所有子文件或目录递归生效</li></ul><p><strong>文件/目录 所在组</strong></p><ul><li>当某个用户创建了一个文件后，这个文件的所在组就是该用户的所在组</li><li>查看文件/目录所在组：<code>ls -ahl</code></li><li>修改文件所在的组：<code>chgrp 组名 文件名</code></li><li><code>-R</code>：如果是目录，则使其下所有子文件或目录递归生效</li></ul><p><strong>其他组</strong></p><ul><li>除文件的所有者和所在组的用户外，系统的其他用户都是文件的其他组</li></ul><h4 id="_4-8-权限管理" tabindex="-1"><a class="header-anchor" href="#_4-8-权限管理" aria-hidden="true">#</a> 4.8. 权限管理</h4><ul><li>ls -alh显示内容如下：</li></ul><p><code>-rw-r--r--. 1 hellocode hellocode 0 11月 23 20:21 apple.txt</code></p><blockquote><p>在hellocode前的1含义</p><p>文件：硬连接数（ln）</p><p>目录：子目录数</p><p>11月前的0代表文件的大小（字节）</p><p>最后的日期代表最后修改的时间</p><p>第一个hellocode代表所属用户，第二个hellocode代表所属组</p></blockquote><p><strong>0-9位说明</strong></p><ol><li><p>第0位确定文件类型（d, -, l, c, b）</p><p>-是普通文件，相当于Windows的文件</p><p>l是链接，相当于Windows的快捷方式 d是目录，相当于Windows的文件夹 c是<em>字符设备</em>文件，鼠标，键盘 b是块设备，比如硬盘</p></li><li><p>第1-3位确定所有者（该文件的所有者）拥有该文件的权限 ---User</p></li><li><p>第4-6位确定所属组（同用户组的）拥有该文件的权限，---Group</p></li><li><p>第7-9位确定其他用户拥有该文件的权限 ---Other</p></li></ol><p><strong>权限详解</strong></p><p>rwx作用到文件</p><ol><li><code>r</code>代表可读（read）：可以读取，查看</li><li><code>w</code>代表可写（write）：可以修改，但是不代表可以删除该文件，删除一个文件的前提条件是对该文件所在目录有写权限，才能删除该文件</li><li><code>x</code>代表可执行（execute）：可以被执行</li></ol><p>rwx作用到目录</p><ol><li><code>r</code>代表可读（read）：可以读取，ls查看目录内容</li><li><code>w</code>代表可写（write）：可以修改，对目录内创建+删除+重命名目录</li><li><code>x</code>代表可执行（execute）：可以进入该目录，例如cd</li></ol><p><strong>修改权限</strong></p><ul><li>通过chmod指令，可以修改文件或者目录的权限</li></ul><p><em>第一种方式：+、-、=变更权限</em> u：所有者；g：所有组；o：其他人；a：所有人（u、g、o的总和）</p><ol><li>为文件/目录设置对应的权限：<code>chmod u=rwx,g=rx,o=x 文件/目录名</code></li><li>为文件/目录添加对应的权限：<code>chmod o+w 文件/目录名</code></li><li>为文件/目录移除对应的权限：<code>chmod a-x 文件/目录名</code></li></ol><p><em>第二种方式，通过数字变更权限</em></p><p>r=4 w=2 x=1 rwx=4+2+1=7</p><p><code>chmod u=rwx,g=rx,o=x 文件目录名</code></p><p>相当于<code>chmod 751</code></p><h3 id="_5、定时任务调度" tabindex="-1"><a class="header-anchor" href="#_5、定时任务调度" aria-hidden="true">#</a> 5、定时任务调度</h3><ul><li>任务调度：是指系统在某个时间执行的特定的命令或程序</li><li>任务调度分类 <ol><li>系统工作：有些重要的工作必须周而复始的执行，比如病毒扫描等</li><li>个别用户工作：个别用户可能希望执行某些程序，比如对mysql数据库的备份</li></ol></li></ul><h4 id="_5-1-crond定时任务" tabindex="-1"><a class="header-anchor" href="#_5-1-crond定时任务" aria-hidden="true">#</a> 5.1. crond定时任务</h4>',141),_=d("<li><p>crontab 进行 定时任务的设置</p></li><li><p>基本语法：<code>crontab [选项]</code></p></li><li><p>重启任务调度：<code>service crond restart</code></p></li><li><p>常用选项</p><ul><li><code>-e</code>：编辑crontab定时任务</li><li><code>-l</code>：查询crontab任务</li><li><code>-r</code>：删除当前用户所有的crontab任务（终止任务调度）</li></ul></li><li><p>快速入门</p><ul><li>设置任务调度文件：<code>/etc/crontab</code></li><li>设置个人任务调度，执行<code>crontab -e</code>命令</li><li>接着输入任务到调度文件 如<code>*/1 * * * * ls -l /etc/ &gt; /tmp/to.txt</code>命令 意思说每小时的每分钟执行<code>ls -l /etc/ &gt; /tmp/to.txt</code>命令</li></ul></li><li><p>参数细节说明</p><table><thead><tr><th>项目</th><th>含义</th><th>范围</th></tr></thead><tbody><tr><td>第一个 *</td><td>一小时当中的第几分钟</td><td>0-59</td></tr><tr><td>第二个 *</td><td>一天当中的第几小时</td><td>0-23</td></tr><tr><td>第三个 *</td><td>一个月当中的第几天</td><td>1-31</td></tr><tr><td>第四个 *</td><td>一年当中的第几月</td><td>1-12</td></tr><tr><td>第五个 *</td><td>一周当中的星期几</td><td>0-7（0和7都代表星期日）</td></tr></tbody></table><table><thead><tr><th>特殊符号</th><th>含义</th></tr></thead><tbody><tr><td><code>*</code></td><td>代表任何时间。比如第一个*就代表一小时中每分钟都执行一次的意思</td></tr><tr><td><code>,</code></td><td>代表不连续的时间。比如0 8,12,16 * * *命令，就代表在每天8点0分，12.0分，16.0分都执行一次</td></tr><tr><td><code>-</code></td><td>代表连续的时间范围。比如0 5 * * 1-6命令，代表在周一到周六的凌晨5.0分执行命令</td></tr><tr><td><code>*/n</code></td><td>代表每隔多久执行一次。比如*/10 * * * *命令，代表每隔10分钟就执行一次</td></tr></tbody></table></li><li><p>案例</p><table><thead><tr><th>时间</th><th>含义</th></tr></thead><tbody><tr><td><code>45 22 * * * 命令</code></td><td>在每天22:45执行命令</td></tr><tr><td><code>0 17 * * 1 命令</code></td><td>在每周一17:00执行命令</td></tr><tr><td><code>0 5 1,15 * * 命令</code></td><td>在每月1日和15日的5:00执行命令</td></tr><tr><td><code>40 4 * * 1-5命令</code></td><td>在每周一到周五的4:40执行命令</td></tr><tr><td><code>*/10 4 * * * 命令</code></td><td>每天凌晨4时，隔10分钟执行一次</td></tr><tr><td><code>0 0 1,15 * 1 命令</code></td><td>每月1号和15号，每周一00:00执行命令（星期和几号最好不要同时出现，因为定义的都是天，容易让管理员混乱）</td></tr></tbody></table></li>",7),w=e("p",null,"应用实例",-1),y=e("li",null,[e("p",null,[l("每个1分钟，就将当前的日期信息，追加到/tmp/mydate 文件中 "),e("code",null,"*/1 * * * * date >> /tmp/mydate")])],-1),q=e("p",null,"每个1分钟，将当前日期和日历都追加到/home/mycal 文件中",-1),L={href:"http://my.sh",target:"_blank",rel:"noopener noreferrer"},S=d(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">date</span> <span class="token operator">&gt;&gt;</span> /home/mycal
<span class="token function">cal</span> <span class="token operator">&gt;&gt;</span> /home/mycal
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),z=e("li",null,[e("p",null,[l("设置定时任务："),e("code",null,"*/1 * * * * /home/my.sh")])],-1),P=e("li",null,[e("p",null,[l("每天凌晨2:00 将mysql数据库 testdb，备份到文件中。 "),e("code",null,"0 2 * * * mysqldump -u root -p 123456 testdb >> /home/db.bak")])],-1),C=d(`<h4 id="_5-2-at定时任务" tabindex="-1"><a class="header-anchor" href="#_5-2-at定时任务" aria-hidden="true">#</a> 5.2. at定时任务</h4><ul><li><p>at命令是一次性定时计划任务，at的守护进程atd会以后台模式运行，检查作业队列来运行。</p></li><li><p>默认情况下，atd守护进程每60s检查作业队列，有作业时，会检查作业运行时间，如果时间与当前时间匹配，则运行此作业</p></li><li><p>at命令是一次性定时计划任务执行完一个任务后不再执行此任务了</p></li><li><p>在使用at命令的时候，一定要保证atd进程的启动，可以使用相关指令来查看 <code>ps -ef | grep atd</code></p></li><li><p>命令格式</p><ul><li><code>at [选项] [时间]</code></li><li>ctrl + D 结束at命令的输入</li></ul></li><li><p>命令选项</p><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-m</td><td>当指定的任务被执行完成后，将给用户发送邮件，即使没有标准输出</td></tr><tr><td>-I</td><td>atq的别名</td></tr><tr><td>-d</td><td>atrm的别名</td></tr><tr><td>-v</td><td>显示任务将被执行的时间</td></tr><tr><td>-c</td><td>打印任务的内容到标准输出</td></tr><tr><td>-V</td><td>显示版本信息</td></tr><tr><td>-q &lt;队列&gt;</td><td>使用指定的队列</td></tr><tr><td>-f &lt;文件&gt;</td><td>从指定文件读入任务而不是从标准输入读入</td></tr><tr><td>-t &lt;时间参数&gt;</td><td>以时间参数的形式提交要运行的任务</td></tr></tbody></table></li><li><p>时间定义</p><ol><li>接受在当天的hh:mm（小时:分钟）式的时间指定。假如该时间已过去，那么就放在第二天执行。例如：04:00</li><li>使用midnight（深夜），noon（中午），teatime（饮茶时间，一般是下午4点）等比较模糊的词语来指定时间</li><li>采用12小时计时制，即在时间后面加上AM（上午）或PM（下午）来说明是上午还是下午。例如：12pm</li><li>指定命令执行的具体日期，指定格式为month day（月 日）或mm/dd/yy（月/日/年）或dd.mm.yy（日.月.年），指定的日期必须跟在指定时间的后面。例如:04:00 2021-03-1</li><li>使用相对计时法。指定格式为:now + count time-units ,now就是当前时间，time-units是时间单位，这里能够是 minutes（分钟)、hours (小时)、days (天)、weeks（星期)。count是时间的数量，几天，几小时。例如: now + 5 minutes</li><li>直接使用 today (今天)、tomorrow (明天）来指定完成命令的时间。</li></ol></li><li><p>应用实例</p><ol><li><p>2天后的下午5点执行 <code>/bin/ls /home</code><code>at 5pm + 2days</code><code>/bin/ls /home</code> Ctrl + D（2次）</p></li><li><p>atq命令来查看系统中没有执行的工作任务</p></li><li><p>明天17点钟，输出时间到指定的文件内，比如：/root/date100.log <code>at 5pm tomorrow</code><code>date &gt; /root/date100.log</code> Ctrl + D（2次）</p></li><li><p>2分钟后，输出时间到指定文件内，比如 /root/date200.log <code>at now + 2 minutes</code><code>date &gt; /root/date200.log</code></p><p>Ctrl + D（2次）</p></li><li><p>删除已经设置的任务，<code>atrm 编号</code></p></li></ol></li></ul><h3 id="_6、磁盘分区、挂载" tabindex="-1"><a class="header-anchor" href="#_6、磁盘分区、挂载" aria-hidden="true">#</a> 6、磁盘分区、挂载</h3><ul><li>Linux来说无论有几个分区，分给哪一目录使用，它归根结底就只有一个根目录，一个独立且唯一的文件结构，Linux中每个分区都是用来组成整个文件系统的一部分</li><li>Linux采用了一种叫“载入”的处理方法，它的整个文件系统中包含了一整套的文件和目录，且将一个分区和一个目录联系起来，这时要载入的一个分区将使它的存储空间在一个目录下获得</li></ul><p><img src="http://images.hellocode.top/916eb47e51244fb893949f25134ba92c.png" alt="在这里插入图片描述" loading="lazy"></p><h4 id="_6-1-linux分区" tabindex="-1"><a class="header-anchor" href="#_6-1-linux分区" aria-hidden="true">#</a> 6.1. Linux分区</h4><p><strong>硬盘说明</strong></p><p><img src="http://images.hellocode.top/image-20221126203704953.png" alt="image-20221126203704953" loading="lazy"></p><ol><li>Linux硬盘分IDE硬盘和SCSI硬盘，目前基本上是SCSI硬盘</li><li>对于<em>IDE硬盘</em>，驱动器标识符为<code>hdx~</code>，其中<code>hd</code>表明分区所在设备的类型，这里是指IDE硬盘了。<code>x</code>为盘号（a为基本盘，b为基本从属盘，c为辅助主盘，d为辅助从属盘）,<code> ~</code>代表分区，前四个分区用数字1到4表示，它们是主分区或扩展分区，从5开始就是逻辑分区。例如，hda3 表示为第一个IDE硬盘上的第三个主分区或扩展分区，hdb2 表示为第二个IDE硬盘上的第二个主分区或扩展分区</li><li>对于<em>SCSI硬盘</em>则标识为 <code>sdx~</code>，SCSI硬盘是用 <code>sd</code>来表示分区所在设备的类型的，其余则和IDE硬盘的表示方法一样</li></ol><p><strong>磁盘情况查询</strong></p><ul><li>基本语法：<code>df -h</code></li></ul><p><em>查询指定目录的磁盘占用情况</em></p><p><img src="http://images.hellocode.top/image-20221126212153964.png" alt="image-20221126212153964" loading="lazy"></p><ul><li>基本语法：<code>du -h /目录</code>（查询指定目录的磁盘占用情况，默认为当前目录）</li><li><code>-s</code>：指定目录占用大小汇总</li><li><code>-h</code>：带计量单位</li><li><code>-a</code>：含文件</li><li><code>--max-depth=1</code>：子目录深度</li><li><code>-c</code>：列出明细的同时，增加汇总量</li></ul><blockquote><p>查询 /opt 目录的磁盘占用情况，深度为1：<code>du -h --max-depth=1 /opt</code></p></blockquote><p><strong>工作实用指令</strong></p><ol><li>统计 /opt 文件夹下文件的个数：<code>ls -l /opt | grep &quot;^-&quot; | wc -l</code></li><li>统计 /opt 文件夹下目录的个数：<code>ls -l /opt | grep &quot;^d&quot; | wc -l</code></li><li>统计 /opt 文件夹下文件的个数，包括子文件夹里的：<code>ls -lR /opt | grep &quot;^-&quot; | wc -l</code></li><li>统计 /opt 文件夹下目录的个数，包括子文件夹里的：<code>ls -lR /opt | grep &quot;^d&quot; | wc -l</code></li><li>以树状显示目录结构：<code>tree /opt</code><ul><li>如果没有tree指令，需要先安装</li><li><code>yum install tree</code></li></ul></li></ol><h4 id="_6-2-挂载" tabindex="-1"><a class="header-anchor" href="#_6-2-挂载" aria-hidden="true">#</a> 6.2. 挂载</h4><p><strong>查看所有设备挂载情况</strong></p><ul><li>命令：<code>lsblk</code>或<code>lsblk -f</code></li></ul><p><img src="http://images.hellocode.top/image-20221126204651331.png" alt="image-20221126204651331" loading="lazy"></p><p><strong>经典案例</strong></p><blockquote><p>这里以增加一块硬盘为例来熟悉磁盘的相关指令和深入理解磁盘分区、挂载、卸载的概念</p></blockquote><p><em>如何增加一块硬盘</em></p><ol><li><p>虚拟机添加硬盘 设置——添加——硬盘（添加后需要重启系统才能识别） 重启后可以通过<code>lsblk</code>指令来查看</p></li><li><p>分区</p><ul><li>分区命令：<code>fdisk /dev/sdb</code></li><li><code>m</code>：显示命令列表</li><li><code>p</code>：显示磁盘分区，同<code>fdisk -l</code></li><li><code>n</code>：新增分区</li><li><code>d</code>：删除分区</li><li><code>w</code>：写入并退出</li></ul><blockquote><p>开始分区后输入n，新增分区，然后选择p，分区类型为主分区。两次回车默认剩余全部空间。最后输入w写入分区并退出，若不保存退出输入q。</p></blockquote><p><img src="http://images.hellocode.top/image-20221126210248362.png" alt="image-20221126210248362" loading="lazy"></p></li><li><p>格式化（给分区指定文件系统）</p><ul><li>格式化磁盘分区命令：<code>mkfs -t ext4 /dev/sdb1</code>（ext4是分区类型）</li></ul></li><li><p>挂载（将一个分区与一个目录联系起来）</p><ul><li>挂载：<code>mount 设备名称 挂载目录</code><ul><li><code>mount /dev/sdb1 /newdisk</code></li></ul></li><li>卸载：<code>umount 设备名称 或者 挂载目录</code><ul><li><code>umount /dev/sdb1</code>或者<code>umount /newdisk</code></li></ul></li></ul><blockquote><p>注意：用命令行挂载重启后会失效</p></blockquote></li><li><p>设置可以自动挂载（永久挂载）</p><ul><li>通过修改<code>/etc/fstab</code>实现挂载（除了UUID指定，也可以按照下图方式指定）</li><li>添加完成后，执行<code>mount -a</code>即刻生效</li></ul><p><img src="http://images.hellocode.top/image-20221126211407576.png" alt="image-20221126211407576" loading="lazy"></p></li></ol><h3 id="_7、网络配置" tabindex="-1"><a class="header-anchor" href="#_7、网络配置" aria-hidden="true">#</a> 7、网络配置</h3><p><img src="http://images.hellocode.top/2441202-20220301072722870-1945298592.png" alt="img" loading="lazy"></p><ul><li>windows查看网络配置：<code>ipconfig</code></li><li>Linux查看网络配置：<code>ifconfig</code></li><li>ping测试主机之间网络连通性：<code>ping 目的主机</code>（测试当前服务器是否可以连接目的主机）</li></ul><p><strong>Linux网络环境配置</strong></p><p><em>自动获取</em></p><ul><li><p>登陆后，通过界面来设置自动获取ip</p></li><li><p>特点：Linux启动后会自动获取ip，缺点是每次自动获取的ip可能不一样</p></li></ul><p><em>指定ip</em></p><ul><li><p>直接修改配置文件来指定ip，并可以连接到外网（程序员推荐）</p></li><li><p>编辑 <code>vi /etc/sysconfig/network-scripts/ifcfg-ens33</code></p></li><li><p>要求：将ip地址配置成静态的，例如：192.168.36.128</p></li><li><p>ifcfg-ens33 文件说明</p></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">DEVICE</span><span class="token operator">=</span>eth0　　　　　　　　　　<span class="token comment">#接口名(设备，网卡)</span>
HWADDR <span class="token operator">=</span>00:0C:2x:6x:0x:xx 　　 <span class="token comment">#MAC 地址</span>
<span class="token assign-left variable">TYPE</span><span class="token operator">=</span>Ethernet　　　　　　　　　 <span class="token comment">#网络类型(通常是Ethemet)</span>
<span class="token assign-left variable">UUID</span><span class="token operator">=</span>926a57ba-92c6-4231 -bacb-f27e5e6a9f44 　　<span class="token comment">#随机 id</span>
<span class="token comment">#系统启动的时候网络接口是否有效 (yes/no)</span>
ONBOOT　　<span class="token function">yes</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>配置静态ip方法</em></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># IP的配置方法 [none|static|bootp|dhcp] (引导时不使用协议|静态分配IP|BOOTP 协议|DHCP协议)</span>
<span class="token comment"># 添加下方内容</span>
<span class="token assign-left variable">BOOTPROTO</span><span class="token operator">=</span>static
<span class="token comment">#IP地址</span>
<span class="token assign-left variable">IPADDR</span><span class="token operator">=</span><span class="token number">192.168</span>.36.128
<span class="token comment">#网关</span>
<span class="token assign-left variable">GATEWAY</span><span class="token operator">=</span><span class="token number">192.168</span>.36.2
<span class="token comment">#域名解析器</span>
<span class="token assign-left variable">DNS1</span><span class="token operator">=</span><span class="token number">192.168</span>.36.2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>配置完还需要修改vm的虚拟网络配置</p></blockquote><ul><li>重启网络服务或者重启系统生效：<code>service network restart</code>或者<code>reboot</code></li></ul><p><strong>设置主机名和hosts映射</strong></p><p><em>设置主机名</em></p><ol><li>为了方便记忆，可以给Linux系统设置主机名，也可以根据需要修改主机名</li><li>指令：<code>hostname</code>（查看主机名）</li><li>修改文件在 /etc/hostname 指定</li><li>修改后，重启生效</li></ol><p><em>设置host映射</em></p><p>如何通过主机名找到（例如ping）某个Linux系统</p><ul><li>Windows 在 C:\\Windows\\System32\\drivers\\etc\\hosts 文件指定即可 例如：192.168.36.128 HelloCode</li><li>Linux 在 /etc/hosts 文件指定 例如：192.168.36.1 LAPTOP-R0ND1VG7</li></ul><p><strong>主机名解析过程分析</strong></p><ul><li>Hosts 一个文本文件，用来记录IP和hostname（主机名）的映射关系</li><li>DNS <ol><li>DNS，就是Domain Name System的缩写，翻译过来就是域名系统</li><li>是互联网上作为域名和IP地址相互映射的一个分布式数据库</li></ol></li></ul>`,46),I={href:"http://xn--www-0h9d84k6vjnlbc95cl0w63rs15crso.baidu.com",target:"_blank",rel:"noopener noreferrer"},D=d(`<ol><li>浏览器先检查浏览器缓存中有没有该域名解析IP地址，有就先调用 这个IP完成解析;如果没有,则检查DNS解析器缓存，如果有直接返回iP完成解析。 这两个缓存，可以理解为本地解析器缓存</li><li>一般来说，当电脑第一次成功访问某一网站后，在一定时间内，浏览器或操作系统会缓存他的IP地址(DNS解析记录). <code>ipconfig /displaydns</code> //DNS域名解析缓存 <code>ipconfig /flushdns</code> //手动清理dns缓存 <img src="http://images.hellocode.top/e623e9e1f4524b738f037e1ee4de6ce6.png" alt="在这里插入图片描述" loading="lazy"></li><li>如果本地解析器缓存没有找到对应映射，检查系统中hosts文件中 有没有配置对应的域名IP映射，如果有，则完成解析并返回。</li><li>如果 本地DNS解析器缓存 和 hosts文件中均没有找到对应的IP则到域名服务DNS进行解析域</li></ol><p><img src="http://images.hellocode.top/f115896eb23c45efa973ed6bcd86c0fe.png" alt="在这里插入图片描述" loading="lazy"></p><h3 id="_8、进程管理" tabindex="-1"><a class="header-anchor" href="#_8、进程管理" aria-hidden="true">#</a> 8、进程管理</h3><ul><li>在Linux中，每个<em>执行的程序</em>都称为一个进程。每一个进程都分配一个id号（pid：进程号）</li><li>每个进程都可能以两种方式存在的。<em>前台</em>与<em>后台</em>，所谓前台进程就是用户目前的屏幕上可以进行操作的。后台进程则是实际在操作，但由于屏幕上无法看到的进程，通常使用后台方式执行</li><li>一般系统的服务都是以后台进程的方式存在，而且都会常驻在系统中。直到关机才结束</li></ul><h4 id="_8-1-显示系统执行的进程" tabindex="-1"><a class="header-anchor" href="#_8-1-显示系统执行的进程" aria-hidden="true">#</a> 8.1. 显示系统执行的进程</h4><ul><li>ps命令是用来查看目前系统中，有哪些正在执行，以及它们的执行状况。可以不加任何参数</li></ul><p><strong>命令</strong></p><ul><li><code>ps -a</code>：显示当前终端的所有进程信息</li><li><code>ps -u</code>：以用户的格式显示进程信息</li><li><code>ps -x</code>：正在执行的命令或进程名</li></ul><p><strong>说明</strong></p><ul><li><em>PID</em>：进程识别号</li><li><em>TTY</em>：终端机号</li><li><em>TIME</em>：此进程所消CPU时间</li><li><em>CMD</em>：正在执行的命令或进程名</li><li><em>%CPU</em>：占用CPU的百分比</li><li><em>%MEM</em>：占用物理内存的百分比</li><li><em>STAT</em>：运行状态（s表示休眠，r运行状态，Z僵死进程）</li></ul><h4 id="_8-2-父子进程" tabindex="-1"><a class="header-anchor" href="#_8-2-父子进程" aria-hidden="true">#</a> 8.2. 父子进程</h4><blockquote><p>要求：以全格式显示当前所有的进程，查看进程的<em>父进程</em></p></blockquote><ul><li><code>ps -ef</code>：以全格式显示当前所有的进程 <ul><li><code>-e</code>：显示所有进程</li><li><code>-f</code>：全格式</li></ul></li><li>参数说明 <ul><li>C：CPU用于计算执行优先级的因子。数值越大，表明进程是CPU密集型运算，执行优先级会降低；数值越小，表明进程是I/O密集型运算，执行优先级会提高</li><li>STIME：进程启动的时间</li><li>TTY：完整的终端名称</li><li>CMD：启动进程所用的命令和参数</li></ul></li></ul><h4 id="_8-3-终止进程" tabindex="-1"><a class="header-anchor" href="#_8-3-终止进程" aria-hidden="true">#</a> 8.3. 终止进程</h4><ul><li>若是某个进程执行一半需要停止时，或是已消了很大的系统资源时，此时可以考虑停止该进程。使用<code>kill</code>命令来完成此项任务</li><li>基本语法 <ul><li><code>kill [选项] 进程号</code>：通过进程号杀死/终止进程</li><li><code>killall 进程名称</code>：通过进程名称杀死进程（也会终止子进程），也支持通配符，这在系统因负载过大而变得很慢时很有用</li></ul></li><li>常用选项 <ul><li><code>-9</code>：表示强迫进程立刻停止</li><li><code>-u 用户名</code>：杀死这个用户中的所有进程</li></ul></li><li>案例 <ul><li>踢掉某个非法登录的用户 <code>ps -aux | grep sshd</code>查询对应用户登录时的进程号 <code>kill 对应的进程号</code>踢掉对应的非法用户</li><li>终止远程登陆服务sshd，在适当时候再次重启sshd服务(远程sshd，本地终端bash) <code>kill sshd对应的进程号</code><code>/bin/systemctl start sshd.service</code>：重启sshd</li></ul></li></ul><h4 id="_8-4-查看进程树" tabindex="-1"><a class="header-anchor" href="#_8-4-查看进程树" aria-hidden="true">#</a> 8.4. 查看进程树</h4><ul><li>基本语法：<code>pstree [选项]</code>（可以更加直观的来看进程信息）</li><li>常用选项 <ul><li><code>-p</code>：显示进程的pid</li><li><code>-u</code>：显示进程的所属用户</li></ul></li></ul><h4 id="_8-5-服务管理" tabindex="-1"><a class="header-anchor" href="#_8-5-服务管理" aria-hidden="true">#</a> 8.5. 服务管理</h4><blockquote><p>服务（service）本质就是进程，但是是运行在后台的，通常都会监听某个端口，等待其他程序的请求，比如（mysqld，sshd 防火墙等），因此我们又称为守护进程，是Linux中非常重要的知识点</p></blockquote><p><strong>service管理指令</strong></p><ul><li><code>service 服务名 [start | stop | restart | reload | status]</code></li><li>在CentOS7.0后 很多服务不再使用 service，而是 systemctl</li><li>service 指令管理的服务在 /etc/init.d 查看</li><li>查看服务名 <ul><li>方式一：使用setup -&gt; 系统服务，就可以看到全部（<code>setup</code>）</li><li>方式二：/etc/init.d 能看到service 指令管理的服务（<code>ls -l /etc/init.d</code>）</li></ul></li></ul><p><strong>服务的运行级别</strong></p><p><em>Linux系统有7种运行级别（runlevel）</em>：常用的是级别3和级别5</p><ul><li>运行级别0：系统停机状态，系统默认运行级别不能设为0，否则不能正常启动</li><li>运行级别1：单用户工作状态，root权限，用于系统维护，禁止远程登陆</li><li>运行级别2：多用户状态（没有NFS），不支持网络</li><li>运行级别3：完全的多用户状态（有NFS），登陆后进入控制台命令行模式</li><li>运行级别4：系统未使用，保留</li><li>运行级别5：X11控制台，登陆后进入图形GUI模式</li><li>运行级别6：系统正常关闭并重启，默认运行级别不能设为6，否则不能正常启动</li></ul><p><strong>chkconfig指令</strong></p><p><em>介绍</em></p><ul><li>通过chkconfig 命令可以给服务的各个运行级别设置 自启动/关闭</li><li>chkconfig 指令管理的服务在/etc/init.d 查看</li><li>注意：CentOS7.0 后，很多服务使用 systemctl 管理</li></ul><p><em>基本语法</em></p><ul><li>查看服务：<code>chkconfig --list [| grep xxx]</code></li><li><code>chkconfig 服务名 --list</code></li><li><code>chkconfig --level 5 服务名 on/off</code></li></ul><blockquote><p>chkconfig 重新设置服务后自启动或关闭，需要重启机器reboot生效</p></blockquote><p><strong>systemctl管理指令</strong></p><ul><li>基本语法：<code>systemctl [start | stop | restart | status] 服务名</code></li><li>systemctl指令管理的服务在 /usr/lib/systemd/system 查看</li></ul><p><em>设置服务的自启动状态</em></p><ul><li><code>systemctl list-unit-files [| grep 服务名]</code>：查看服务开机启动状态，grep可以进行过滤</li><li><code>systemctl enable 服务名</code>：设置服务开机启动</li><li><code>systemctl disable 服务名</code>：关闭服务开机启动</li><li><code>systemctl is-enabled 服务名</code>：查询某个服务是否是自启动的</li></ul><p><em>细节讨论</em></p><ul><li>关闭或者启用防火墙后，立即生效。（<code>telnet 测试 某个端口即可</code>）</li><li>这种方式只是临时生效，当重启系统后，还是回归到以前对服务的设置</li><li>如果希望设置某个服务自启动或关闭永久生效，要使用 \`systemctl [enable | disable] 服务名</li></ul><p><strong>防火墙</strong></p><blockquote><p>在真正的生产环境中，往往需要将防火墙打开，但是问题来了，如果我们把防火墙打开，那么外部请求数据包就不能跟服务器监听端口通讯。这是，需要打开指定的端口。比如80、22、8080等。</p></blockquote><ul><li>打开端口：<code>firewall-cmd --permanent --add-port=端口号/协议</code></li><li>关闭端口：<code>firewall-cmd --permanent --remove-port=端口号/协议</code></li><li>重新载入，才能生效：<code>firewall-cmd --reload</code></li><li>查询端口是否开放：<code>firewall-cmd --query-port=端口/协议</code></li></ul><blockquote><p>查看对应端口的协议号：<code>netstat -anp | more</code></p></blockquote><h4 id="_8-6-动态监控" tabindex="-1"><a class="header-anchor" href="#_8-6-动态监控" aria-hidden="true">#</a> 8.6. 动态监控</h4><blockquote><p><code>top</code>与<code>ps</code>命令很相似。他们都用来显示正在执行的进程。Top 与 ps最大的不同之处，在于 top在执行一段时间可以更新正在运行的进程</p></blockquote><p><code>top [选项]</code></p><ul><li><code>-d 秒数</code>：指定top命令每隔几秒更新。默认3秒</li><li><code>-i</code>：使top不显示任何闲置或者僵死进程</li><li><code>-p</code>：通过指定监控进程id来仅仅监控某个进程的状态</li></ul><p><strong>交互操作说明</strong></p><blockquote><p>在top命令输入后，进入监控面板，输入下方指令进行交互（大小写敏感 ）</p></blockquote><table><thead><tr><th>操作</th><th>功能</th></tr></thead><tbody><tr><td>P</td><td>以CPU使用率排序【默认】</td></tr><tr><td>M</td><td>以内存的使用率排序</td></tr><tr><td>N</td><td>以PID排序</td></tr><tr><td>q</td><td>退出top</td></tr><tr><td>u</td><td>监控指定用户</td></tr><tr><td>k</td><td>终止指定用户</td></tr></tbody></table><h4 id="_8-7-监控网络状态" tabindex="-1"><a class="header-anchor" href="#_8-7-监控网络状态" aria-hidden="true">#</a> 8.7. 监控网络状态</h4><p><code>netstat [选项]</code></p><ul><li><code>-an</code>：按一定顺序排列输出</li><li><code>-p</code>：显示哪个进程在调用</li></ul><h3 id="_9、rpm和yum" tabindex="-1"><a class="header-anchor" href="#_9、rpm和yum" aria-hidden="true">#</a> 9、RPM和YUM</h3><h4 id="_9-1-rpm" tabindex="-1"><a class="header-anchor" href="#_9-1-rpm" aria-hidden="true">#</a> 9.1. RPM</h4><blockquote><p>rpm用于互联网下载包的打包及安装工具，它包含在某些Linux分发版中。它生成具有.RPM扩展名的文件。RPM是RedHat Package Manager（RedHat软件包管理工具）的缩写，类似windows的setup.exe，这一文件格式虽然搭上了RedHat的标志，但理念是通用的</p></blockquote><p>Linux的分发版本都有采用（suse，redhat，centos等），可以算是公认的行业标准了</p><p><strong>rpm包名基本格式</strong></p><p>一个rpm包名：firefox-60.2.2-1.el7.centos.x86_64</p><ul><li><p>名称：firefox</p></li><li><p>版本号：60.2.2-1</p></li><li><p>适用操作系统：el7.centos.x86_64（表示centos7.x的64位系统，如果是i686、i386表示32位系统，noarch表示通用）</p></li></ul><p><strong>rpm包的查询指令</strong></p><ul><li><p>查询所有安装的rpm包：<code>rpm -qa</code></p><p>查询已安装的rpm列表：<code>rpm -qa | grep xx</code></p></li><li><p>查询软件包是否安装：<code>rpm -q 软件包名</code></p></li><li><p>查询软件包信息：<code>rpm -qi 软件包名</code></p></li><li><p>查询软件包中的文件：<code>rpm -ql 软件包名</code></p></li><li><p>查询文件所属的软件包：<code>rpm -qf 文件全路径名</code></p></li></ul><p><strong>卸载rpm包</strong></p><ul><li><code>rpm -e RPM包的名称</code>（erase：擦除）</li><li>如果其他软件包依赖于你要卸载的软件包，卸载时会产生错误信息</li></ul><blockquote><p>如果要删除foo这个rpm包，可以增加参数<code>--nodeps</code>，就可以强制删除，但是一般不推荐，可能会导致依赖于该软件包的程序无法运行</p></blockquote><p><strong>安装rpm包</strong></p><p><code>rpm -ivh RPM包全路径名称</code></p><ul><li><code>i</code>（install）：安装</li><li><code>v</code>（verbose）：提示</li><li><code>h</code>（hash）：进度条</li></ul><h4 id="_9-2-yum" tabindex="-1"><a class="header-anchor" href="#_9-2-yum" aria-hidden="true">#</a> 9.2. Yum</h4><blockquote><p>Yum是一个Shell前端软件包管理器。基于RPM包管理，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软件包</p></blockquote><p><strong>基本指令</strong></p><ul><li>查询yum服务器是否有需要安装的软件：<code>yum list | grep xx软件列表</code></li><li>安装指定的yum包：<code>yum install xxx</code></li></ul><h2 id="三、高级篇" tabindex="-1"><a class="header-anchor" href="#三、高级篇" aria-hidden="true">#</a> 三、高级篇</h2><h3 id="_1、shell编程" tabindex="-1"><a class="header-anchor" href="#_1、shell编程" aria-hidden="true">#</a> 1、Shell编程</h3><blockquote><p>Shell是一个命令行解释器，它为用户提供了一个向Linux内核发送请求以便运行程序的界面系统级程序，用户可以用Shell来启动、挂起、停止甚至是编写一些程序</p></blockquote><ul><li>Linux运维工程师在进行服务器集群管理时，需要编写Shell程序来进行服务器管理</li><li>对于JavaEE和python程序员来说，工作的需要，可能需要编写一些Shell脚本来进行程序或者服务器的维护，比如定时备份数据库</li></ul><h4 id="_1-1-执行方式" tabindex="-1"><a class="header-anchor" href="#_1-1-执行方式" aria-hidden="true">#</a> 1.1. 执行方式</h4><p><strong>脚本格式要求</strong></p><ol><li>脚本以<code>#!/bin/bash</code>开头</li><li>脚本需要有可执行权限</li></ol><p><strong>常用的执行方式</strong></p><ol><li>输入脚本的绝对路径或者相对路径</li><li>sh+脚本（没有执行权限也能执行）</li></ol><p><strong>注释</strong></p><ul><li>单行：<code>#内容</code></li><li>多行：<code>:&lt;&lt;! 内容 !</code></li></ul><h4 id="_1-2-变量" tabindex="-1"><a class="header-anchor" href="#_1-2-变量" aria-hidden="true">#</a> 1.2. 变量</h4><blockquote><p>Linux Shell中的变量分为，系统变量和用户自定义变量</p></blockquote><ul><li><p>系统变量：<code>$HOME</code>、<code>$PWD</code>、<code>$SHELL</code>、<code>$USER</code>等等</p></li><li><p>显示当前shell中的所有变量：<code>set</code></p></li></ul><h5 id="_1-2-1-变量的基本使用" tabindex="-1"><a class="header-anchor" href="#_1-2-1-变量的基本使用" aria-hidden="true">#</a> 1.2.1 变量的基本使用</h5><ul><li><p>定义变量：<code>变量名=值</code>（等号两侧不能有空格）</p></li><li><p>输出变量：<code>$变量名</code></p></li><li><p>撤销变量：<code>unset 变量值</code></p></li><li><p>声明静态变量：<code>readonly 变量名</code>（不能unset）</p></li><li><p>将命令的返回值赋给一个变量</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#方式一：</span>
<span class="token assign-left variable">A</span><span class="token operator">=</span><span class="token variable"><span class="token variable">\`</span><span class="token function">date</span><span class="token variable">\`</span></span>
<span class="token comment">#方式二：</span>
<span class="token assign-left variable">A</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">date</span><span class="token variable">)</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><blockquote><p>使用变量时，用单引号的时候<code>$</code>会原样输出，不用引号或者使用双引号会将<code>$变量名</code>替换为对应的变量</p></blockquote><p><strong>变量规则</strong></p><ol><li>变量名称可以由字母、数字、下划线组成，但是不能以数字开头。</li><li>等号两侧不能有空格</li><li>变量名称一般习惯为大写，这是一个规范</li></ol><h5 id="_1-2-2-设置环境变量" tabindex="-1"><a class="header-anchor" href="#_1-2-2-设置环境变量" aria-hidden="true">#</a> 1.2.2 设置环境变量</h5><blockquote><p>环境变量操作的文件为：<code>/etc/profile</code></p></blockquote><ul><li>将Shell变量输出为环境变量/全局变量：<code>export 变量名=变量值</code></li><li>让修改后的配置信息立即生效：<code>source 配置文件</code></li><li>查询环境变量的值：<code>echo $变量名</code></li></ul><h5 id="_1-2-3-位置参数变量" tabindex="-1"><a class="header-anchor" href="#_1-2-3-位置参数变量" aria-hidden="true">#</a> 1.2.3 位置参数变量</h5><p>当我们执行一个shell脚本时，如果希望获取到命令行的参数信息，就可以使用到位置变量</p><p>比如：<code>./myshell.sh 100 200</code>，这个就是一个执行shell的命令行，可以在myshell脚本中获取到参数信息</p><p><em>基本语法</em></p>`,95),M=e("ul",null,[e("li",null,[e("code",null,"$n"),l("：n为数字，$0代表命令本身，$1-"),e("span",{class:"katex"},[e("span",{class:"katex-mathml"},[e("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[e("semantics",null,[e("mrow",null,[e("mn",null,"9"),e("mtext",null,"代表第一到第九个参数，十以上的参数需要用大括号包含，如"),e("mi",{mathvariant:"normal"},"‘")]),e("annotation",{encoding:"application/x-tex"},"9代表第一到第九个参数，十以上的参数需要用大括号包含，如`")])])]),e("span",{class:"katex-html","aria-hidden":"true"},[e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.6944em"}}),e("span",{class:"mord"},"9"),e("span",{class:"mord cjk_fallback"},"代表第一到第九个参数，十以上的参数需要用大括号包含，如"),e("span",{class:"mord"},"‘")])])]),l("{10}`")]),e("li",null,[e("code",null,"$*"),l("：这个变量代表命令行中所有的参数，"),e("code",null,"$*"),l("把所有的参数看成是一个整体")]),e("li",null,[e("code",null,"$@"),l("：这个变量也代表命令行中所有的参数，不过"),e("code",null,"$@"),l("把每个参数区分对待")]),e("li",null,[e("code",null,"$#"),l("：这个变量代表命令行中所有参数的个数")])],-1),E=d(`<h5 id="_1-2-4-预定义变量" tabindex="-1"><a class="header-anchor" href="#_1-2-4-预定义变量" aria-hidden="true">#</a> 1.2.4 预定义变量</h5><blockquote><p>就是Shell设计者事先已经定义好的变量，可以直接在shell脚本中使用（这部分了解即可）</p></blockquote><ul><li><code>$$</code>：当前进程的进程号（pid）</li><li><code>$!</code>：后台运行的最后一个进程的进程号（pid）</li><li><code>$?</code>：最后一次执行的命令的返回状态。如果这个变量的值为0，证明上一个命令正确执行；如果这个变量的值为非0（具体是哪个数，由命令自己决定），则证明上一个命令执行不正确了</li></ul><blockquote><p>以后台方式执行一个指令<code>./test.sh &amp;</code>，就是命令末尾加上<code>&amp;</code></p></blockquote><h4 id="_1-3-运算符" tabindex="-1"><a class="header-anchor" href="#_1-3-运算符" aria-hidden="true">#</a> 1.3. 运算符</h4><ul><li><code>$((运算式))</code>或<code>$[运算式]</code>或者<code>expr m + n</code>（expression）</li><li>注意expr运算符间要有空格（不加空格就是拼接），希望将结果赋给某个变量需要用到反引号</li><li><code>expr m - n</code></li><li><code>expr \\*,/,%</code>：乘、除、取余（乘法前面有一个<code>\\</code>）</li><li>推荐使用<code>$[运算式]</code></li></ul><h4 id="_1-4-条件判断" tabindex="-1"><a class="header-anchor" href="#_1-4-条件判断" aria-hidden="true">#</a> 1.4. 条件判断</h4><p><code>[ condition ]</code></p><blockquote><p>注意：condition前后要有空格</p></blockquote><ul><li>非空返回true</li><li>可以使用<code>$?</code>验证（0为true，&gt;1为false）</li></ul><p><strong>范例</strong></p><ul><li><code>[ HelloCode ]</code>：返回true</li><li><code>[]</code>：返回false</li><li><code>[ condition ] &amp;&amp; echo OK || echo notok</code>：条件满足，执行后面的语句</li></ul><p><strong>常用判断条件</strong></p><ul><li>字符串比较：<code>=</code></li><li>两个整数比较 <ul><li><code>-lt</code>小于；<code>-le</code>小于等于</li><li><code>-eq</code>等于</li><li><code>-gt</code>大于；<code>-ge</code>大于等于</li><li><code>-ne</code>不等于</li></ul></li><li>按照文件权限进行判断 <ul><li><code>-r</code>：有读的权限</li><li><code>-w</code>：有写的权限</li><li><code>-x</code>：有执行的权限</li></ul></li><li>按照文件类型进行判断 <ul><li><code>-f</code>：文件存在并且是一个常规的文件</li><li><code>-e</code>：文件存在</li><li><code>-d</code>：文件存在并且是一个目录</li></ul></li></ul><div class="language-shll line-numbers-mode" data-ext="shll"><pre class="language-shll"><code>if [ -f /root/aaa.txt]
then
	echo &quot;存在&quot;
fi
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-5-流程控制" tabindex="-1"><a class="header-anchor" href="#_1-5-流程控制" aria-hidden="true">#</a> 1.5. 流程控制</h4><p><strong>if判断</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token keyword">if</span> <span class="token punctuation">[</span> 条件判断式 <span class="token punctuation">]</span>
<span class="token keyword">then</span>
	代码
<span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token keyword">if</span> <span class="token punctuation">[</span> 条件判断式 <span class="token punctuation">]</span>
<span class="token keyword">then</span>
	代码
<span class="token keyword">elif</span> <span class="token punctuation">[</span> 条件判断式 <span class="token punctuation">]</span>
<span class="token keyword">then</span>
	代码
<span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：条件判断式与中括号之间必须有空格</p></blockquote><p><strong>case语句</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token keyword">case</span> $变量名 <span class="token keyword">in</span>
<span class="token string">&quot;值1&quot;</span><span class="token punctuation">)</span>
代码1
<span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token string">&quot;值2&quot;</span><span class="token punctuation">)</span>
代码2
<span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token punctuation">..</span>.省略其他分支<span class="token punctuation">..</span>.
*<span class="token punctuation">)</span>
都不匹配执行的代码
<span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">esac</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-6-循环" tabindex="-1"><a class="header-anchor" href="#_1-6-循环" aria-hidden="true">#</a> 1.6. 循环</h4><p><strong>for循环</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token keyword">for</span> 变量 <span class="token keyword">in</span> 值1 值2 值3<span class="token punctuation">..</span>.
<span class="token keyword">do</span>
代码
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token keyword">for</span><span class="token variable"><span class="token punctuation">((</span> 初始值<span class="token punctuation">;</span> 循环控制条件<span class="token punctuation">;</span> 变量变化 <span class="token punctuation">))</span></span>
<span class="token keyword">do</span>
代码
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>while循环</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token keyword">while</span> <span class="token punctuation">[</span> 条件判断式 <span class="token punctuation">]</span>
<span class="token keyword">do</span>
代码
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-7-获取输入" tabindex="-1"><a class="header-anchor" href="#_1-7-获取输入" aria-hidden="true">#</a> 1.7. 获取输入</h4><p><code>read(选项)(参数)</code></p><p><strong>选项</strong></p><ul><li><code>-p</code>：指定读取值时的提示符</li><li><code>-t</code>：指定读取值时等待的时间（秒），如果没有在指定的时间内输入，就不再等待了</li></ul><p><strong>参数</strong></p><ul><li>变量：指定读取值的变量名</li></ul><h4 id="_1-8-函数" tabindex="-1"><a class="header-anchor" href="#_1-8-函数" aria-hidden="true">#</a> 1.8. 函数</h4><blockquote><p>Shell编程和其他编程语言一样，有系统函数，也可以自定义函数</p></blockquote><h5 id="_1-8-1-系统函数" tabindex="-1"><a class="header-anchor" href="#_1-8-1-系统函数" aria-hidden="true">#</a> 1.8.1 系统函数</h5><p><strong>basename</strong></p><ul><li>功能：返回完整路径最后/的部分，常用于获取文件名</li><li><code>basename [pathname] [suffix]</code>：basename命令会删掉所有的前缀包括最后一个<code>/</code>字符，然后将字符串显示出来</li><li>选项 <ul><li><code>suffix</code>为后缀，如果suffix被指定了，basename会将pathname或string中的suffix去掉</li></ul></li></ul><p><strong>dirname</strong></p><ul><li>功能：返回完整路径最后/的前面的部分，常用于返回路径部分</li><li><code>dirname 文件绝对路径</code>：从给定的包含绝对路径的文件名中去除文件名（非目录的部分），然后返回剩下的路径（目录的部分）</li></ul><h5 id="_1-8-2-自定义函数" tabindex="-1"><a class="header-anchor" href="#_1-8-2-自定义函数" aria-hidden="true">#</a> 1.8.2 自定义函数</h5><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span> <span class="token keyword">function</span> <span class="token punctuation">]</span> funname<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token punctuation">{</span>
	Action<span class="token punctuation">;</span>
	<span class="token punctuation">[</span>return int<span class="token punctuation">;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>调用直接写函数名：funname [值]</li></ul><h4 id="_1-9-定时备份数据库" tabindex="-1"><a class="header-anchor" href="#_1-9-定时备份数据库" aria-hidden="true">#</a> 1.9. 定时备份数据库</h4><p><strong>需求分析</strong></p><ol><li>每天凌晨2：30备份数据库到<code>/data/backup/db</code></li><li>备份开始和备份结束能够给出相应的提示信息</li><li>备份后的文件要求以备份时间为文件名，并打包成<code>.tar.gz</code>的形式，比如：<code>2022-12-18_180001.tar.gz</code></li><li>在备份的同时，检查是否有10天前备份的数据库文件，如果有就删除</li></ol><h3 id="_2、日志管理" tabindex="-1"><a class="header-anchor" href="#_2、日志管理" aria-hidden="true">#</a> 2、日志管理</h3><h3 id="_3、定制自己的linux" tabindex="-1"><a class="header-anchor" href="#_3、定制自己的linux" aria-hidden="true">#</a> 3、定制自己的Linux</h3><h3 id="_4、内核源码-内核升级" tabindex="-1"><a class="header-anchor" href="#_4、内核源码-内核升级" aria-hidden="true">#</a> 4、内核源码&amp;内核升级</h3><h3 id="_5、备份与恢复" tabindex="-1"><a class="header-anchor" href="#_5、备份与恢复" aria-hidden="true">#</a> 5、备份与恢复</h3><h3 id="_6、可视化管理webmin和bt运维工具" tabindex="-1"><a class="header-anchor" href="#_6、可视化管理webmin和bt运维工具" aria-hidden="true">#</a> 6、可视化管理webmin和bt运维工具</h3><h3 id="_7、入侵检测-权限划分-系统优化" tabindex="-1"><a class="header-anchor" href="#_7、入侵检测-权限划分-系统优化" aria-hidden="true">#</a> 7、入侵检测&amp;权限划分&amp;系统优化</h3><h3 id="_8、面试题" tabindex="-1"><a class="header-anchor" href="#_8、面试题" aria-hidden="true">#</a> 8、面试题</h3>`,54);function O($,R){const i=c("ExternalLinkIcon");return n(),t("div",null,[r,e("p",null,[p,l("："),e("a",u,[l("https://www.vmware.com/cn.html"),o(i)])]),e("p",null,[h,l("："),e("a",m,[l("https://www.centos.org/download/"),o(i)])]),g,e("ul",null,[e("li",null,[e("a",b,[l("http://mirrors.aliyun.com"),o(i)])]),e("li",null,[e("a",v,[l("http://mirrors.sohu.com"),o(i)])]),e("li",null,[e("a",x,[l("http://mirrors.163.com"),o(i)])]),e("li",null,[e("a",k,[l("http://mirrors.cqu.edu.cn/CentOS"),o(i)])])]),f,e("ul",null,[_,e("li",null,[w,e("ol",null,[y,e("li",null,[q,e("ul",null,[e("li",null,[e("p",null,[l("编写脚本："),e("a",L,[l("my.sh"),o(i)]),l("（设置可执行权限）")]),S]),z])]),P])])]),C,e("p",null,[e("em",null,[l("实例："),e("a",I,[l("用户在浏览器输入了www.baidu.com"),o(i)])])]),D,M,E])}const T=a(s,[["render",O],["__file","linux.html.vue"]]);export{T as default};
